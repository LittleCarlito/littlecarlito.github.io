#!/bin/bash
# Running pre-push checks directly without husky sourcing

# Change to repository root directory to ensure commands work correctly
cd "$(git rev-parse --show-toplevel)" || exit 1

echo "üîç Running pre-push checks..."

# First, verify the lockfile is in sync with package.json
echo "Verifying lockfile integrity..."
# Check if lockfile is out of sync using pnpm's lockfile-report
pnpm install --frozen-lockfile --prefer-offline --lockfile-only > /dev/null 2>&1
LOCKFILE_STATUS=$?

if [ $LOCKFILE_STATUS -ne 0 ]; then
    echo "‚ö†Ô∏è Lockfile is out of sync with package.json."
    echo "üîß Automatically updating lockfile..."
    
    # Update lockfile
    pnpm install --no-frozen-lockfile
    
    # Commit the changes
    git add pnpm-lock.yaml
    git commit -m "chore: update lockfile to match package.json"
    
    echo "‚úÖ Lockfile updated and changes committed! Continuing with push..."
else
    echo "‚úÖ Lockfile is in sync with package.json"
fi

# Run versioning checks and updates
echo "üî¢ Checking package versions..."
CURRENT_BRANCH=$(git branch --show-current)

# Use pnpm test-version to detect version changes
echo "Running version test to detect required changes..."
pnpm test-version > version_output.tmp
VERSION_TEST_STATUS=$?

# Check if version increments were found by looking for "increments" in the output
if grep -q "increments" version_output.tmp; then
    echo "üì¶ Version changes needed based on pnpm test-version results."
    
    # Apply the version changes
    echo "Updating package versions..."
    pnpm version-packages
    VERSION_UPDATE_STATUS=$?
    
    if [ $VERSION_UPDATE_STATUS -ne 0 ]; then
        echo "‚ùå Failed to update package versions (exit code: $VERSION_UPDATE_STATUS). Push will continue, but versions may be out of sync."
    else
        echo "‚úÖ Package versions updated successfully."
        
        # Commit the version changes
        if [ -n "$(git status --porcelain)" ]; then
            echo "üì¶ Committing version changes..."
            git add .
            git commit -m "chore(release): update package versions based on version test"
            echo "‚úÖ Version changes committed! Continuing with push..."
        fi
    fi
else
    echo "‚úÖ No version changes needed according to pnpm test-version."
fi

# Remove temporary file
rm -f version_output.tmp

# Don't exit on error for the remainder of the script to allow debug logging
set +e

# Check for changes outside development/ and public/ directories
echo "Checking for relevant file changes..."

# Use the same base reference for file comparison
BASE_COMMIT=${FROM_REF}
echo "Comparing files with base: ${BASE_COMMIT}"

# Get files changed between base commit and HEAD
CHANGED_FILES=$(git diff --name-only $BASE_COMMIT HEAD)

# Flag to indicate if we need to run tests
RUN_TESTS=false

# Use a different approach to avoid subshell issues
for file in $CHANGED_FILES; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Check if file is NOT in development/ or public/ directories
    if ! [[ "$file" =~ ^(development/|public/) ]]; then
        echo "üîç Found change in $file - will run pipeline tests"
        RUN_TESTS=true
    fi
done

if [ "$RUN_TESTS" = true ]; then
    # Check if .github directory has changes
    GITHUB_DIR_CHANGES=$(git diff --name-only $BASE_COMMIT HEAD | grep -c "^\.github/")
    
    # Only run workflow validation if .github directory has changes
    if [ "$GITHUB_DIR_CHANGES" -gt 0 ]; then
        echo "üîç Changes detected in .github directory, validating workflows..."
        
        # Run the new validation script
        if [ -f "tests/pipeline-tests/validate-github-actions.sh" ]; then
            echo "Running GitHub Actions validator..."
            ./tests/pipeline-tests/validate-github-actions.sh || {
                echo "‚ùå GitHub Actions validation failed."
                echo "Please fix workflow syntax issues before pushing."
                exit 1
            }
        fi
        
        # Also run existing workflow alignment validator if available
        if [ -f ".github/scripts/pr/validate-workflow-alignment.sh" ]; then
            echo "Running workflow alignment validation..."
            ./.github/scripts/pr/validate-workflow-alignment.sh || {
                echo "‚ùå Workflow alignment validation failed."
                echo "Please fix workflow alignment issues before pushing."
                exit 1
            }
        else
            echo "‚ö†Ô∏è Workflow alignment script not found at .github/scripts/pr/validate-workflow-alignment.sh"
            echo "Skipping workflow alignment validation."
        fi
    else
        echo "‚úÖ No changes in .github directory, skipping workflow validation."
    fi
    
    # Run unified pipeline with logging
    echo "üöÄ Running unified pipeline test with full logging..."
    pnpm test
    TEST_STATUS=$?
    echo "Test command exited with status: $TEST_STATUS"
    
    if [ $TEST_STATUS -ne 0 ]; then
        echo "‚ùå Pipeline test failed. See output above for details."
        exit 1
    fi
    
    # Explicitly indicate tests passed
    echo "‚úÖ Pipeline tests passed! Moving to build step..."

    # Run build to ensure it succeeds
    echo "üèóÔ∏è Running build..."
    pnpm build
    BUILD_STATUS=$?
    echo "Build command exited with status: $BUILD_STATUS"
    
    if [ $BUILD_STATUS -ne 0 ]; then
        echo "‚ùå Build failed. Please fix build issues before pushing."
        exit 1
    fi
    echo "‚úÖ Build passed!"
    
    echo "‚úÖ All pre-push checks completed successfully!"
else
    echo "‚úÖ No changes detected outside development/ and public/ directories. Skipping tests."
fi

echo "üéâ Pre-push script reached the end! Exiting with success."
# Force success to allow the push to proceed
exit 0 