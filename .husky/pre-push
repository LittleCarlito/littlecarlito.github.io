#!/usr/bin/env bash
# Pre-push hook that runs checks before completing a git push

# Detect if this is a recursive call from our own script
if [ -n "${HUSKY_PUSH_RUNNING}" ]; then
  echo "‚úÖ Detected push from our own script, skipping pre-push hook"
  exit 0
fi

# Set environment variable to mark that we're running
export HUSKY_PUSH_RUNNING=1

# Capture original args for the final push command
ARGS=("$@")

# Shell environment debug info
echo "Shell: $SHELL"
echo "Bash version: $BASH_VERSION"

# Prevent git from using a pager for any command
export GIT_PAGER=""

# Parse command-line arguments
DRY_RUN=false
ORIGINAL_REMOTE="$1"
ORIGINAL_REMOTE_URL="$2"

# Capture the ref information from STDIN (what git provides to pre-push hooks)
if [ -t 0 ]; then
  # Terminal is interactive, don't try to read stdin
  REF_INFO=""
else
  # Read from stdin when it has data (like when Git calls the hook)
  REF_INFO=$(cat)
fi

# Extract the branch name from the ref (assuming format refs/heads/branch-name)
if [ -n "$REF_INFO" ]; then
  LOCAL_REF=$(echo "$REF_INFO" | cut -d' ' -f1)
  REMOTE_REF=$(echo "$REF_INFO" | cut -d' ' -f3)
  ORIGINAL_BRANCH=$(echo "$LOCAL_REF" | sed 's|refs/heads/||')
  REMOTE_BRANCH=$(echo "$REMOTE_REF" | sed 's|refs/heads/||')
  echo "Pushing branch $ORIGINAL_BRANCH to $REMOTE_BRANCH on $ORIGINAL_REMOTE"
else
  echo "No ref information provided, will use current branch"
  ORIGINAL_BRANCH=$(git symbolic-ref --short HEAD)
  REMOTE_BRANCH="$ORIGINAL_BRANCH"
  echo "Using current branch: $ORIGINAL_BRANCH"
fi

# Check for command-line arguments
for arg in "$@"; do
  if [ "$arg" = "--dry-run" ]; then
    DRY_RUN=true
    echo "üî¨ DRY RUN MODE ENABLED - No changes will be committed or pushed"
  fi
done

# Check if we should skip tests
SKIP_TESTS=${SKIP_TESTS:-false}
if [ "$SKIP_TESTS" = "true" ]; then
  echo "‚è© SKIPPING TESTS"
fi

# Change to repository root directory to ensure commands work correctly
cd "$(git rev-parse --show-toplevel)" || {
    echo "‚ùå Failed to change to repository root directory"
    exit 1
}

echo "üîç Running pre-push checks..."

# First, verify the lockfile is in sync with package.json
echo "Verifying lockfile integrity..."
# Check if lockfile is out of sync using pnpm's lockfile-report
pnpm install --frozen-lockfile --prefer-offline --lockfile-only > /dev/null 2>&1
LOCKFILE_STATUS=$?

if [ $LOCKFILE_STATUS -ne 0 ]; then
    echo "‚ö†Ô∏è Lockfile is out of sync with package.json."
    if [ "$DRY_RUN" = true ]; then
        echo "üî¨ [DRY RUN] Would update lockfile and commit changes"
    else
        echo "üîß Automatically updating lockfile..."
        
        # Update lockfile
        pnpm install --no-frozen-lockfile
        
        # Commit the changes
        git add pnpm-lock.yaml
        git commit -m "chore: update lockfile to match package.json"
        
        echo "‚úÖ Lockfile updated and changes committed! Continuing with push..."
    fi
else
    echo "‚úÖ Lockfile is in sync with package.json"
fi

# Check for changes outside development/ and public/ directories
echo "Checking for relevant file changes..."

# Get files changed between base commit and HEAD
CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
if [ $? -ne 0 ]; then
    echo "‚ùå Error getting changed files. This might happen if you're pushing a new branch."
    echo "Proceeding with tests to be safe..."
    RUN_TESTS=true
else
    # Flag to indicate if we need to run tests
    RUN_TESTS=false

    # Use a different approach to avoid subshell issues
    for file in $CHANGED_FILES; do
        # Skip empty lines
        [ -z "$file" ] && continue
        
        # Check if file is NOT in development/ or public/ directories
        if ! [[ "$file" =~ ^(development/|public/) ]]; then
            echo "üîç Found change in $file - will run pipeline tests"
            RUN_TESTS=true
        fi
    done
fi

# Set RUN_TESTS to false if SKIP_TESTS is true
if [ "$SKIP_TESTS" = "true" ]; then
    RUN_TESTS=false
    echo "‚è© Test execution has been skipped due to SKIP_TESTS=true flag"
fi

if [ "$RUN_TESTS" = true ]; then
    # Check if .github directory has changes
    GITHUB_DIR_CHANGES=$(git diff --name-only HEAD^ HEAD 2>/dev/null | grep -c "^\.github/" || echo "0")
    
    # Only run workflow validation if .github directory has changes
    if [ "${GITHUB_DIR_CHANGES:-0}" -gt 0 ]; then
        echo "üîç Changes detected in .github directory, validating workflows..."
        
        # Run the new validation script
        if [ -f "tests/pipeline-tests/validate-github-actions.sh" ]; then
            echo "Running GitHub Actions validator..."
            ./tests/pipeline-tests/validate-github-actions.sh || {
                echo "‚ùå GitHub Actions validation failed."
                echo "Please fix workflow syntax issues before pushing."
                exit 1
            }
        fi
        
        # Also run existing workflow alignment validator if available
        if [ -f ".github/scripts/pr/validate-workflow-alignment.sh" ]; then
            echo "Running workflow alignment validation..."
            ./.github/scripts/pr/validate-workflow-alignment.sh || {
                echo "‚ùå Workflow alignment validation failed."
                echo "Please fix workflow alignment issues before pushing."
                exit 1
            }
        else
            echo "‚ö†Ô∏è Workflow alignment script not found at .github/scripts/pr/validate-workflow-alignment.sh"
            echo "Skipping workflow alignment validation."
        fi
    else
        echo "‚úÖ No changes in .github directory, skipping workflow validation."
    fi
    
    # Run build to ensure it succeeds
    echo "üèóÔ∏è Running build..."
    pnpm build
    BUILD_STATUS=$?
    echo "Build command exited with status: $BUILD_STATUS"
    
    if [ $BUILD_STATUS -ne 0 ]; then
        echo "‚ùå Build failed. Please fix build issues before pushing."
        exit 1
    fi
    echo "‚úÖ Build passed!"
    
    # Run unified pipeline with logging
    echo "üöÄ Running unified pipeline test with full logging..."
    pnpm test
    TEST_STATUS=$?
    echo "Test command exited with status: $TEST_STATUS"
    
    if [ $TEST_STATUS -ne 0 ]; then
        echo "‚ùå Pipeline test failed. See output above for details."
        exit 1
    fi
    
    # Explicitly indicate tests passed
    echo "‚úÖ Pipeline tests passed!"
fi

# If we reach here, all checks have passed - execute the actual push
# Only use the remote name, not the URL
PUSH_CMD="git push $ORIGINAL_REMOTE"

# Don't add all original arguments since that includes the URL which breaks the command
# Instead, manually add any flags/options that might have been passed
if [ "$DRY_RUN" = true ]; then
  PUSH_CMD="$PUSH_CMD --dry-run"
fi

# Execute the push with our environment variable to prevent recursion
echo "üöÄ Running: $PUSH_CMD"
eval "HUSKY_PUSH_RUNNING=1 $PUSH_CMD"
PUSH_STATUS=$?

if [ $PUSH_STATUS -ne 0 ]; then
  echo "‚ùå Push failed with status $PUSH_STATUS"
  exit $PUSH_STATUS
fi

echo "‚úÖ Push completed successfully!"

# Exit with 0 which tells Git not to do its own push
exit 0 