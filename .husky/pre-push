#!/bin/sh

# Exit on error but NOT for grep commands
set -e

echo "üîç Running comprehensive pre-push checks..."

# First, verify the lockfile is in sync with package.json
echo "Verifying lockfile integrity..."
pnpm verify-lockfile || {
    echo "‚ùå Lockfile is out of sync with package.json."
    echo "Please run 'pnpm update-lockfile' and commit the changes before pushing."
    exit 1
}

# Get the current branch name
BRANCH=$(git symbolic-ref --short HEAD)

# Check if files related to Rapier or module loading have been modified
echo "Checking for changes to module loading or Rapier-related files..."
HAS_MODULE_CHANGES=0
if git diff --cached --name-only | grep -q -E "(loader\.js|importmap|rapier|index\.html)"; then
    HAS_MODULE_CHANGES=1
fi

# Check if files related to asset loading or path resolution have been modified
echo "Checking for changes to asset paths or GitHub Pages related files..."
HAS_ASSET_CHANGES=0
if git diff --cached --name-only | grep -q -E "(main\.js|\.jpg|\.png|\.svg|manifest\.json|vite\.config|path)"; then
    HAS_ASSET_CHANGES=1
fi

# Run tests first to catch any immediate issues
echo "Running tests..."
pnpm test || {
    echo "‚ùå Tests failed. Please fix failing tests before pushing."
    exit 1
}

# Run build to ensure it succeeds
echo "Running build..."
pnpm build || {
    echo "‚ùå Build failed. Please fix build issues before pushing."
    exit 1
}

# ALWAYS run GitHub Pages build and integrity tests to avoid deployment issues
echo "üîç Running GitHub Pages build and integrity tests..."
GITHUB_PAGES=true FORCE_BUILD=true pnpm test:build-integrity || {
    echo "‚ùå GitHub Pages build integrity tests failed."
    echo "This could prevent the site from loading correctly when deployed."
    echo "Please fix the issues before pushing. Common problems include:"
    echo "  - Path resolution issues"
    echo "  - Missing or inaccessible assets"
    echo "  - Manifest loading problems"
    exit 1
}

# Check if we need to run additional module integrity tests
if [ $HAS_MODULE_CHANGES -eq 1 ]; then
    echo "üîç Module loading changes detected, running additional module integrity tests..."
    pnpm test:build-integrity || {
        echo "‚ùå Module integrity tests failed. The changes you've made might break Rapier loading."
        echo "Please review your changes to module imports, especially Rapier loading."
        exit 1
    }
fi

# If pushing to main or merging into main, run additional checks
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ] || git rev-parse "origin/main...HEAD" >/dev/null 2>&1; then
    echo "üîç Running additional checks for main branch..."
    
    # Run the full GitHub Pages verification workflow
    echo "Verifying GitHub Pages build and Rapier module loading..."
    pnpm verify-gh-pages || {
        echo "‚ùå GitHub Pages verification failed. Please fix the issues before pushing."
        echo "Use 'pnpm verify-gh-pages' to debug the problem locally."
        exit 1
    }
fi

# Run semantic-release dry run checks
if [ "$BRANCH" = "main" ] || [[ "$BRANCH" == feature/* ]]; then
    echo "Running semantic-release dry run for root project..."
    pnpm semantic-release --dry-run || {
        echo "‚ùå Semantic release dry run failed for root project."
        exit 1
    }

    # Check packages
    if [ -d "packages/blorkpack" ]; then
        echo "Running semantic-release dry run for blorkpack..."
        cd packages/blorkpack
        pnpm semantic-release --dry-run || {
            echo "‚ùå Semantic release dry run failed for blorkpack."
            cd ../..
            exit 1
        }
        cd ../..
    fi

    if [ -d "packages/blorktools" ]; then
        echo "Running semantic-release dry run for blorktools..."
        cd packages/blorktools
        pnpm semantic-release --dry-run || {
            echo "‚ùå Semantic release dry run failed for blorktools."
            cd ../..
            exit 1
        }
        cd ../..
    fi
    
    echo "‚úÖ Semantic versioning dry run completed!"
else
    echo "Skipping semantic-release dry run checks on branch $BRANCH"
fi

echo "‚úÖ All pre-push checks passed!" 