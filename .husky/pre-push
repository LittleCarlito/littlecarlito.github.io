#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Exit on error
set -e

echo "üîç Running pre-push checks..."

# First, verify the lockfile is in sync with package.json
echo "Verifying lockfile integrity..."
pnpm verify-lockfile || {
    echo "‚ö†Ô∏è Lockfile is out of sync with package.json."
    echo "üîß Automatically updating lockfile..."
    
    # Update lockfile
    pnpm update-lockfile
    
    # Commit the changes
    git add pnpm-lock.yaml
    git commit -m "chore: update lockfile to match package.json"
    
    echo "‚úÖ Lockfile updated and changes committed! Continuing with push..."
}

# Get the current branch name
BRANCH=$(git symbolic-ref --short HEAD)

# Create a timeout function
run_with_timeout() {
    # Command to run
    cmd="$1"
    # Timeout in seconds
    timeout="$2"
    
    # Use perl to create a timeout wrapper since 'timeout' command isn't available on all systems
    perl -e '
        use strict;
        use warnings;
        
        # Get command and timeout
        my $cmd = $ARGV[0];
        my $timeout = $ARGV[1];
        
        # Fork a child process
        my $pid = fork();
        
        if (!defined $pid) {
            die "Cannot fork: $!";
        }
        
        if ($pid == 0) {
            # Child process - execute the command
            exec($cmd) or die "Cannot execute command: $!";
        } else {
            # Parent process - wait for child with timeout
            my $killed = 0;
            
            # Set alarm for timeout
            eval {
                local $SIG{ALRM} = sub { 
                    kill("TERM", $pid); 
                    sleep(1);
                    kill("KILL", $pid) if kill(0, $pid);
                    $killed = 1;
                    die "Timeout\n";
                };
                
                alarm($timeout);
                waitpid($pid, 0);
                alarm(0);
            };
            
            if ($@) {
                if ($killed) {
                    print "Command timed out after $timeout seconds\n";
                    exit 124;  # Exit code for timeout
                } else {
                    die $@;  # Re-throw other exceptions
                }
            }
            
            my $exit_code = $? >> 8;
            exit $exit_code;
        }
    ' "$cmd" "$timeout"
    
    return $?
}

# Check for changes outside development/ and public/ directories
echo "Checking for relevant file changes..."
# Get files changed between current branch and remote
CHANGED_FILES=$(git diff --name-only origin/$(git branch --show-current) HEAD)

# Flag to indicate if we need to run tests
RUN_TESTS=false

# Use a different approach to avoid subshell issues
for file in $CHANGED_FILES; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Check if file is NOT in development/ or public/ directories
    if ! [[ "$file" =~ ^(development/|public/) ]]; then
        echo "üîç Found change in $file - will run pipeline tests"
        RUN_TESTS=true
    fi
done

if [ "$RUN_TESTS" = true ]; then
    # Run unified pipeline with timeout to prevent hanging
    echo "üöÄ Running unified pipeline test..."
    
    # Run unified pipeline with 5-minute timeout
    run_with_timeout "pnpm test" 300
    PIPELINE_STATUS=$?
    
    if [ $PIPELINE_STATUS -eq 124 ]; then
        echo "‚ùå Pipeline test timed out after 5 minutes. This may indicate a hanging process."
        echo "Please check your tests for infinite loops or blocking operations."
        exit 1
    elif [ $PIPELINE_STATUS -ne 0 ]; then
        echo "‚ùå Pipeline test failed with status $PIPELINE_STATUS."
        echo "Please fix the issues before pushing."
        exit 1
    fi
    
    echo "‚úÖ Pipeline test passed!"

    # Run build to ensure it succeeds
    echo "Running build..."
    pnpm build || {
        echo "‚ùå Build failed. Please fix build issues before pushing."
        exit 1
    }
else
    echo "‚úÖ No changes detected outside development/ and public/ directories. Skipping tests."
fi

# If pushing to main or merging into main, run additional checks
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ] || git rev-parse "origin/main...HEAD" >/dev/null 2>&1; then
    echo "üîç Running additional checks for main branch..."
    
    # Check for GitHub Pages build issues
    echo "Checking GitHub Pages build..."
    GITHUB_PAGES=true pnpm build || {
        echo "‚ùå GitHub Pages build failed. Please fix build issues before pushing."
        exit 1
    }
fi

# Run semantic-release dry run checks
if [ "$BRANCH" = "main" ] || [[ "$BRANCH" == feature/* ]]; then
    echo "Running semantic-release dry run for root project..."
    pnpm semantic-release --dry-run || {
        echo "‚ùå Semantic release dry run failed for root project."
        exit 1
    }

    # Check packages
    if [ -d "packages/blorkpack" ]; then
        echo "Running semantic-release dry run for blorkpack..."
        cd packages/blorkpack
        pnpm semantic-release --dry-run || {
            echo "‚ùå Semantic release dry run failed for blorkpack."
            cd ../..
            exit 1
        }
        cd ../..
    fi

    if [ -d "packages/blorktools" ]; then
        echo "Running semantic-release dry run for blorktools..."
        cd packages/blorktools
        pnpm semantic-release --dry-run || {
            echo "‚ùå Semantic release dry run failed for blorktools."
            cd ../..
            exit 1
        }
        cd ../..
    fi
    
    echo "‚úÖ Semantic versioning dry run completed!"
else
    echo "Skipping semantic-release dry run checks on branch $BRANCH"
fi

echo "‚úÖ All pre-push checks passed!" 