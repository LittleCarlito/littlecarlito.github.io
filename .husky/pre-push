#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Exit on error
set -e

echo "üîç Running pre-push checks..."

# First, verify the lockfile is in sync with package.json
echo "Verifying lockfile integrity..."
pnpm verify-lockfile || {
    echo "‚ùå Lockfile is out of sync with package.json."
    echo "Please run 'pnpm update-lockfile' and commit the changes before pushing."
    exit 1
}

# Get the current branch name
BRANCH=$(git symbolic-ref --short HEAD)

# Check for changes outside development/ and public/ directories
echo "Checking for relevant file changes..."
# Get files changed between current branch and remote
CHANGED_FILES=$(git diff --name-only origin/$(git branch --show-current) HEAD)

# Flag to indicate if we need to run tests
RUN_TESTS=false

# Use a different approach to avoid subshell issues
for file in $CHANGED_FILES; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Check if file is NOT in development/ or public/ directories
    if ! [[ "$file" =~ ^(development/|public/) ]]; then
        echo "üîç Found change in $file - will run tests"
        RUN_TESTS=true
        break
    fi
done

if [ "$RUN_TESTS" = true ]; then
    # Run tests to catch any immediate issues
    echo "Running tests..."
    pnpm test || {
        echo "‚ùå Tests failed. Please fix failing tests before pushing."
        exit 1
    }

    # Run build to ensure it succeeds
    echo "Running build..."
    pnpm build || {
        echo "‚ùå Build failed. Please fix build issues before pushing."
        exit 1
    }
else
    echo "‚úÖ No changes detected outside development/ and public/ directories. Skipping tests."
fi

# If pushing to main or merging into main, run additional checks
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ] || git rev-parse "origin/main...HEAD" >/dev/null 2>&1; then
    echo "üîç Running additional checks for main branch..."
    
    # Check for GitHub Pages build issues
    echo "Checking GitHub Pages build..."
    GITHUB_PAGES=true pnpm build || {
        echo "‚ùå GitHub Pages build failed. Please fix build issues before pushing."
        exit 1
    }
fi

# Run semantic-release dry run checks
if [ "$BRANCH" = "main" ] || [[ "$BRANCH" == feature/* ]]; then
    echo "Running semantic-release dry run for root project..."
    pnpm semantic-release --dry-run || {
        echo "‚ùå Semantic release dry run failed for root project."
        exit 1
    }

    # Check packages
    if [ -d "packages/blorkpack" ]; then
        echo "Running semantic-release dry run for blorkpack..."
        cd packages/blorkpack
        pnpm semantic-release --dry-run || {
            echo "‚ùå Semantic release dry run failed for blorkpack."
            cd ../..
            exit 1
        }
        cd ../..
    fi

    if [ -d "packages/blorktools" ]; then
        echo "Running semantic-release dry run for blorktools..."
        cd packages/blorktools
        pnpm semantic-release --dry-run || {
            echo "‚ùå Semantic release dry run failed for blorktools."
            cd ../..
            exit 1
        }
        cd ../..
    fi
    
    echo "‚úÖ Semantic versioning dry run completed!"
else
    echo "Skipping semantic-release dry run checks on branch $BRANCH"
fi

echo "‚úÖ All pre-push checks passed!" 