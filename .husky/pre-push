#!/bin/bash
# Running pre-push checks directly without husky sourcing

# Don't exit on error to allow debug logging
set +e

# Change to repository root directory to ensure commands work correctly
cd "$(git rev-parse --show-toplevel)" || exit 1

echo "üîç Running pre-push checks..."

# First, verify the lockfile is in sync with package.json
echo "Verifying lockfile integrity..."
# Check if lockfile is out of sync using pnpm's lockfile-report
pnpm install --frozen-lockfile --prefer-offline --lockfile-only > /dev/null 2>&1
LOCKFILE_STATUS=$?

if [ $LOCKFILE_STATUS -ne 0 ]; then
    echo "‚ö†Ô∏è Lockfile is out of sync with package.json."
    echo "üîß Automatically updating lockfile..."
    
    # Update lockfile
    pnpm update-lockfile
    
    # Commit the changes
    git add pnpm-lock.yaml
    git commit -m "chore: update lockfile to match package.json"
    
    echo "‚úÖ Lockfile updated and changes committed! Continuing with push..."
else
    echo "‚úÖ Lockfile is in sync with package.json"
fi

# Get the current branch name
BRANCH=$(git symbolic-ref --short HEAD)

# Check for version changes using test-version script
echo "üì¶ Checking for version changes..."

# Run test-version to check if versions need to be bumped
echo "Running pnpm test-version..."
VERSION_OUTPUT=$(pnpm test-version --branch=$BRANCH 2>&1)
VERSION_STATUS=$?

echo "$VERSION_OUTPUT"

# Check if version changes were detected (this depends on how test-version reports changes)
if echo "$VERSION_OUTPUT" | grep -q "No version changes detected"; then
    echo "‚úÖ No version changes needed"
else
    echo "üîÑ Version changes detected - applying changes..."
    
    # Set up git config for the potential commit
    git config user.name "$(git config user.name)" # Use current git config
    git config user.email "$(git config user.email)" # Use current git config
    
    # Run the version script without dry-run to apply changes
    VERSIONING_SCRIPT=".github/scripts/versioning/version-from-commits.js"
    if [ -f "$VERSIONING_SCRIPT" ]; then
        # Make the script executable
        chmod +x "$VERSIONING_SCRIPT"
        
        # Run the version script without the dry-run flag to actually apply changes
        node "$VERSIONING_SCRIPT" --to=$BRANCH --from=beginning
        
        # Check if changesets were created
        if [ -d ".changeset" ] && [ "$(ls -A .changeset/*.md 2>/dev/null)" ]; then
            echo "Applying changesets to update package.json files"
            
            # Show changeset content before applying
            echo "Changeset content:"
            cat .changeset/*.md
            
            # Apply the changesets to update package.json files
            pnpm changeset version
            
            # Check if any files were changed
            if [ -n "$(git status --porcelain)" ]; then
                echo "‚úÖ Version changes detected and applied"
                
                # Get summary of version changes for commit message
                VERSION_SUMMARY=$(pnpm test-version --branch=$BRANCH 2>&1 | grep -A 10 "Version Changes:" | grep -v "This is a dry run")
                
                # Commit the version changes
                git add .
                git commit -m "chore(release): update versions based on branch analysis

$VERSION_SUMMARY

Applied version changes automatically."
                
                echo "‚úÖ Version changes committed! Continuing with push..."
            else
                echo "No changes to package.json files"
            fi
        else
            echo "No changesets were created - no version changes needed"
        fi
    else
        echo "‚ö†Ô∏è Versioning script not found at $VERSIONING_SCRIPT"
        echo "Skipping version analysis"
    fi
fi

# Check for changes outside development/ and public/ directories
echo "Checking for relevant file changes..."

# Get the base commit for comparison - use safer detection
CURRENT_BRANCH=$(git branch --show-current)
BASE_COMMIT=""

# Check if the branch exists on the remote
if git ls-remote --heads origin $CURRENT_BRANCH | grep -q $CURRENT_BRANCH; then
    # Branch exists on remote, use it as base
    BASE_COMMIT="origin/$CURRENT_BRANCH"
    echo "Comparing with existing remote branch: $BASE_COMMIT"
else
    # Branch doesn't exist on remote yet, use the branch point from main
    BASE_COMMIT=$(git merge-base origin/main HEAD)
    echo "New branch, comparing with merge-base from main: $BASE_COMMIT"
fi

# Get files changed between base commit and HEAD
CHANGED_FILES=$(git diff --name-only $BASE_COMMIT HEAD)

# Flag to indicate if we need to run tests
RUN_TESTS=false

# Use a different approach to avoid subshell issues
for file in $CHANGED_FILES; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Check if file is NOT in development/ or public/ directories
    if ! [[ "$file" =~ ^(development/|public/) ]]; then
        echo "üîç Found change in $file - will run pipeline tests"
        RUN_TESTS=true
    fi
done

if [ "$RUN_TESTS" = true ]; then
    # Check if .github directory has changes
    GITHUB_DIR_CHANGES=$(git diff --name-only $BASE_COMMIT HEAD | grep -c "^\.github/")
    
    # Only run workflow validation if .github directory has changes
    if [ "$GITHUB_DIR_CHANGES" -gt 0 ]; then
        echo "üîç Changes detected in .github directory, validating workflows..."
        
        # Run the new validation script
        if [ -f "tests/pipeline-tests/validate-github-actions.sh" ]; then
            echo "Running GitHub Actions validator..."
            ./tests/pipeline-tests/validate-github-actions.sh || {
                echo "‚ùå GitHub Actions validation failed."
                echo "Please fix workflow syntax issues before pushing."
                exit 1
            }
        fi
        
        # Also run existing workflow alignment validator if available
        if [ -f ".github/scripts/pr/validate-workflow-alignment.sh" ]; then
            echo "Running workflow alignment validation..."
            ./.github/scripts/pr/validate-workflow-alignment.sh || {
                echo "‚ùå Workflow alignment validation failed."
                echo "Please fix workflow alignment issues before pushing."
                exit 1
            }
        else
            echo "‚ö†Ô∏è Workflow alignment script not found at .github/scripts/pr/validate-workflow-alignment.sh"
            echo "Skipping workflow alignment validation."
        fi
    else
        echo "‚úÖ No changes in .github directory, skipping workflow validation."
    fi
    
    # Run unified pipeline with logging
    echo "üöÄ Running unified pipeline test with full logging..."
    pnpm test
    TEST_STATUS=$?
    echo "Test command exited with status: $TEST_STATUS"
    
    if [ $TEST_STATUS -ne 0 ]; then
        echo "‚ùå Pipeline test failed. See output above for details."
        exit 1
    fi
    
    # Explicitly indicate tests passed
    echo "‚úÖ Pipeline tests passed! Moving to build step..."

    # Run build to ensure it succeeds
    echo "üèóÔ∏è Running build..."
    pnpm build
    BUILD_STATUS=$?
    echo "Build command exited with status: $BUILD_STATUS"
    
    if [ $BUILD_STATUS -ne 0 ]; then
        echo "‚ùå Build failed. Please fix build issues before pushing."
        exit 1
    fi
    echo "‚úÖ Build passed!"

    # TEMPORARY: Skip semantic-release checks for debugging
    echo "‚è≠Ô∏è TEMPORARILY SKIPPING semantic-release checks to debug pre-push issues"
    
    echo "‚úÖ All pre-push checks completed successfully!"
else
    echo "‚úÖ No changes detected outside development/ and public/ directories. Skipping tests."
fi

echo "üéâ Pre-push script reached the end! Exiting with success."
# Force success to allow the push to proceed
exit 0 