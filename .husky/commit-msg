#!/bin/sh

echo "üîç Validating commit message format..."
COMMIT_MSG=$(cat "$1")

# Check which files are being committed
STAGED_FILES=$(git diff --cached --name-only)

# Flag to indicate if any files outside development/ or public/ are being committed
STRICT_VALIDATION=false

# Check if any file outside development/ and public/ is being committed
for file in $STAGED_FILES; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Check if file is NOT in development/ or public/ directories
    if ! [[ "$file" =~ ^(development/|public/) ]]; then
        echo "üîç Found change in $file - will enforce strict commit message validation"
        STRICT_VALIDATION=true
        break
    fi
done

# Debug: Show the actual commit message
echo "üìù Your commit message is:"
echo "----------------------------"
cat "$1"
echo "----------------------------"

if [ "$STRICT_VALIDATION" = true ]; then
    # Run commitlint to validate the message
    pnpm commitlint --edit "$1" || (
      echo "‚ùå Commit message validation failed!"
      echo "‚ÑπÔ∏è Your commit message should follow the conventional commit format:"
      echo "  type[(scope)]: subject"
      echo ""
      echo "Types: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test"
      echo "Scopes (optional): blorkpack, blorktools, common, core, docs, release, no-release, tests"
      echo ""
      echo "Examples:"
      echo "  feat: add new feature"
      echo "  fix(blorktools): resolve issue with tool X"
      echo "  chore(tests): update test framework"
      echo ""
      exit 1
    )

    echo "‚úÖ Commit message format is valid!"

    # Extract the type and scope from the commit message
    TYPE=$(echo "$COMMIT_MSG" | head -1 | sed -E 's/^([a-z]+)(\(.*\))?:.*/\1/')
    SCOPE=$(echo "$COMMIT_MSG" | head -1 | sed -E 's/^[a-z]+\(([^)]*)\):.*/\1/')

    # Determine the potential semantic version impact
    if [ "$TYPE" = "feat" ]; then
      echo "üöÄ This commit would trigger a MINOR version bump"
    elif [ "$TYPE" = "fix" ] || [ "$TYPE" = "perf" ]; then
      echo "üîß This commit would trigger a PATCH version bump"
    elif [ "$SCOPE" = "no-release" ] || [ "$SCOPE" = "tests" ]; then
      echo "‚è∏Ô∏è  This commit will NOT trigger a version bump (${SCOPE} scope)"
    else
      echo "üìù This commit may trigger a PATCH version bump depending on configuration"
    fi
else
    echo "‚úÖ Only changes in development/ or public/ directories. Allowing any commit message format for artists."
fi 