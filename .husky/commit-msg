#!/bin/sh

# Run basic commitlint validation
npx --no -- commitlint --edit $1

echo "üîç Validating commit message format..."

# Exit if commitlint failed
if [ $? -ne 0 ]; then
  echo "‚ùå Commit message validation failed."
  exit 1
fi

# Additional validation for our changeset versioning requirements
COMMIT_MSG=$(cat $1)

# Load commit types from files (generated by commitlint.config.cjs)
HUSKY_DIR=$(dirname "$0")
VERSIONING_TYPES=$(cat "$HUSKY_DIR/.versioning-types" 2>/dev/null || echo "feat fix perf slice")
VERSIONING_REGEX=$(echo "$VERSIONING_TYPES" | sed 's/ /|/g')

# Check for conventional commit format: <type>[optional scope]: <description>
if echo "$COMMIT_MSG" | grep -qE "^(${VERSIONING_REGEX})(\([a-zA-Z0-9_-]+\))?!?:"; then
  # Valid bump types
  echo "‚úÖ Commit message follows versioning format - will trigger version bump"

  # Extract scope if present
  if echo "$COMMIT_MSG" | grep -qE "^(${VERSIONING_REGEX})\([a-zA-Z0-9_-]+\)"; then
    SCOPE=$(echo "$COMMIT_MSG" | sed -E "s/^(${VERSIONING_REGEX})\(([a-zA-Z0-9_-]+)\).*/\2/")
    
    # Validate scope is a valid project
    if ! echo "$SCOPE" | grep -qE '^(blorkpack|blorktools|blorkvisor|portfolio|pipeline)$'; then
      echo "‚ö†Ô∏è Warning: Scope '$SCOPE' is not a recognized project. Valid scopes are: blorkpack, blorktools, blorkvisor, portfolio, pipeline"
      echo "   The commit will affect ALL projects instead of just '$SCOPE'"
    else
      if [ "$SCOPE" = "pipeline" ]; then
        echo "‚úÖ Pipeline scope - version bump will be skipped"
      else
        echo "‚úÖ Valid project scope: $SCOPE - only this project will be versioned"
      fi
    fi
  else
    echo "‚ÑπÔ∏è No scope specified - ALL projects will be versioned"
  fi

  # Check for breaking changes
  if echo "$COMMIT_MSG" | grep -qE "^(${VERSIONING_REGEX})(\([a-zA-Z0-9_-]+\))?!:" || echo "$COMMIT_MSG" | grep -q 'BREAKING CHANGE:'; then
    echo "üö® Breaking change detected - will trigger MAJOR version bump"
  fi
else
  # Check if it's one of the other valid types that won't trigger version bump
  NON_VERSIONING_TYPES=$(cat "$HUSKY_DIR/.commit-types" 2>/dev/null | grep -v -E "${VERSIONING_REGEX// /|}" | tr '\n' ' ' || echo "chore docs style refactor test build ci revert")
  NON_VERSIONING_REGEX=$(echo "$NON_VERSIONING_TYPES" | sed 's/ /|/g')
  
  if echo "$COMMIT_MSG" | grep -qE "^(${NON_VERSIONING_REGEX})(\([a-zA-Z0-9_-]+\))?:"; then
    echo "‚ÑπÔ∏è Commit message follows conventional format but won't trigger version bump (not a versioning type)"
  else
    echo "‚ö†Ô∏è Warning: Commit message doesn't follow the versioning format (<type>[scope]: <description>)"
    echo "   This commit will NOT trigger version changes in our automated system"
  fi
fi

exit 0
