#!/bin/sh

echo "üîç Running pre-commit checks..."

# Check which files are being committed
STAGED_FILES=$(git diff --cached --name-only)

# Flag to indicate if any files outside development/ or public/ are being committed
RUN_CHECKS=false

# Check if any file outside development/ and public/ is being committed
for file in $STAGED_FILES; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Check if file is NOT in development/ or public/ directories
    if ! [[ "$file" =~ ^(development/|public/) ]]; then
        echo "üîç Found change in $file - will run checks"
        RUN_CHECKS=true
        break
    fi
done

if [ "$RUN_CHECKS" = true ]; then
    # Initial lint check
    echo "Running initial lint check..."
    pnpm lint || (
      echo "‚ö†Ô∏è Initial lint check failed. Attempting to fix automatically..."
      # Store the current commit message for reuse
      COMMIT_MSG=$(git log -1 --pretty=%B 2>/dev/null)
      # Stash any staged changes
      git stash push -m "pre-commit-stash" --keep-index
      # Run the fix and auto-commit
      pnpm lint:fix
      if [ $? -eq 0 ]; then
        # Stage the fixed files
        git add .
        # Return success - the original commit will proceed with the fixes included
        echo "‚úÖ Linting issues fixed and included in your commit!"
      else
        echo "‚ùå Auto-fix failed. Please fix the issues manually and try committing again."
        # Restore any stashed changes
        git stash pop
        exit 1
      fi
    )

    # Check build dependencies - this helps catch build order issues
    echo "Checking build dependencies..."
    pnpm test:build-deps || (echo "‚ùå Build dependency tests failed. Please fix the build dependency issues and try committing again." && exit 1)

    # Run tests with coverage
    echo "Running tests with coverage..."
    pnpm test:coverage || (echo "‚ùå Tests failed. Please fix the failing tests and try committing again." && exit 1)

    # Dependency check for branch reference validator
    if [ -f "tests/lint-tests/workflow-branch-refs.js" ]; then
      echo "üîç Checking workflow files for branch reference issues..."
      
      # Check if required dependencies are installed
      if ! npx --no-install js-yaml --version &>/dev/null || ! npx --no-install glob --version &>/dev/null; then
        echo "Installing required dependencies for workflow validation..."
        npm install --no-save js-yaml glob
      fi
      
      # Run the validator
      node tests/lint-tests/workflow-branch-refs.js
      if [ $? -ne 0 ]; then
        echo "‚ùå Workflow branch reference validation failed. Please fix the issues and try again."
        exit 1
      fi
      echo "‚úÖ Workflow branch reference validation passed."
    fi
else
    echo "‚úÖ Only changes in development/ or public/ directories. Skipping detailed checks for artists."
fi

echo "‚úÖ All checks passed!" 