#!/bin/sh

echo "üîç Running pre-commit checks..."

# Create a timeout function for handling potential hanging tests
run_with_timeout() {
    # Command to run
    cmd="$1"
    # Timeout in seconds
    timeout="$2"
    
    # Use perl to create a timeout wrapper since 'timeout' command isn't available on all systems
    perl -e '
        use strict;
        use warnings;
        
        # Get command and timeout
        my $cmd = $ARGV[0];
        my $timeout = $ARGV[1];
        
        # Fork a child process
        my $pid = fork();
        
        if (!defined $pid) {
            die "Cannot fork: $!";
        }
        
        if ($pid == 0) {
            # Child process - execute the command
            exec($cmd) or die "Cannot execute command: $!";
        } else {
            # Parent process - wait for child with timeout
            my $killed = 0;
            
            # Set alarm for timeout
            eval {
                local $SIG{ALRM} = sub { 
                    kill("TERM", $pid); 
                    sleep(1);
                    kill("KILL", $pid) if kill(0, $pid);
                    $killed = 1;
                    die "Timeout\n";
                };
                
                alarm($timeout);
                waitpid($pid, 0);
                alarm(0);
            };
            
            if ($@) {
                if ($killed) {
                    print "Command timed out after $timeout seconds\n";
                    exit 124;  # Exit code for timeout
                } else {
                    die $@;  # Re-throw other exceptions
                }
            }
            
            my $exit_code = $? >> 8;
            exit $exit_code;
        }
    ' "$cmd" "$timeout"
    
    return $?
}

# Check which files are being committed
STAGED_FILES=$(git diff --cached --name-only)

# Flag to indicate if any files outside development/ or public/ are being committed
RUN_CHECKS=false

# Flag to check if GitHub workflow files were modified
GITHUB_WORKFLOWS_CHANGED=false

# Flags to check if specific packages were modified
BLORKPACK_CHANGED=false
BLORKTOOLS_CHANGED=false
BLORKBOARD_CHANGED=false
PORTFOLIO_CHANGED=false

# Check staged files to determine which checks to run
for file in $STAGED_FILES; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Check if file is in .github/workflows directory
    if [[ "$file" =~ ^\.github/workflows/ ]]; then
        echo "üîç Found change in GitHub workflow file: $file"
        GITHUB_WORKFLOWS_CHANGED=true
    fi
    
    # Check if specific packages were modified
    if [[ "$file" =~ ^packages/blorkpack/ ]]; then
        echo "üîç Found change in blorkpack package: $file"
        BLORKPACK_CHANGED=true
    fi
    
    if [[ "$file" =~ ^packages/blorktools/ ]]; then
        echo "üîç Found change in blorktools package: $file"
        BLORKTOOLS_CHANGED=true
    fi
    
    if [[ "$file" =~ ^packages/blorkboard/ ]]; then
        echo "üîç Found change in blorkboard package: $file"
        BLORKBOARD_CHANGED=true
    fi
    
    if [[ "$file" =~ ^apps/portfolio/ ]]; then
        echo "üîç Found change in portfolio app: $file"
        PORTFOLIO_CHANGED=true
    fi
    
    # Check if file is NOT in development/ or public/ directories
    if ! [[ "$file" =~ ^(development/|public/) ]]; then
        echo "üîç Found change in $file - will run standard checks"
        RUN_CHECKS=true
    fi
done

# Run GitHub workflow validation if workflow files were changed
if [ "$GITHUB_WORKFLOWS_CHANGED" = true ]; then
    echo "üîÑ Testing GitHub workflow files..."
    
    # Note: push-create-merge-pr workflow check is handled below
    
    # Check for push-create-merge-pr workflow
    if [ -f ".github/workflows/push-create-merge-pr.yml" ] || [ -f ".github/workflows/push-create-merge-pr.yaml" ]; then
        echo "üîç Testing push-create-merge-pr workflow..."
        
        # Use a simpler approach that doesn't require js-yaml
        # Check basic structure directly with grep
        WORKFLOWPATH=".github/workflows/push-create-merge-pr.yml"
        if [ ! -f "$WORKFLOWPATH" ]; then
            WORKFLOWPATH=".github/workflows/push-create-merge-pr.yaml"
        fi
        
        echo "Validating $WORKFLOWPATH..."
        
        # Check for required sections
        if ! grep -q "^name:" "$WORKFLOWPATH"; then
            echo "‚ùå Workflow is missing a name!"
            exit 1
        fi
        
        if ! grep -q "^on:" "$WORKFLOWPATH"; then
            echo "‚ùå Workflow is missing triggers!"
            exit 1
        fi
        
        if ! grep -q "^jobs:" "$WORKFLOWPATH"; then
            echo "‚ùå Workflow has no jobs defined!"
            exit 1
        fi
        
        if ! grep -q "permissions:" "$WORKFLOWPATH"; then
            echo "‚ö†Ô∏è Warning: Workflow might be missing required permissions"
        fi
        
        # Check for Create or Find PR step
        if ! grep -q "Create or Find PR" "$WORKFLOWPATH"; then
            echo "‚ùå Workflow is missing the Create or Find PR step!"
            exit 1
        fi
        
        # Check for Merge Pull Request step
        if ! grep -q "Merge Pull Request" "$WORKFLOWPATH"; then
            echo "‚ùå Workflow is missing the Merge Pull Request step!"
            exit 1
        fi
        
        # Check workflow name reference consistency
        WORKFLOW_NAME=$(grep "^name:" "$WORKFLOWPATH" | sed 's/name: *//')
        if ! grep -q "workflow-name.*Push Create and Merge PR" "$WORKFLOWPATH"; then
            echo "‚ùå Workflow-name reference doesn't match workflow name!"
            exit 1
        fi
        
        echo "‚úÖ push-create-merge-pr workflow validation passed!"
    fi
    
    echo "‚úÖ GitHub workflow validation completed!"
fi

# Run standard checks if needed
if [ "$RUN_CHECKS" = true ]; then
    # Initial lint check
    echo "Running initial lint check..."
    pnpm lint || (
      echo "‚ö†Ô∏è Initial lint check failed. Attempting to fix automatically..."
      # Store the current commit message for reuse
      COMMIT_MSG=$(git log -1 --pretty=%B 2>/dev/null)
      # Stash any staged changes
      git stash push -m "pre-commit-stash" --keep-index
      # Run the fix and auto-commit
      pnpm lint:fix
      if [ $? -eq 0 ]; then
        # Stage the fixed files
        git add .
        # Return success - the original commit will proceed with the fixes included
        echo "‚úÖ Linting issues fixed and included in your commit!"
      else
        echo "‚ùå Auto-fix failed. Please fix the issues manually and try committing again."
        # Restore any stashed changes
        git stash pop
        exit 1
      fi
    )

    # Run build dependency tests only if relevant packages were modified
    if [ "$BLORKPACK_CHANGED" = true ] || [ "$BLORKTOOLS_CHANGED" = true ] || [ "$BLORKBOARD_CHANGED" = true ] || [ "$PORTFOLIO_CHANGED" = true ]; then
        echo "üöÄ Running build dependency tests for modified packages..."
        run_with_timeout "pnpm test:build-deps" 120
        PIPELINE_STATUS=$?
        
        if [ $PIPELINE_STATUS -eq 124 ]; then
            echo "‚ùå Build dependency tests timed out after 2 minutes. This may indicate a hanging process."
            exit 1
        elif [ $PIPELINE_STATUS -ne 0 ]; then
            echo "‚ùå Build dependency tests failed. Please fix the build dependency issues and try committing again."
            exit 1
        fi
        
        echo "‚úÖ Build dependency tests passed!"
    else
        echo "‚úÖ No package changes detected that require build dependency tests."
    fi

    # Run tests with coverage, also with timeout
    echo "Running tests with coverage..."
    run_with_timeout "pnpm test:coverage" 300
    TEST_STATUS=$?
    
    if [ $TEST_STATUS -eq 124 ]; then
        echo "‚ùå Tests timed out after 5 minutes. This may indicate a hanging test."
        exit 1
    elif [ $TEST_STATUS -ne 0 ]; then
        echo "‚ùå Tests failed. Please fix the failing tests and try committing again."
        exit 1
    fi
    
    echo "‚úÖ Tests passed!"

    # Dependency check for branch reference validator
    if [ -f "tests/lint-tests/workflow-branch-refs.js" ]; then
      echo "üîç Checking workflow files for branch reference issues..."
      
      # Check if required dependencies are installed
      if ! npx --no-install js-yaml --version &>/dev/null || ! npx --no-install glob --version &>/dev/null; then
        echo "Installing required dependencies for workflow validation..."
        npm install --no-save js-yaml glob
      fi
      
      # Run the validator with timeout
      run_with_timeout "node tests/lint-tests/workflow-branch-refs.js" 60
      if [ $? -ne 0 ]; then
        echo "‚ùå Workflow branch reference validation failed. Please fix the issues and try again."
        exit 1
      fi
      echo "‚úÖ Workflow branch reference validation passed."
    fi
else
    echo "‚úÖ Only changes in development/ or public/ directories. Skipping detailed checks for artists."
fi

echo "‚úÖ All checks passed!" 