#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

echo "üìä POST-COMMIT REPORT"
echo "===================="

# Get current branch name
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Start collecting results to a variable for a clean report
OUTPUT=""

# Use git ls-files to respect .gitignore and only find js/html files over 1000 lines
OUTPUT="${OUTPUT}\nüîç LARGE FILES (>1000 lines, JS/HTML only):\n"
git ls-files "*.js" "*.html" | xargs wc -l 2>/dev/null | awk '$1 > 1000 {print "üìÑ " $1 " lines: " substr($0, index($0, $2))}' | sort -nr | head -10 > /tmp/large_files.txt
LARGE_FILES=$(cat /tmp/large_files.txt)
LARGE_FILES_COUNT=$(wc -l < /tmp/large_files.txt | tr -d ' ')

if [ "$LARGE_FILES_COUNT" -gt 0 ]; then
  OUTPUT="${OUTPUT}${LARGE_FILES}"
  if [ "$LARGE_FILES_COUNT" -gt 10 ]; then
    OUTPUT="${OUTPUT}\n...and $(($LARGE_FILES_COUNT - 10)) more files over 1000 lines"
  fi
else
  OUTPUT="${OUTPUT}‚úÖ No large JS or HTML files found"
fi

# Print the output collected so far
echo -e "$OUTPUT"

# Check version impact of this commit - printed directly to preserve color codes
echo -e "\nüì¶ VERSION IMPACT:"

# Run the test-version script to get version changes
VERSION_OUTPUT=$(pnpm test-version 2>&1)

# Check if version changes are detected
if echo "$VERSION_OUTPUT" | grep -q "Version Changes:"; then
  # Use awk to extract the section between "Version Changes:" and the next empty line
  # Then display it directly to preserve colors
  echo "$VERSION_OUTPUT" | awk '/Version Changes:/,/^$/ {if (!/Version Changes:/ && !/^$/) print}'
  echo -e "‚úÖ This commit will trigger these version changes when merged to main."
else
  echo -e "‚ÑπÔ∏è No version changes detected from this commit."
fi

echo -e "\n====================" 