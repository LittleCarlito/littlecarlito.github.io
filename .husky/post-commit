#!/bin/sh

echo "üìä POST-COMMIT REPORT"
echo "===================="

# Get current branch name
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Get the last commit message
COMMIT_MSG=$(git log -1 --pretty=%B)

# Start collecting results to a variable for a clean report
OUTPUT=""

# Use git ls-files to respect .gitignore and only find js/html files over 1000 lines
OUTPUT="${OUTPUT}\nüîç LARGE FILES (>1000 lines, JS/HTML only):\n"
git ls-files "*.js" "*.html" | xargs wc -l 2>/dev/null | awk '$1 > 1000 {print "üìÑ " $1 " lines: " substr($0, index($0, $2))}' | sort -nr | head -10 > /tmp/large_files.txt
LARGE_FILES=$(cat /tmp/large_files.txt)
LARGE_FILES_COUNT=$(wc -l < /tmp/large_files.txt | tr -d ' ')

if [ "$LARGE_FILES_COUNT" -gt 0 ]; then
  OUTPUT="${OUTPUT}${LARGE_FILES}"
  if [ "$LARGE_FILES_COUNT" -gt 10 ]; then
    OUTPUT="${OUTPUT}\n...and $(($LARGE_FILES_COUNT - 10)) more files over 1000 lines"
  fi
else
  OUTPUT="${OUTPUT}‚úÖ No large JS or HTML files found"
fi

# Print the output collected so far - use printf instead of echo -e
printf "%b\n" "$OUTPUT"

# Run the test-version script to get version changes
VERSION_OUTPUT=$(pnpm test-version 2>&1 || echo "No version data available")

# Check if version changes are detected and add to the end of the report
printf "\n====================\n"

echo "üì¶ VERSION IMPACT:"

# Load commit types from files (generated by commitlint.config.cjs)
HUSKY_DIR=$(dirname "$0")
ALLOWED_TYPES=$(cat "$HUSKY_DIR/.commit-types" 2>/dev/null || echo "build chore ci docs feat fix perf refactor revert style test slice")
VERSIONING_TYPES=$(cat "$HUSKY_DIR/.versioning-types" 2>/dev/null || echo "feat fix perf slice")

# Build regex pattern for extracting type
TYPES_PATTERN=$(echo "$ALLOWED_TYPES" | sed 's/ /|/g')

# Determine version bump based on commit type
COMMIT_TYPE=$(echo "$COMMIT_MSG" | grep -oE "^(${TYPES_PATTERN})(\([^)]+\))?!?:" | grep -oE "^[^(:!]+" || echo "unknown")
BREAKING=$(echo "$COMMIT_MSG" | grep -E "^[^:]+!:" -c)
BREAKING_BODY=$(echo "$COMMIT_MSG" | grep -E "BREAKING CHANGE:" -c)

if [ "$BREAKING" -gt 0 ] || [ "$BREAKING_BODY" -gt 0 ]; then
  BUMP="+1.0.0"
  BUMP_COLOR="\033[31m" # Red
  BUMP_TYPE="major"
elif [ "$COMMIT_TYPE" = "feat" ]; then
  BUMP="+0.1.0"
  BUMP_COLOR="\033[33m" # Yellow
  BUMP_TYPE="minor"
else
  BUMP="+0.0.1"
  BUMP_COLOR="\033[36m" # Cyan
  BUMP_TYPE="patch"
fi

# Use magenta for commit message (not blue or green)
echo -e "‚úÖ Accepted commit message: \033[35m\"${COMMIT_MSG}\"\033[0m ${BUMP_COLOR}${BUMP}\033[0m (${BUMP_TYPE})"

# Check if version changes are detected
if echo "$VERSION_OUTPUT" | grep -q "Version Changes:"; then
  # Use awk to extract the section between "Version Changes:" and the next empty line
  # Then display it directly to preserve colors
  echo "$VERSION_OUTPUT" | awk '/Version Changes:/,/^$/ {if (!/Version Changes:/ && !/^$/) print}'
else
  echo "‚ÑπÔ∏è No version changes detected from this commit."
fi

echo "===================="

# Always exit with success to avoid breaking the commit process
exit 0 