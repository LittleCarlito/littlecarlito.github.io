/**
 * Prepare artifacts for deployment
 * This script handles the preparation of artifacts for deployment
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Define the pipeline artifacts directory used by GitHub Actions
const PIPELINE_ARTIFACTS_DIR = path.join(__dirname, '..', 'pipeline-artifacts');
const ARTIFACTS_DIR = path.join(__dirname, '..', 'artifacts');

// Ensure directories exist
if (!fs.existsSync(PIPELINE_ARTIFACTS_DIR)) {
	fs.mkdirSync(PIPELINE_ARTIFACTS_DIR, { recursive: true });
}

if (!fs.existsSync(ARTIFACTS_DIR)) {
	fs.mkdirSync(ARTIFACTS_DIR, { recursive: true });
}

// Create subdirectories expected by GitHub Actions
const coverageDir = path.join(PIPELINE_ARTIFACTS_DIR, 'coverage');
const testReportsDir = path.join(PIPELINE_ARTIFACTS_DIR, 'test-reports');

if (!fs.existsSync(coverageDir)) {
	fs.mkdirSync(coverageDir, { recursive: true });
}

if (!fs.existsSync(testReportsDir)) {
	fs.mkdirSync(testReportsDir, { recursive: true });
}

// Copy necessary files to artifacts directory
const filesToCopy = [
	{
		src: path.join(__dirname, '..', 'packages', 'blorkpack', 'dist'),
		dest: path.join(ARTIFACTS_DIR, 'blorkpack')
	},
	{
		src: path.join(__dirname, '..', 'packages', 'blorktools', 'dist'),
		dest: path.join(ARTIFACTS_DIR, 'blorktools')
	},
	// Add coverage report to artifacts and pipeline-artifacts
	{
		src: path.join(__dirname, '..', 'coverage'),
		dest: path.join(PIPELINE_ARTIFACTS_DIR, 'coverage')
	},
	{
		src: path.join(__dirname, '..', 'coverage-report'),
		dest: path.join(ARTIFACTS_DIR, 'coverage-report')
	}
];

// Copy test reports to pipeline-artifacts
if (fs.existsSync(path.join(__dirname, '..', 'test-reports'))) {
	filesToCopy.push({
		src: path.join(__dirname, '..', 'test-reports'),
		dest: path.join(PIPELINE_ARTIFACTS_DIR, 'test-reports')
	});
}

// Copy directories recursively
/**
 *
 */
function copyDir(src, dest) {
	if (!fs.existsSync(src)) {
		console.warn(`Warning: Source directory ${src} does not exist, skipping.`);
		return;
	}

	if (!fs.existsSync(dest)) {
		fs.mkdirSync(dest, { recursive: true });
	}

	const entries = fs.readdirSync(src, { withFileTypes: true });

	for (const entry of entries) {
		const srcPath = path.join(src, entry.name);
		const destPath = path.join(dest, entry.name);

		if (entry.isDirectory()) {
			copyDir(srcPath, destPath);
		} else {
			fs.copyFileSync(srcPath, destPath);
		}
	}
}

// Process each file/directory to copy
for (const { src, dest } of filesToCopy) {
	if (fs.existsSync(src)) {
		console.log(`Copying ${src} to ${dest}`);
		copyDir(src, dest);
	} else {
		console.warn(`Warning: Source path ${src} does not exist`);
	}
}

// Generate a summary file with timestamp
const summaryPath = path.join(ARTIFACTS_DIR, 'build-summary.json');
const summary = {
	timestamp: new Date().toISOString(),
	artifacts: filesToCopy.map(f => path.basename(f.dest)),
	buildNumber: process.env.BUILD_NUMBER || 'local'
};

// Create empty placeholder files if source directories don't exist
if (!fs.existsSync(path.join(PIPELINE_ARTIFACTS_DIR, 'coverage', 'placeholder'))) {
	fs.writeFileSync(
		path.join(PIPELINE_ARTIFACTS_DIR, 'coverage', 'placeholder'),
		'Coverage placeholder - generated by prepare-artifacts.js'
	);
}

if (!fs.existsSync(path.join(PIPELINE_ARTIFACTS_DIR, 'test-reports', 'placeholder'))) {
	fs.writeFileSync(
		path.join(PIPELINE_ARTIFACTS_DIR, 'test-reports', 'placeholder'),
		'Test reports placeholder - generated by prepare-artifacts.js'
	);
}

fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2));
console.log(`Generated build summary at ${summaryPath}`);

console.log('Artifact preparation completed successfully!'); 