name: 'Changeset Management'
description: 'Manages changesets for versioning and publishing'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  base-branch:
    description: 'Base branch to compare against'
    required: false
    default: 'main'
  since-commit:
    description: 'Generate changesets since this commit'
    required: false
    default: ''
  create-release:
    description: 'Whether to create a release'
    required: false
    default: 'false'
  package-name:
    description: 'Package to create changeset for (all, or specific package)'
    required: false
    default: 'all'
  version-type:
    description: 'Version type for the changeset (major, minor, patch)'
    required: false
    default: 'patch'
  publish:
    description: 'Whether to publish the package'
    required: false
    default: 'false'
  auto-changeset-prefix:
    description: 'Prefix for auto-generated changeset files'
    required: false
    default: 'auto-'

outputs:
  has-changesets:
    description: 'Whether any changesets were found'
    value: ${{ steps.changeset-gen.outputs.has_changesets }}
  has-auto-changesets:
    description: 'Whether any auto-generated changesets were found'
    value: ${{ steps.changeset-gen.outputs.has_auto_changesets }}
  published:
    description: 'Whether any packages were published'
    value: ${{ steps.changesets.outputs.published }}
  pr-number:
    description: 'PR number if one was created'
    value: ${{ steps.find-pr.outputs.pr_number }}
  branch-name:
    description: 'Branch name used for the changeset'
    value: ${{ steps.changeset-gen.outputs.branch_name }}

runs:
  using: "composite"
  steps:
    # Use our new changeset-generation action to check for, and generate changesets
    - name: Changeset generation and management 
      id: changeset-gen
      uses: ./.github/actions/generate-changeset
      with:
        github-token: ${{ inputs.github-token }}
        repository: ${{ inputs.repository }}
        since-commit: ${{ inputs.since-commit }}
        package-name: ${{ inputs.package-name }}
        version-type: ${{ inputs.version-type }}
        auto-changeset-prefix: ${{ inputs.auto-changeset-prefix }}

    # Validate changesets using our script
    - name: Validate changesets
      id: validate-changesets
      if: steps.changeset-gen.outputs.has_changesets == 'true' || steps.changeset-gen.outputs.changeset_created == 'true'
      shell: bash
      run: |
        bash .github/scripts/version/validate-changesets.sh

    # Run version/release if needed using our script
    - name: Create Release or Version PR
      id: changesets
      if: (steps.changeset-gen.outputs.has_changesets == 'true' || steps.changeset-gen.outputs.changeset_created == 'true') && inputs.create-release == 'true'
      shell: bash
      run: |
        if [ "${{ inputs.publish }}" == "true" ]; then
          echo "Versioning and publishing packages..."
          # Use update-packages.sh for versioning
          OUTPUT1=$(bash .github/scripts/version/update-packages.sh)
          
          # Use publish-packages.sh for publishing
          OUTPUT2=$(bash .github/scripts/version/publish-packages.sh \
            --package-path "${{ inputs.package-name }}")
          
          echo "$OUTPUT1" >> $GITHUB_OUTPUT
          echo "$OUTPUT2" >> $GITHUB_OUTPUT
          echo "published=true" >> $GITHUB_OUTPUT
        else
          echo "Versioning packages only..."
          OUTPUT=$(bash .github/scripts/version/update-packages.sh)
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "published=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if changeset-release/main branch exists and push it
        if git show-ref --verify --quiet refs/heads/changeset-release/main; then
          echo "Pushing changeset-release/main branch..." >&2
          git push origin changeset-release/main
        fi

    # Find any version PRs using our script
    - name: Find open version PRs
      id: find-pr
      shell: bash
      run: |
        OUTPUT=$(bash .github/scripts/pr/find-pr.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --title "chore: version packages")
        
        # Parse the output and set it to GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT

    # Create status checks for PR if found using our script
    - name: Create Changesets Status Check
      if: steps.find-pr.outputs.has_pr == 'true'
      shell: bash
      run: |
        # First get the PR SHA using our script
        PR_SHA=$(bash .github/scripts/branch/get-sha.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --pr-number "${{ steps.find-pr.outputs.pr_number }}")
        
        # Then create the status check using our script
        bash .github/scripts/branch/force-status.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --sha "$PR_SHA" \
          --context "Test Changesets" \
          --description "Changesets validated successfully" \
          --state "success" \
          --target-url "${{ github.server_url }}/${{ inputs.repository }}/actions/runs/${{ github.run_id }}"

    # Generate changesets using our script
    - name: Generate changesets
      id: generate
      uses: ./.github/actions/generate-changeset
      with:
        github-token: ${{ inputs.github-token }}
        repository: ${{ inputs.repository }}
        base-commit: ${{ inputs.base-commit }}
        head-commit: ${{ inputs.head-commit }}
        auto-changeset-prefix: ${{ inputs.auto-changeset-prefix }}
