name: 'Apply Version Changes from Commits'
description: 'Applies version changes to packages based on commit history'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  base-ref:
    description: 'Base branch name (typically main)'
    required: true
    default: 'main'
  head-ref:
    description: 'Head branch name (source branch)'
    required: true
  dry-run:
    description: 'Run in dry-run mode without applying changes'
    required: false
    default: 'false'
  create-tags:
    description: 'Create git tags for the new versions'
    required: false
    default: 'false'

outputs:
  hasChanges:
    description: 'Whether version changes were detected and applied'
    value: ${{ steps.apply-versions.outputs.hasChanges }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
    
    - name: Apply version changes
      id: apply-versions
      shell: bash
      run: |
        # Make the script executable
        chmod +x .github/scripts/versioning/version-from-commits.js
        
        # Set up git config
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Determine if this is a dry run
        DRY_RUN="${{ inputs.dry-run }}"
        DRY_RUN_ARG=""
        if [ "${DRY_RUN}" == "true" ]; then
          DRY_RUN_ARG="--dry-run"
          echo "Running in dry-run mode"
        fi
        
        # Determine if we should create tags
        CREATE_TAGS="${{ inputs.create-tags }}"
        CREATE_TAGS_ARG=""
        if [ "${CREATE_TAGS}" == "true" ]; then
          CREATE_TAGS_ARG="--create-tags"
          echo "Will create git tags for new versions"
        fi
        
        # Run the version-from-commits.js script to update package.json files directly
        node .github/scripts/versioning/version-from-commits.js ${DRY_RUN_ARG} ${CREATE_TAGS_ARG} --from="${{ inputs.base-ref }}" --to="${{ inputs.head-ref }}"
        
        # Check if any files were changed (if not in dry run mode)
        if [ "${DRY_RUN}" != "true" ]; then
          if [ -n "$(git status --porcelain)" ]; then
            {
              echo "hasChanges=true"
            } >> "${GITHUB_OUTPUT}"
            
            # Commit the version changes
            git add .
            git commit -m "chore(release): update versions based on conventional commits

            Applied version changes automatically based on commit history."
            
            echo "Version changes committed"
            
            # Push tags if they were created
            if [ "${CREATE_TAGS}" == "true" ]; then
              echo "Pushing tags to remote"
              git push --tags
            fi
          else
            echo "No changes to package.json files"
            {
              echo "hasChanges=false"
            } >> "${GITHUB_OUTPUT}"
          fi
        else
          # For dry run, we just set hasChanges based on exit code
          echo "Finished dry run"
          {
            echo "hasChanges=false"
          } >> "${GITHUB_OUTPUT}"
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }} 