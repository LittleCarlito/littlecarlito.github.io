name: 'Create GitHub Releases'
description: 'Creates GitHub releases for versioned packages'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  package-paths:
    description: 'Comma-separated list of package paths'
    required: true
  package-names:
    description: 'Comma-separated list of package names'
    required: true
  include-changelog:
    description: 'Whether to include changelog content in releases'
    required: false
    default: 'true'
  retry-attempts:
    description: 'Number of retry attempts for failed operations'
    required: false
    default: '3'
  debug:
    description: 'Enable verbose debug output'
    required: false
    default: 'false'
  smart-detection:
    description: 'Only version packages with actual code changes'
    required: false
    default: 'true'

outputs:
  releases-created:
    description: 'Number of releases successfully created'
    value: ${{ steps.run-releases.outputs.releases_created }}
  releases-failed:
    description: 'Number of releases that failed to create'
    value: ${{ steps.run-releases.outputs.releases_failed }}
  packages-processed:
    description: 'Number of packages processed'
    value: ${{ steps.detect-changes.outputs.total_packages || steps.input-counts.outputs.total_packages }}
  packages-changed:
    description: 'Number of packages with changes'
    value: ${{ steps.detect-changes.outputs.changed_count || '0' }}
  changed-packages:
    description: 'List of package names with changes'
    value: ${{ steps.detect-changes.outputs.changed_packages || '' }}

runs:
  using: "composite"
  steps:
    # Count packages from inputs for reporting
    - name: Count packages from inputs
      id: input-counts
      shell: bash
      run: |
        # Count package names
        IFS=',' read -ra NAMES <<< "${{ inputs.package-names }}"
        echo "package_count=${#NAMES[@]}" >> $GITHUB_OUTPUT
        echo "total_packages=${#NAMES[@]}" >> $GITHUB_OUTPUT
        
        echo "Processing ${#NAMES[@]} packages provided in input" >&2
        
    # Detect which packages have actually changed
    - name: Detect package changes
      id: detect-changes
      if: inputs.smart-detection == 'true'
      shell: bash
      run: |
        echo "Detecting which packages have changed..." >&2
        
        # Add execution permission if needed
        chmod +x .github/scripts/version/detect-package-changes.sh || true
        
        # Skip check if script doesn't exist or is unreadable
        if [[ ! -x ".github/scripts/version/detect-package-changes.sh" ]]; then
          echo "detect-package-changes.sh script not found or not executable" >&2
          echo "Processing all packages instead" >&2
          exit 0
        fi
        
        # Run detection script and capture exit code
        OUTPUT_FILE=$(mktemp)
        .github/scripts/version/detect-package-changes.sh \
          --package-names "${{ inputs.package-names }}" \
          --package-paths "${{ inputs.package-paths }}" \
          --debug "${{ inputs.debug }}" > "$OUTPUT_FILE" 2>&1
        
        EXIT_CODE=$?
        
        # Debug output
        echo "Exit code from detect-package-changes.sh: $EXIT_CODE" >&2
        echo "Script output:" >&2
        cat "$OUTPUT_FILE" >&2
        
        # Check if no changes detected (exit code 3)
        if [[ $EXIT_CODE -eq 3 ]]; then
          echo "No package changes detected - skipping release creation" >&2
          echo "changed_packages=" >> $GITHUB_OUTPUT
          echo "changed_paths=" >> $GITHUB_OUTPUT
          echo "changed_count=0" >> $GITHUB_OUTPUT
          echo "total_packages=${#NAMES[@]}" >> $GITHUB_OUTPUT
          echo "no_changes=true" >> $GITHUB_OUTPUT
          # Success exit code to continue the workflow
          exit 0
        elif [[ $EXIT_CODE -ne 0 ]]; then
          echo "Error detecting package changes (exit code $EXIT_CODE)" >&2
          echo "Processing all packages instead" >&2
          exit 0
        else
          # Forward outputs from the file
          grep -E "^[a-zA-Z_]+=.*" "$OUTPUT_FILE" >> $GITHUB_OUTPUT
          
          # Extract values for reporting
          CHANGED_PACKAGES=$(grep "^changed_packages=" "$OUTPUT_FILE" | cut -d= -f2)
          CHANGED_COUNT=$(grep "^changed_count=" "$OUTPUT_FILE" | cut -d= -f2)
          TOTAL_PACKAGES=$(grep "^total_packages=" "$OUTPUT_FILE" | cut -d= -f2)
          
          echo "Found $CHANGED_COUNT/$TOTAL_PACKAGES packages with changes:" >&2
          if [[ -n "$CHANGED_PACKAGES" && "$CHANGED_PACKAGES" != "null" ]]; then
            echo "$CHANGED_PACKAGES" | tr ',' '\n' | sed 's/^/- /' >&2
          fi
        fi
        
        # Clean up
        rm -f "$OUTPUT_FILE"
        
    # Run the release script with filtered packages if smart detection is enabled
    - name: Create GitHub releases
      id: run-releases
      shell: bash
      run: |
        echo "Running auto-publish-releases.sh script..." >&2
        
        # Skip if we already determined there are no changes
        if [[ "${{ steps.detect-changes.outputs.no_changes }}" == "true" ]]; then
          echo "No package changes to process, skipping release creation" >&2
          echo "releases_created=0" >> $GITHUB_OUTPUT
          echo "releases_failed=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Add execution permission if needed
        chmod +x .github/scripts/version/auto-publish-releases.sh
        
        # Determine which packages to process
        if [[ "${{ inputs.smart-detection }}" == "true" && -n "${{ steps.detect-changes.outputs.changed_packages }}" ]]; then
          # Use packages with detected changes
          PACKAGE_NAMES="${{ steps.detect-changes.outputs.changed_packages }}"
          PACKAGE_PATHS="${{ steps.detect-changes.outputs.changed_paths }}"
          echo "Using ${{ steps.detect-changes.outputs.changed_count }} packages with detected changes" >&2
        else
          # Use all packages from input
          PACKAGE_NAMES="${{ inputs.package-names }}"
          PACKAGE_PATHS="${{ inputs.package-paths }}"
          echo "Processing all ${{ steps.input-counts.outputs.total_packages }} packages" >&2
        fi
        
        # Skip if no packages to process
        if [[ -z "$PACKAGE_NAMES" || "$PACKAGE_NAMES" == "null" ]]; then
          echo "No packages to process, skipping release creation" >&2
          echo "releases_created=0" >> $GITHUB_OUTPUT
          echo "releases_failed=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Run script with all provided inputs and filtered packages
        OUTPUT=$(.github/scripts/version/auto-publish-releases.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ github.repository }}" \
          --package-names "$PACKAGE_NAMES" \
          --package-paths "$PACKAGE_PATHS" \
          --include-changelog "${{ inputs.include-changelog }}" \
          --retry-attempts "${{ inputs.retry-attempts }}" \
          --debug "${{ inputs.debug }}")
        
        # Forward any output to GitHub step outputs
        echo "$OUTPUT" | grep -E "^[a-zA-Z_]+=" >> $GITHUB_OUTPUT
        
        # Extract counts for summary
        RELEASES_CREATED=$(echo "$OUTPUT" | grep "^releases_created=" | cut -d= -f2)
        RELEASES_FAILED=$(echo "$OUTPUT" | grep "^releases_failed=" | cut -d= -f2)
        
        if [[ -z "$RELEASES_CREATED" ]]; then
          RELEASES_CREATED=0
          echo "releases_created=0" >> $GITHUB_OUTPUT
        fi
        
        if [[ -z "$RELEASES_FAILED" ]]; then
          RELEASES_FAILED=0
          echo "releases_failed=0" >> $GITHUB_OUTPUT
        fi
        
        # Report status
        echo "Created $RELEASES_CREATED releases, Failed: $RELEASES_FAILED" >&2
        
        # Only fail the job if there are actual failures
        if [[ "$RELEASES_FAILED" -gt 0 ]]; then
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }} 