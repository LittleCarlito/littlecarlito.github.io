name: 'Create GitHub Releases'
description: 'Creates GitHub releases for versioned packages'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  package-paths:
    description: 'Comma-separated list of package paths'
    required: true
  package-names:
    description: 'Comma-separated list of package names'
    required: true
  include-changelog:
    description: 'Whether to include changelog content in releases'
    required: false
    default: 'true'
  force-create:
    description: 'Whether to force create releases for all packages'
    required: false
    default: 'true'
  retry-attempts:
    description: 'Number of retry attempts for failed operations'
    required: false
    default: '3'
  debug:
    description: 'Enable verbose debug output'
    required: false
    default: 'false'

outputs:
  releases-created:
    description: 'Number of releases successfully created'
    value: ${{ steps.run-releases.outputs.releases_created }}
  releases-failed:
    description: 'Number of releases that failed to create'
    value: ${{ steps.run-releases.outputs.releases_failed }}

runs:
  using: "composite"
  steps:
    # Ensure Git is configured properly
    - name: Setup Git configuration
      shell: bash
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    # Check token permissions
    - name: Check token permissions
      id: check-token
      shell: bash
      run: |
        echo "Testing token permissions..." >&2
        
        # Test basic repo access
        REPO_TEST=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ inputs.github-token }}" \
                 "https://api.github.com/repos/${{ github.repository }}")
        echo "Repo access HTTP status: $REPO_TEST" >&2
        
        # Test release list access
        RELEASES_TEST=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ inputs.github-token }}" \
                    "https://api.github.com/repos/${{ github.repository }}/releases")
        echo "Releases access HTTP status: $RELEASES_TEST" >&2
        
        if [[ "$REPO_TEST" != "200" || "$RELEASES_TEST" != "200" ]]; then
          echo "⚠️ WARNING: Token may not have sufficient permissions for releases!" >&2
          echo "has_permissions=false" >> $GITHUB_OUTPUT
        else
          echo "✅ Token permissions look good" >&2
          echo "has_permissions=true" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        
    # Run the release script
    - name: Create GitHub releases
      id: run-releases
      shell: bash
      run: |
        echo "Running auto-publish-releases.sh script..." >&2
        
        # Add execution permission if needed
        chmod +x .github/scripts/version/auto-publish-releases.sh
        
        # Run script with all provided inputs
        OUTPUT=$(.github/scripts/version/auto-publish-releases.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ github.repository }}" \
          --package-names "${{ inputs.package-names }}" \
          --package-paths "${{ inputs.package-paths }}" \
          --include-changelog "${{ inputs.include-changelog }}" \
          --force-create "${{ inputs.force-create }}" \
          --retry-attempts "${{ inputs.retry-attempts }}" \
          --debug "${{ inputs.debug }}")
        
        # Forward any output to GitHub step outputs
        echo "$OUTPUT" | grep -E "^[a-zA-Z_]+=" >> $GITHUB_OUTPUT
        
        # Extract counts for summary
        RELEASES_CREATED=$(echo "$OUTPUT" | grep "^releases_created=" | cut -d= -f2)
        RELEASES_FAILED=$(echo "$OUTPUT" | grep "^releases_failed=" | cut -d= -f2)
        
        if [[ -z "$RELEASES_CREATED" ]]; then
          RELEASES_CREATED=0
          echo "releases_created=0" >> $GITHUB_OUTPUT
        fi
        
        if [[ -z "$RELEASES_FAILED" ]]; then
          RELEASES_FAILED=0
          echo "releases_failed=0" >> $GITHUB_OUTPUT
        fi
        
        # Report status
        echo "Created $RELEASES_CREATED releases, Failed: $RELEASES_FAILED" >&2
        
        # Fail if any releases failed
        if [[ "$RELEASES_FAILED" -gt 0 ]]; then
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }} 