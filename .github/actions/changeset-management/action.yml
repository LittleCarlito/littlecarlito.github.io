name: 'Changeset Management'
description: 'Manages changesets for versioning and publishing'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  base-branch:
    description: 'Base branch to compare against'
    required: false
    default: 'main'
  since-commit:
    description: 'Generate changesets since this commit'
    required: false
    default: ''
  create-release:
    description: 'Whether to create a release'
    required: false
    default: 'false'
  package-name:
    description: 'Package to create changeset for (all, or specific package)'
    required: false
    default: 'all'
  version-type:
    description: 'Version type for the changeset (major, minor, patch)'
    required: false
    default: 'patch'
  publish:
    description: 'Whether to publish the package'
    required: false
    default: 'false'
  auto-changeset-prefix:
    description: 'Prefix for auto-generated changeset files'
    required: false
    default: 'auto-'

outputs:
  has-changesets:
    description: 'Whether any changesets were found'
    value: ${{ steps.check-changesets.outputs.has_changesets }}
  has-auto-changesets:
    description: 'Whether any auto-generated changesets were found'
    value: ${{ steps.check-changesets.outputs.has_auto_changesets }}
  published:
    description: 'Whether any packages were published'
    value: ${{ steps.changesets.outputs.published }}
  pr-number:
    description: 'PR number if one was created'
    value: ${{ steps.find-pr.outputs.pr_number }}
  branch-name:
    description: 'Branch name used for the changeset'
    value: ${{ steps.generate-changeset.outputs.branch_name }}

runs:
  using: "composite"
  steps:
    # Check for existing changesets
    - name: Check for changesets
      id: check-changesets
      shell: bash
      run: |
        # Check for any changesets
        if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | grep -v config.json)" ]; then
          echo "Changesets found, will proceed with versioning"
          echo "has_changesets=true" >> $GITHUB_OUTPUT
        else
          echo "No changesets found, skipping version updates"
          echo "has_changesets=false" >> $GITHUB_OUTPUT
        fi
        
        # Check specifically for auto-generated changesets
        if ls .changeset/${{ inputs.auto-changeset-prefix }}*.md 1> /dev/null 2>&1; then
          echo "Auto-generated changesets found with prefix: ${{ inputs.auto-changeset-prefix }}"
          echo "has_auto_changesets=true" >> $GITHUB_OUTPUT
        else
          echo "No auto-generated changesets found with prefix: ${{ inputs.auto-changeset-prefix }}"
          echo "has_auto_changesets=false" >> $GITHUB_OUTPUT
        fi

    # Generate changeset (if requested)
    - name: Generate changeset
      id: generate-changeset
      if: inputs.since-commit != ''
      shell: bash
      run: |
        # Create a new branch for the changeset
        BRANCH_NAME="changeset-release/auto-$(date +%s)"
        git checkout -b $BRANCH_NAME
        
        # Generate changeset from conventional commits
        if [ -f "scripts/auto-changeset.js" ]; then
          node scripts/auto-changeset.js --since=${{ inputs.since-commit }}
        else
          # Create manual changeset if script doesn't exist
          mkdir -p .changeset
          CHANGESET_ID="${{ inputs.auto-changeset-prefix }}$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)"
          
          if [ "${{ inputs.package-name }}" != "all" ]; then
            echo "---" > .changeset/$CHANGESET_ID.md
            echo "\"${{ inputs.package-name }}\": ${{ inputs.version-type }}" >> .changeset/$CHANGESET_ID.md
            echo "---" >> .changeset/$CHANGESET_ID.md
            echo "" >> .changeset/$CHANGESET_ID.md
            echo "Auto-generated changeset for ${{ inputs.package-name }}" >> .changeset/$CHANGESET_ID.md
          fi
        fi
        
        # Check specifically for auto-generated changesets
        if ls .changeset/${{ inputs.auto-changeset-prefix }}*.md 1> /dev/null 2>&1; then
          echo "Changeset generated successfully!"
          
          # Commit the changeset
          git add .changeset/
          git commit -m "chore: auto-generate changeset [skip ci]"
          git push --set-upstream origin $BRANCH_NAME
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "changeset_created=true" >> $GITHUB_OUTPUT
        else
          echo "No changeset was generated"
          echo "changeset_created=false" >> $GITHUB_OUTPUT
        fi

    # Validate changesets
    - name: Validate changesets
      id: validate-changesets
      if: steps.check-changesets.outputs.has_changesets == 'true' || steps.generate-changeset.outputs.changeset_created == 'true'
      shell: bash
      run: |
        if [ -f ".github/scripts/validate-changesets.sh" ]; then
          bash .github/scripts/validate-changesets.sh
        else
          echo "Validating changesets..."
          # Simple validation if script doesn't exist
          for file in .changeset/*.md; do
            if [ -f "$file" ] && [ "$file" != ".changeset/README.md" ] && [ "$file" != ".changeset/config.json" ]; then
              if ! grep -q "^---" "$file"; then
                echo "Error: Invalid changeset format in $file"
                exit 1
              fi
            fi
          done
          echo "All changesets are valid!"
        fi

    # Run changesets action if needed
    - name: Create Release or Version PR
      id: changesets
      if: (steps.check-changesets.outputs.has_changesets == 'true' || steps.generate-changeset.outputs.changeset_created == 'true') && inputs.create-release == 'true'
      shell: bash
      run: |
        # Use the changesets CLI directly
        if [ "${{ inputs.publish }}" == "true" ]; then
          echo "Versioning and publishing packages..."
          pnpm run version
          pnpm run release
          echo "published=true" >> $GITHUB_OUTPUT
        else
          echo "Versioning packages only..."
          pnpm run version
          echo "published=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if changeset-release/main branch exists and push it
        if git show-ref --verify --quiet refs/heads/changeset-release/main; then
          echo "Pushing changeset-release/main branch..."
          git push origin changeset-release/main
        fi

    # Find any version PRs
    - name: Find open version PRs
      id: find-pr
      shell: bash
      run: |
        PR_NUMBER=$(gh pr list --repo ${{ inputs.repository }} --json number,title --jq '.[] | select(.title=="chore: version packages") | .number')
        if [ -n "$PR_NUMBER" ]; then
          echo "Found version PR #$PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "has_pr=true" >> $GITHUB_OUTPUT
        else
          echo "No version PR found"
          echo "has_pr=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    # Create status checks for PR if found
    - name: Create Changesets Status Check
      if: steps.find-pr.outputs.has_pr == 'true'
      shell: bash
      run: |
        PR_SHA=$(gh pr view ${{ steps.find-pr.outputs.pr_number }} --json headRefOid --jq .headRefOid)
        
        echo "Creating Changesets success status"
        gh api \
          --method POST \
          /repos/${{ inputs.repository }}/statuses/$PR_SHA \
          -f state=success \
          -f context="Test Changesets" \
          -f description="Changesets validated successfully" \
          -f target_url="${{ github.server_url }}/${{ inputs.repository }}/actions/runs/${{ github.run_id }}"
      env:
        GH_TOKEN: ${{ inputs.github-token }} 