name: 'Unpublish Package Version'
description: 'Unpublishes a specific version of a package from the GitHub Packages registry'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  package:
    description: 'Package name (e.g., blorktools or @littlecarlito/blorktools)'
    required: true
  version:
    description: 'Version to unpublish (e.g., 1.13.0)'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: false
    default: ${{ github.repository }}
  registry-url:
    description: 'NPM registry URL'
    required: false
    default: 'https://npm.pkg.github.com'
  scope:
    description: 'NPM scope for packages'
    required: false
    default: '@littlecarlito'
  unpublish-tag:
    description: 'Whether to also delete corresponding git tag'
    required: false
    default: 'true'
  dry-run:
    description: 'Whether to perform a dry run without making changes'
    required: false
    default: 'false'

outputs:
  unpublished:
    description: 'Whether the package was successfully unpublished'
    value: ${{ steps.unpublish.outputs.unpublished }}
  package:
    description: 'The package that was unpublished'
    value: ${{ steps.unpublish.outputs.package }}
  version:
    description: 'The version that was unpublished'
    value: ${{ steps.unpublish.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        registry-url: ${{ inputs.registry-url }}
        scope: ${{ inputs.scope }}
        
    - name: Unpublish package version
      id: unpublish
      shell: bash
      run: |
        OUTPUT=$(bash .github/scripts/version/unpublish-package-versions.sh \
          --token "${{ inputs.github-token }}" \
          --package "${{ inputs.package }}" \
          --version "${{ inputs.version }}" \
          --repository "${{ inputs.repository }}" \
          --unpublish-tag "${{ inputs.unpublish-tag }}" \
          --dry-run "${{ inputs.dry-run }}")
          
        echo "$OUTPUT"
        
        # Extract key outputs
        UNPUBLISHED=$(echo "$OUTPUT" | grep "^unpublished=" | cut -d= -f2)
        PACKAGE=$(echo "$OUTPUT" | grep "^package=" | cut -d= -f2)
        VERSION=$(echo "$OUTPUT" | grep "^version=" | cut -d= -f2)
        
        # Set outputs for the action
        echo "unpublished=$UNPUBLISHED" >> $GITHUB_OUTPUT
        echo "package=$PACKAGE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Provide readable output
        if [[ "$UNPUBLISHED" == "true" ]]; then
          echo "Successfully unpublished $PACKAGE@$VERSION"
        elif [[ "${{ inputs.dry-run }}" == "true" ]]; then
          echo "Dry run completed for $PACKAGE@$VERSION (no changes made)"
        else
          echo "Failed to unpublish $PACKAGE@$VERSION"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ inputs.github-token }} 