name: 'Test Monorepo'
description: 'Handles testing of packages in the monorepo, with artifact support'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: 'lts/*'
  pnpm-version:
    description: 'PNPM version to use'
    required: false
    default: '8.15.4'
  artifact-name:
    description: 'Name of the artifact to download'
    required: false
    default: 'package-builds'
  artifact-path:
    description: 'Path for downloaded artifacts'
    required: false
    default: 'packages'
  test-command:
    description: 'Command to run for testing'
    required: false
    default: 'pnpm test'

outputs:
  test-result:
    description: 'Result of the test operation (success/failure)'
    value: ${{ steps.run-tests.outputs.result }}

runs:
  using: "composite"
  steps:
    # Setup environment using our script
    - name: Setup environment
      id: setup
      shell: bash
      run: |
        # Run the setup script and filter only properly formatted output lines for GITHUB_OUTPUT
        bash .github/scripts/maintenance/setup-environment.sh \
          --github-token "${{ inputs.github-token }}" \
          --node-version "${{ inputs.node-version }}" \
          --pnpm-version "${{ inputs.pnpm-version }}" 2>&1 | grep -E "^[a-zA-Z0-9_-]+=.+" >> $GITHUB_OUTPUT || true

    # Download build artifacts using GitHub's native action
    - name: Download build artifacts
      id: download-artifacts
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}
      env:
        GH_TOKEN: ${{ inputs.github-token }}
    
    # Handle missing artifacts
    - name: Handle missing artifacts
      if: steps.download-artifacts.outcome != 'success'
      shell: bash
      run: |
        echo "Warning: Artifacts were not found or couldn't be downloaded."
        echo "Running build step to ensure tests can run..."
        
        # Setup Node.js and pnpm
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        
        # Install pnpm if needed
        if ! command -v pnpm &> /dev/null; then
          npm install -g pnpm@${{ inputs.pnpm-version }}
        fi
        
        # Install dependencies
        pnpm install
        
        # Run a quick build to ensure tests can run
        echo "Building packages locally..."
        pnpm run build || echo "Build may have failed, but continuing with tests"
        
        # List what's in the directory
        echo "Current directory structure:"
        ls -la
        
        # Note that tests will run with whatever is in the workspace
        echo "Tests will run with the current workspace files."
        
    # Run tests using our script
    - name: Run tests
      id: run-tests
      shell: bash
      run: |
        # Display environment information
        echo "===== TEST ACTION ENVIRONMENT ====="
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        command -v pnpm && echo "pnpm version: $(pnpm -v)" || echo "pnpm not found"
        echo "Current directory: $(pwd)"
        echo "Artifact name: ${{ inputs.artifact-name }}"
        echo "Artifact path: ${{ inputs.artifact-path }}"
        echo "Test command: ${{ inputs.test-command }}"
        echo "=================================="
        
        # Install pnpm if needed
        if ! command -v pnpm &> /dev/null; then
          echo "Installing pnpm..."
          npm install -g pnpm@8.15.4
        fi
        
        # Create npmrc file
        echo "Creating .npmrc file..."
        echo "registry=https://registry.npmjs.org/" > .npmrc
        echo "@littlecarlito:registry=https://npm.pkg.github.com" >> .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ inputs.github-token }}" >> .npmrc
        
        # Ensure all dependencies are installed
        echo "Installing project dependencies..."
        pnpm install
        
        # Check for existence of key files and directories
        echo "Checking test setup:"
        echo "- package.json present: $([[ -f package.json ]] && echo Yes || echo No)"
        echo "- node_modules present: $([[ -d node_modules ]] && echo Yes || echo No)"
        echo "- Packages with dist dir:"
        find packages -name "dist" -type d | sort
        
        # Run tests with npx directly to avoid PATH issues
        echo "Running tests with npx..."
        if pnpm exec node tests/config/setup/prepare-tests.cjs && pnpm exec jest --config=tests/config/jest/jest.config.cjs; then
          echo "Tests passed successfully"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "Tests failed"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    # Create test status check if PR_SHA is available
    - name: Create Test Status Check
      if: ${{ env.PR_SHA != '' }}
      shell: bash
      run: |
        if [ -n "$PR_SHA" ]; then
          bash .github/scripts/branch/force-status.sh \
            --token "${{ inputs.github-token }}" \
            --repo "${{ github.repository }}" \
            --sha "$PR_SHA" \
            --contexts '["Test / Run Tests"]' \
            --descriptions '["Tests passed successfully"]' \
            --state "success" \
            --target-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi
      env:
        PR_SHA: ${{ env.PR_SHA }} 