name: 'Build and Test'
description: 'Handles build and test operations for packages'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: 'lts/*'
  pnpm-version:
    description: 'PNPM version to use'
    required: false
    default: '8.15.4'
  build-command:
    description: 'Command to run for building packages'
    required: false
    default: 'pnpm run build'
  test-command:
    description: 'Command to run for testing packages'
    required: false
    default: 'pnpm test'
  artifact-name:
    description: 'Name of the artifact to store build outputs'
    required: false
    default: 'package-builds'
  artifact-path:
    description: 'Path pattern for artifacts to upload'
    required: false
    default: 'packages/*/dist'

outputs:
  build-result:
    description: 'Result of the build operation (success/failure)'
    value: ${{ steps.build.outputs.result }}
  test-result:
    description: 'Result of the test operation (success/failure)'
    value: ${{ steps.test.outputs.result }}

runs:
  using: "composite"
  steps:
    # Setup environment
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: 'https://npm.pkg.github.com'

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ inputs.pnpm-version }}

    - name: Install dependencies
      shell: bash
      run: pnpm install

    # Build step
    - name: Build packages
      id: build
      shell: bash
      run: |
        echo "Building packages..."
        if ${{ inputs.build-command }}; then
          echo "Build successful"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "Build failed"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    # Upload artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}

    # Test step
    - name: Run tests
      id: test
      shell: bash
      run: |
        echo "Running tests..."
        if ${{ inputs.test-command }}; then
          echo "Tests passed"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "Tests failed"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    # Status Check Creation if PR is available
    - name: Create Build Status Check
      if: ${{ env.PR_SHA != '' }}
      shell: bash
      run: |
        if [ -n "$PR_SHA" ]; then
          echo "Creating Build success status check"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/$PR_SHA \
            -f state=success \
            -f context="Build Packages" \
            -f description="Build completed successfully" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_SHA: ${{ env.PR_SHA }}

    - name: Create Test Status Check
      if: ${{ env.PR_SHA != '' }}
      shell: bash
      run: |
        if [ -n "$PR_SHA" ]; then
          echo "Creating Test success status check"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/$PR_SHA \
            -f state=success \
            -f context="Test / Run Tests" \
            -f description="Tests passed successfully" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_SHA: ${{ env.PR_SHA }} 