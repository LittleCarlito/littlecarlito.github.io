name: 'Build and Test'
description: 'Handles build and test operations for packages'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: 'lts/*'
  pnpm-version:
    description: 'PNPM version to use'
    required: false
    default: '8.15.4'
  build-command:
    description: 'Command to run for building packages'
    required: false
    default: 'pnpm run build'
  test-command:
    description: 'Command to run for testing packages'
    required: false
    default: 'pnpm test'
  artifact-name:
    description: 'Name of the artifact to store build outputs'
    required: false
    default: 'package-builds'
  artifact-path:
    description: 'Path pattern for artifacts to upload'
    required: false
    default: 'packages/*/dist'

outputs:
  build-result:
    description: 'Result of the build operation (success/failure)'
    value: ${{ steps.build.outputs.result }}
  test-result:
    description: 'Result of the test operation (success/failure)'
    value: ${{ steps.test.outputs.result }}

runs:
  using: "composite"
  steps:
    # Setup environment using our script
    - name: Setup environment
      id: setup
      shell: bash
      run: |
        while IFS= read -r line; do
          if [[ "$line" == *"="* ]]; then
            echo "$line" >> $GITHUB_OUTPUT
          fi
        done < <(bash .github/scripts/maintenance/setup-environment.sh \
          --github-token "${{ inputs.github-token }}" \
          --node-version "${{ inputs.node-version }}" \
          --pnpm-version "${{ inputs.pnpm-version }}")

    # Build step using our script
    - name: Build packages
      id: build
      shell: bash
      run: |
        while IFS= read -r line; do
          if [[ "$line" == *"="* ]]; then
            echo "$line" >> $GITHUB_OUTPUT
          fi
        done < <(bash .github/scripts/maintenance/build-packages.sh \
          --build-command "${{ inputs.build-command }}")

    # Upload artifacts using GitHub's native action
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}

    # Test step using our script
    - name: Run tests
      id: test
      shell: bash
      run: |
        while IFS= read -r line; do
          if [[ "$line" == *"="* ]]; then
            echo "$line" >> $GITHUB_OUTPUT
          fi
        done < <(bash .github/scripts/maintenance/run-tests.sh \
          --test-command "${{ inputs.test-command }}")

    # Create build status check if PR_SHA is available
    - name: Create Build Status Check
      if: ${{ env.PR_SHA != '' }}
      shell: bash
      run: |
        if [ -n "$PR_SHA" ]; then
          while IFS= read -r line; do
            if [[ "$line" == *"="* ]]; then
              echo "$line" >> $GITHUB_OUTPUT
            fi
          done < <(bash .github/scripts/branch/force-status.sh \
            --token "${{ inputs.github-token }}" \
            --repo "${{ github.repository }}" \
            --sha "$PR_SHA" \
            --context "Build Packages" \
            --description "Build completed successfully" \
            --state "success" \
            --target-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}")
        fi
      env:
        PR_SHA: ${{ env.PR_SHA }}

    # Create test status check if PR_SHA is available
    - name: Create Test Status Check
      if: ${{ env.PR_SHA != '' }}
      shell: bash
      run: |
        if [ -n "$PR_SHA" ]; then
          while IFS= read -r line; do
            if [[ "$line" == *"="* ]]; then
              echo "$line" >> $GITHUB_OUTPUT
            fi
          done < <(bash .github/scripts/branch/force-status.sh \
            --token "${{ inputs.github-token }}" \
            --repo "${{ github.repository }}" \
            --sha "$PR_SHA" \
            --context "Test / Run Tests" \
            --description "Tests passed successfully" \
            --state "success" \
            --target-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}")
        fi
      env:
        PR_SHA: ${{ env.PR_SHA }} 