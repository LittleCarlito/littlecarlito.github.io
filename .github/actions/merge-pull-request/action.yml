name: 'Merge PR'
description: 'Handles merging of PRs with customizable merge methods and options'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: false
    default: ${{ github.repository }}
  pr-number:
    description: 'PR number to merge'
    required: true
  commit-title:
    description: 'Title for the merge commit'
    required: false
    default: ''
  merge-method:
    description: 'Merge method to use (merge, squash, rebase)'
    required: false
    default: 'squash'
  delete-branch:
    description: 'Whether to delete the branch after merging'
    required: false
    default: 'true'

outputs:
  merged:
    description: 'Whether the PR was successfully merged'
    value: ${{ steps.merge-pr.outputs.merged }}
  branch-deleted:
    description: 'Whether the branch was successfully deleted'
    value: ${{ steps.delete-branch.outputs.deleted }}

runs:
  using: "composite"
  steps:
    # Debug package versions before merging
    - name: Debug package versions
      shell: bash
      run: |
        echo "Package versions before merging PR #${{ inputs.pr-number }}:"
        find . -name "package.json" -not -path "*/node_modules/*" -exec sh -c 'echo "$(dirname {}) version: $(node -p "require(\"{}\").version")"' \; || echo "No packages found"
    
    # Merge PR using our script
    - name: Merge Pull Request
      id: merge-pr
      shell: bash
      run: |
        OUTPUT=$(bash .github/scripts/pr/force-merge.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --pr-number "${{ inputs.pr-number }}" \
          --commit-title "${{ inputs.commit-title }}" \
          --merge-method "${{ inputs.merge-method }}")
        
        # Parse the output and set it to GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        
    # Delete branch if requested
    - name: Delete branch
      id: delete-branch
      if: inputs.delete-branch == 'true' && steps.merge-pr.outputs.merged == 'true'
      shell: bash
      run: |
        # Get branch name from PR using find-pr.sh script
        PR_INFO=$(bash .github/scripts/pr/find-pr.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --pr-number "${{ inputs.pr-number }}")
          
        # Extract branch name
        BRANCH_NAME=$(echo "$PR_INFO" | grep "^head_ref=" | cut -d= -f2)
        
        if [ -n "$BRANCH_NAME" ]; then
          echo "Found branch to delete: $BRANCH_NAME"
          
          # Wait a moment to ensure GitHub API synchronizes
          sleep 3
          
          # Use our improved delete script with better error handling and retries
          DELETE_OUTPUT=$(bash .github/scripts/branch/delete.sh \
            --token "${{ inputs.github-token }}" \
            --repo "${{ inputs.repository }}" \
            --branch "$BRANCH_NAME" \
            --max-attempts 3)
            
          # Parse the output and set it to GITHUB_OUTPUT
          echo "$DELETE_OUTPUT" >> $GITHUB_OUTPUT
        else
          echo "deleted=false" >> $GITHUB_OUTPUT
          echo "Could not determine branch name to delete"
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }} 