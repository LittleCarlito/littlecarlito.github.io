name: 'Analyze PR Versions'
description: 'Analyzes PR commit messages for version changes and updates PR description'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  pr-number:
    description: 'PR number to analyze'
    required: true
  update-pr:
    description: 'Whether to update the PR description with version changes'
    required: false
    default: 'true'

outputs:
  hasChanges:
    description: 'Whether version changes were detected'
    value: ${{ steps.version-analysis.outputs.hasChanges }}
  changes-details:
    description: 'Human-readable details about what version changes were detected'
    value: ${{ steps.version-analysis.outputs.HUMAN_OUTPUT }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        
    # Ensure branches are properly fetched before analysis
    - name: Fetch PR branches
      shell: bash
      run: |
        # Get PR details
        PR_DATA=$(gh pr view ${{ inputs.pr-number }} --json baseRefName,headRefName)
        BASE_REF=$(echo "$PR_DATA" | jq -r '.baseRefName')
        HEAD_REF=$(echo "$PR_DATA" | jq -r '.headRefName')
        
        echo "Fetching branches for PR #${{ inputs.pr-number }}: $HEAD_REF â†’ $BASE_REF"
        
        # Ensure we have the BASE_REF branch
        echo "Fetching base branch: $BASE_REF"
        git fetch origin $BASE_REF:refs/remotes/origin/$BASE_REF || echo "Warning: Could not fetch $BASE_REF"
        
        # Create local tracking branch
        git branch --track $BASE_REF origin/$BASE_REF 2>/dev/null || echo "Branch $BASE_REF already exists"
        
        # Ensure we have the HEAD_REF branch 
        echo "Fetching head branch: $HEAD_REF"
        git fetch origin $HEAD_REF:refs/remotes/origin/$HEAD_REF || echo "Warning: Could not fetch $HEAD_REF"
        
        # Create local tracking branch
        git branch --track $HEAD_REF origin/$HEAD_REF 2>/dev/null || echo "Branch $HEAD_REF already exists"
        
        # Show all branches for debugging
        echo "Available branches:"
        git branch -a
      env:
        GH_TOKEN: ${{ inputs.github-token }}
    
    # Analyze version changes
    - name: Analyze version changes
      id: version-analysis
      shell: bash
      run: |
        # Make the script executable
        chmod +x .github/scripts/versioning/version-from-commits.js
        
        # Get PR details for analysis
        PR_DATA=$(gh pr view ${{ inputs.pr-number }} --json baseRefName,headRefName)
        BASE_REF=$(echo "$PR_DATA" | jq -r '.baseRefName')
        HEAD_REF=$(echo "$PR_DATA" | jq -r '.headRefName')
        
        # Run the version-from-commits.js script in dry-run mode 
        # and capture the output for PR description
        OUTPUT=$(node .github/scripts/versioning/version-from-commits.js --dry-run --from=$BASE_REF --to=$HEAD_REF --format=pr 2>&1)
        
        # Print the complete output for debugging
        echo "Complete script output:"
        echo "$OUTPUT"
        
        # Extract the human-readable part 
        HUMAN_OUTPUT=$(echo "$OUTPUT" | sed -n '1,/---/p' | sed '$d')
        
        # Extract the JSON part 
        JSON_OUTPUT=$(echo "$OUTPUT" | sed -n '/---/,$p' | sed '1d')
        
        echo "Extracted JSON:"
        echo "$JSON_OUTPUT"
        
        # Save outputs
        echo "HUMAN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        echo "$HUMAN_OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Parse JSON to get the hasChanges value - add fallback
        if echo "$JSON_OUTPUT" | jq -e . > /dev/null 2>&1; then
          echo "JSON is valid, extracting hasChanges"
          HAS_CHANGES=$(echo "$JSON_OUTPUT" | jq -r '.hasChanges')
        else
          echo "Invalid JSON, defaulting to false"
          HAS_CHANGES="false"
        fi
        
        echo "hasChanges=$HAS_CHANGES" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}
    
    # Update PR description (if enabled)
    - name: Update PR description with version changes
      if: inputs.update-pr == 'true' && steps.version-analysis.outputs.hasChanges == 'true'
      shell: bash
      run: |
        PR_BODY=$(gh pr view ${{ inputs.pr-number }} --json body -q '.body')
        
        # Remove existing version changes section if it exists
        PR_BODY=$(echo "$PR_BODY" | sed -E '/## Version Changes/,/NO CHANGE: .*/d')
        
        # Add version changes section
        CHANGES="${{ steps.version-analysis.outputs.HUMAN_OUTPUT }}"
        echo "$PR_BODY" > pr_body.txt
        echo "" >> pr_body.txt
        echo "$CHANGES" >> pr_body.txt
        NEW_PR_BODY=$(cat pr_body.txt)
        
        # Update PR description
        gh pr edit ${{ inputs.pr-number }} --body "$NEW_PR_BODY"
      env:
        GH_TOKEN: ${{ inputs.github-token }}