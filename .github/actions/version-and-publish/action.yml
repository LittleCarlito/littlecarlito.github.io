name: 'Changeset Version and Publish'
description: 'Handles versioning and publishing of packages with changesets'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: false
    default: ${{ github.repository }}
  artifact-name:
    description: 'Name of the build artifacts'
    required: false
    default: 'package-builds'
  artifact-path:
    description: 'Path for artifact download'
    required: false
    default: './'
  publish-command:
    description: 'Command to run for publishing'
    required: false
    default: 'pnpm run release'
  version-command:
    description: 'Command to run for versioning'
    required: false
    default: 'pnpm run version'
  commit-message:
    description: 'Commit message for version changes'
    required: false
    default: 'chore: version packages'
  pr-title:
    description: 'PR title for version changes'
    required: false
    default: 'chore: version packages'
  create-github-releases:
    description: 'Whether to create GitHub releases'
    required: false
    default: 'true'
  create-pr:
    description: 'Whether to create a PR for versioning instead of direct publishing'
    required: false
    default: 'false'
  force-publish:
    description: 'Whether to force publish packages even if versions already exist'
    required: false
    default: 'true'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: 'lts/*'
  pnpm-version:
    description: 'PNPM version to use'
    required: false
    default: '8.15.4'
  registry-url:
    description: 'NPM registry URL'
    required: false
    default: 'https://npm.pkg.github.com'
  npm-scope:
    description: 'NPM scope for packages'
    required: false
    default: '@littlecarlito'
  package-paths:
    description: 'Comma-separated list of package paths to get versions'
    required: false
    default: 'packages/blorkpack,packages/blorktools,packages/blorkboard,apps/portfolio'
  package-names:
    description: 'Comma-separated list of package names for versions'
    required: false
    default: '@littlecarlito/blorkpack,@littlecarlito/blorktools,@littlecarlito/blorkboard,@littlecarlito/portfolio'

outputs:
  published:
    description: 'Whether packages were published'
    value: ${{ steps.process-changesets.outputs.published }}
  has-changesets:
    description: 'Whether any changesets were found'
    value: ${{ steps.check-changesets.outputs.has_changesets }}
  blorkpack-version:
    description: 'Version of blorkpack package'
    value: ${{ steps.get-versions.outputs.littlecarlitoblorkpack_version }}
  blorktools-version:
    description: 'Version of blorktools package'
    value: ${{ steps.get-versions.outputs.littlecarlitoblorktools_version }}
  blorkboard-version:
    description: 'Version of blorkboard package'
    value: ${{ steps.get-versions.outputs.littlecarlitoblorkboard_version }}
  portfolio-version:
    description: 'Version of portfolio package'
    value: ${{ steps.get-versions.outputs.littlecarlitoportfolio_version }}
  error-step:
    description: 'The step that failed, if any'
    value: ${{ steps.error-info.outputs.error_step }}
  error-message:
    description: 'Error message if any step failed'
    value: ${{ steps.error-info.outputs.error_message }}
  skipped-steps:
    description: 'Steps that were skipped due to failures'
    value: ${{ steps.error-info.outputs.skipped_steps }}
  releases-created:
    description: 'Number of releases created'
    value: ${{ steps.create-releases.outputs.releases_created }}
  releases-failed:
    description: 'Number of releases that failed to create'
    value: ${{ steps.create-releases.outputs.releases_failed }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.github-token }}
        
    - name: Configure Git identity
      shell: bash
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.registry-url }}
        scope: ${{ inputs.npm-scope }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ inputs.pnpm-version }}
        
    - name: Install dependencies
      shell: bash
      run: pnpm install
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}
      continue-on-error: true
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        NODE_AUTH_TOKEN: ${{ inputs.github-token }}
        
    # Ensure artifacts are available - create directories if needed
    - name: Ensure artifacts
      shell: bash
      run: |
        # Check if the artifact directories exist, create if not
        if [[ "${{ inputs.artifact-path }}" == "./" ]]; then
          TARGET_DIRS=$(echo "${{ inputs.package-paths }}" | tr ',' ' ')
        else
          TARGET_DIRS="${{ inputs.artifact-path }}"
        fi
        
        for DIR in $TARGET_DIRS; do
          mkdir -p "$DIR/dist"
          echo "Ensured directory: $DIR/dist"
        done
        
    # Pull latest changes from the repository to ensure we have all changesets
    - name: Pull latest changes
      shell: bash
      run: git pull origin main
    
    # Check if changesets exist - examine .changeset directory content
    - name: Check for changesets
      id: check-changesets
      shell: bash
      run: |
        if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | grep -v config.json)" ]; then
          echo "Changesets found in .changeset directory"
          echo "has_changesets=true" >> $GITHUB_OUTPUT
        else
          echo "No changesets found in .changeset directory"
          echo "has_changesets=false" >> $GITHUB_OUTPUT
        fi
    
    # Process changesets to version and publish packages
    - name: Process changesets
      id: process-changesets
      shell: bash
      run: |
        # Set error trap to collect information about failures
        trap 'echo "Error occurred in Process changesets step"' ERR
        
        # The process-changesets.sh script will handle versioning and publishing
        OUTPUT=$(bash .github/scripts/version/process-changesets.sh \
          --version "${{ inputs.version-command }}" \
          --publish "${{ inputs.publish-command }}" \
          --create-pr "${{ inputs.create-pr }}" \
          --commit-message "${{ inputs.commit-message }}" \
          --pr-title "${{ inputs.pr-title }}" \
          --force-publish "${{ inputs.force-publish }}" \
          --create-releases "${{ inputs.create-github-releases }}")
        
        # Output the result
        echo "$OUTPUT"
        
        # Extract published status for use in GitHub Actions
        PUBLISHED=$(echo "$OUTPUT" | grep "^published=" | cut -d= -f2)
        echo "published=$PUBLISHED" >> $GITHUB_OUTPUT
      env:
        NODE_AUTH_TOKEN: ${{ inputs.github-token }}
        NPM_AUTH_TOKEN: ${{ inputs.github-token }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        npm_config_registry: ${{ inputs.registry-url }}
    
    # Check if auto-merging of version PR is needed
    - name: Auto merge version PR
      id: auto-merge
      if: inputs.create-pr == 'true' && steps.process-changesets.outputs.published == 'true'
      continue-on-error: true
      shell: bash
      run: |
        # Attempt to find and merge any version PRs
        OUTPUT=$(bash .github/scripts/version/auto-merge-version-pr.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}")
        
        echo "$OUTPUT"
        
        # Extract the has_pr value
        HAS_PR=$(echo "$OUTPUT" | grep "^has_pr=" | cut -d= -f2)
        echo "has_pr=$HAS_PR" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
    
    # Get package versions for outputs
    - name: Get package versions
      id: get-versions
      shell: bash
      run: |
        # The get-package-versions.sh script will extract versions from package.json files
        OUTPUT=$(bash .github/scripts/version/get-package-versions.sh \
          --package-paths "${{ inputs.package-paths }}" \
          --package-names "${{ inputs.package-names }}")
        
        echo "$OUTPUT"
        
        # Extract available version variables
        VARS=$(echo "$OUTPUT" | grep "^output_vars=" | cut -d= -f2)
        if [ -n "$VARS" ]; then
          # Each variable should be added to GITHUB_OUTPUT
          for VAR in $(echo $VARS | tr ',' ' '); do
            VAL=$(echo "$OUTPUT" | grep "^$VAR=" | cut -d= -f2)
            echo "$VAR=$VAL" >> $GITHUB_OUTPUT
          done
        fi
    
    # Create GitHub releases if enabled
    - name: Create GitHub releases
      id: create-releases
      if: inputs.create-github-releases == 'true' && steps.process-changesets.outputs.published == 'true'
      uses: ./.github/actions/create-github-releases
      with:
        github-token: ${{ inputs.github-token }}
        package-paths: ${{ inputs.package-paths }}
        package-names: ${{ inputs.package-names }}
        include-changelog: true
        force-create: true
        retry-attempts: 5
        debug: ${{ inputs.debug }}
    
    # Collect error information
    - name: Collect error information
      id: error-info
      if: failure()
      shell: bash
      run: |
        # Determine which step failed based on previous steps' outputs
        if [[ "${{ steps.check-changesets.outcome }}" == "failure" ]]; then
          echo "error_step=Check for changesets" >> $GITHUB_OUTPUT
          echo "error_message=Failed to check for changesets in repository" >> $GITHUB_OUTPUT
          echo "skipped_steps=Process changesets, Get package versions, Create GitHub releases" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.process-changesets.outcome }}" == "failure" ]]; then
          echo "error_step=Process changesets" >> $GITHUB_OUTPUT
          echo "error_message=Failed to process changesets for versioning and publishing" >> $GITHUB_OUTPUT
          echo "skipped_steps=Get package versions, Create GitHub releases" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.get-versions.outcome }}" == "failure" ]]; then
          echo "error_step=Get package versions" >> $GITHUB_OUTPUT
          echo "error_message=Failed to retrieve package versions" >> $GITHUB_OUTPUT
          echo "skipped_steps=Create GitHub releases" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.create-releases.outcome }}" == "failure" ]]; then
          echo "error_step=Create GitHub releases" >> $GITHUB_OUTPUT
          echo "error_message=Failed to create GitHub releases for packages" >> $GITHUB_OUTPUT
          echo "skipped_steps=None" >> $GITHUB_OUTPUT
        else
          echo "error_step=Unknown" >> $GITHUB_OUTPUT
          echo "error_message=An unexpected error occurred during the workflow" >> $GITHUB_OUTPUT
          echo "skipped_steps=Unknown" >> $GITHUB_OUTPUT
        fi 