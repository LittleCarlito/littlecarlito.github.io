name: 'Changeset Generation'
description: 'Generates and manages changesets for versioning'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  since-commit:
    description: 'Generate changesets for commits after this SHA'
    required: false
    default: ''
  package-name:
    description: 'Package name to create changeset for'
    required: false
    default: 'all'
  version-type:
    description: 'Version bump type (major, minor, patch)'
    required: false
    default: 'patch'
  auto-changeset-prefix:
    description: 'Prefix for auto-generated changesets'
    required: false
    default: 'auto-'

outputs:
  has_changesets:
    description: 'Whether repository has any changesets'
    value: ${{ steps.check-changesets.outputs.has_changesets }}
  has_auto_changesets:
    description: 'Whether repository has auto-generated changesets'
    value: ${{ steps.check-changesets.outputs.has_auto_changesets }}
  branch_name:
    description: 'Name of branch created for the changeset'
    value: ${{ steps.create-branch.outputs.branch_name }}
  changeset_created:
    description: 'Whether a new changeset was created'
    value: ${{ steps.generate-content.outputs.changeset_created }}

runs:
  using: "composite"
  steps:
    # Step 1: Check for existing changesets
    - name: Check for changesets
      id: check-changesets
      shell: bash
      run: |
        # Run check-changesets.sh script and capture key outputs
        OUTPUT=$(bash .github/scripts/version/check-changesets.sh --auto-changeset-prefix "${{ inputs.auto-changeset-prefix }}")
        
        # Pass directly to GITHUB_OUTPUT to match test expectations
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Log for debug purposes
        HAS_CHANGESETS=$(echo "$OUTPUT" | grep "^has_changesets=" | cut -d= -f2)
        HAS_AUTO_CHANGESETS=$(echo "$OUTPUT" | grep "^has_auto_changesets=" | cut -d= -f2)
        echo "Changesets check completed. has_changesets=$HAS_CHANGESETS, has_auto_changesets=$HAS_AUTO_CHANGESETS"
    
    # Step 2: Create branch for the changeset
    - name: Create changeset branch
      id: create-branch
      shell: bash
      if: ${{ github.event_name != 'pull_request' || inputs.package-name != 'all' }}
      run: |
        echo "Creating changeset branch"
        # Run the branch creation script
        OUTPUT=$(bash .github/scripts/version/create-changeset-branch.sh)
        
        # Pass directly to GITHUB_OUTPUT to match test expectations
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Extract and log branch name for debug purposes
        BRANCH_NAME=$(echo "$OUTPUT" | grep "^branch_name=" | cut -d= -f2)
        echo "Branch created: $BRANCH_NAME"

    # Step 3: Generate the changeset content
    - name: Generate changeset content
      id: generate-content
      shell: bash
      if: ${{ steps.create-branch.outputs.branch_name != '' }}
      run: |
        echo "Generating changeset content"
        
        # Run content generation script
        OUTPUT=$(bash .github/scripts/version/generate-changeset-content.sh \
          --since-commit "${{ inputs.since-commit }}" \
          --package-name "${{ inputs.package-name }}" \
          --version-type "${{ inputs.version-type }}" \
          --auto-changeset-prefix "${{ inputs.auto-changeset-prefix }}")
        
        # Pass directly to GITHUB_OUTPUT to match test expectations
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Extract and log results for debug purposes
        CHANGESET_CREATED=$(echo "$OUTPUT" | grep "^changeset_created=" | cut -d= -f2)
        echo "Changeset content generation: created=$CHANGESET_CREATED"

    # Step 4: Commit and push the changeset if created
    - name: Commit changeset
      id: commit-changeset
      shell: bash
      if: ${{ steps.generate-content.outputs.changeset_created == 'true' }}
      run: |
        echo "Committing changeset"
        
        # Run commit script
        OUTPUT=$(bash .github/scripts/version/commit-changeset.sh \
          --branch-name "${{ steps.create-branch.outputs.branch_name }}")
        
        # Pass directly to GITHUB_OUTPUT to match test expectations
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Extract and log results for debug purposes
        COMMIT_SUCCESS=$(echo "$OUTPUT" | grep "^commit_success=" | cut -d= -f2)
        echo "Changeset commit: success=$COMMIT_SUCCESS"

    # Step 5: Cleanup if changeset not created
    - name: Cleanup if necessary
      id: cleanup
      shell: bash
      if: ${{ steps.generate-content.outputs.changeset_created != 'true' && steps.create-branch.outputs.branch_name != '' }}
      run: |
        echo "Cleaning up temporary branch"
        
        # Run cleanup script
        OUTPUT=$(bash .github/scripts/version/cleanup-changeset.sh \
          --branch-name "${{ steps.create-branch.outputs.branch_name }}")
        
        # Pass directly to GITHUB_OUTPUT to match test expectations
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Extract and log results for debug purposes
        CLEANUP_SUCCESS=$(echo "$OUTPUT" | grep "^cleanup_success=" | cut -d= -f2)
        echo "Branch cleanup: success=$CLEANUP_SUCCESS"
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }} 