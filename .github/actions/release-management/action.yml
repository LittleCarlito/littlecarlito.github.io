name: 'Release Management'
description: 'Handles release operations including version bumping and publishing'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  package-name:
    description: 'Package name to release'
    required: false
    default: 'all'
  version-type:
    description: 'Version bump type (major, minor, patch)'
    required: false
    default: 'patch'
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  generate-notes:
    description: 'Auto-generate release notes'
    required: false
    default: 'true'

outputs:
  version:
    description: 'New version number'
    value: ${{ steps.version.outputs.new_version }}
  release-id:
    description: 'ID of the created release'
    value: ${{ steps.create-release.outputs.release_id }}
  release-url:
    description: 'URL of the created release'
    value: ${{ steps.create-release.outputs.release_url }}

runs:
  using: "composite"
  steps:
    # Calculate version using our script
    - name: Calculate new version
      id: version
      shell: bash
      run: |
        OUTPUT=$(bash .github/scripts/version/calculate-version.sh \
          --package-path "${{ inputs.package-name }}" \
          --version-type "${{ inputs.version-type }}")
        
        # Parse the output and set it to GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Extract the new version for logging
        NEW_VERSION=$(echo "$OUTPUT" | grep "^new_version=" | cut -d= -f2)
        echo "Calculated new version: $NEW_VERSION"

    # Create tag using our script
    - name: Create Git tag
      id: create-tag
      shell: bash
      run: |
        OUTPUT=$(bash .github/scripts/version/create-tag.sh \
          --version "${{ steps.version.outputs.new_version }}" \
          --tag-prefix "v" \
          --message "Release v${{ steps.version.outputs.new_version }}")
        
        # Parse the output and set it to GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Extract tag name for logging
        TAG_NAME=$(echo "$OUTPUT" | grep "^tag_name=" | cut -d= -f2)
        echo "Created tag: $TAG_NAME"

    # Create GitHub release using our script
    - name: Create GitHub release
      id: create-release
      shell: bash
      run: |
        OUTPUT=$(bash .github/scripts/version/create-release.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --tag-name "${{ steps.create-tag.outputs.tag_name }}" \
          --name "Release ${{ steps.create-tag.outputs.tag_name }}" \
          --draft "${{ inputs.draft }}" \
          --prerelease "${{ inputs.prerelease }}" \
          --generate-notes "${{ inputs.generate-notes }}")
        
        # Parse the output and set it to GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        
        # Extract release URL for logging
        RELEASE_URL=$(echo "$OUTPUT" | grep "^release_url=" | cut -d= -f2)
        echo "Created release: $RELEASE_URL"

    # Publish to npm using our script
    - name: Publish to npm
      id: publish
      shell: bash
      run: |
        OUTPUT=$(bash .github/scripts/version/publish-packages.sh \
          --package-path "${{ inputs.package-name }}" \
          --no-git-checks "true")
        
        # Parse the output and set it to GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        echo "Packages published successfully"
      env:
        NODE_AUTH_TOKEN: ${{ inputs.github-token }} 