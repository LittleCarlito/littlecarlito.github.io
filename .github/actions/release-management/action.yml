name: 'Release Management'
description: 'Handles release operations including version bumping and publishing'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  package-name:
    description: 'Package name to release'
    required: false
    default: 'all'
  version-type:
    description: 'Version bump type (major, minor, patch)'
    required: false
    default: 'patch'
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  generate-notes:
    description: 'Auto-generate release notes'
    required: false
    default: 'true'

outputs:
  version:
    description: 'New version number'
    value: ${{ steps.version.outputs.new_version }}
  release-id:
    description: 'ID of the created release'
    value: ${{ steps.create-release.outputs.release_id }}
  release-url:
    description: 'URL of the created release'
    value: ${{ steps.create-release.outputs.release_url }}

runs:
  using: "composite"
  steps:
    - name: Get current version
      id: version
      shell: bash
      run: |
        if [ "${{ inputs.package-name }}" = "all" ]; then
          CURRENT_VERSION=$(node -p "require('./package.json').version")
        else
          CURRENT_VERSION=$(node -p "require('./packages/${{ inputs.package-name }}/package.json').version")
        fi
        
        # Calculate new version
        IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
        MAJOR="${version_parts[0]}"
        MINOR="${version_parts[1]}"
        PATCH="${version_parts[2]}"
        
        case "${{ inputs.version-type }}" in
          "major")
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          "minor")
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          "patch")
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        echo "New version: $NEW_VERSION"

    - name: Create GitHub release
      id: create-release
      shell: bash
      run: |
        # Create tag
        TAG_NAME="v${{ steps.version.outputs.new_version }}"
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"
        
        # Create release
        RELEASE_RESPONSE=$(gh api \
          --method POST \
          /repos/${{ inputs.repository }}/releases \
          -f tag_name="$TAG_NAME" \
          -f name="Release $TAG_NAME" \
          -f draft=${{ inputs.draft }} \
          -f prerelease=${{ inputs.prerelease }} \
          -f generate_release_notes=${{ inputs.generate-notes }})
        
        RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
        RELEASE_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.html_url')
        
        echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
        
        echo "Created release: $RELEASE_URL"
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Publish to npm
      shell: bash
      run: |
        if [ "${{ inputs.package-name }}" = "all" ]; then
          echo "Publishing all packages..."
          pnpm -r publish --no-git-checks
        else
          echo "Publishing package ${{ inputs.package-name }}..."
          cd "packages/${{ inputs.package-name }}"
          pnpm publish --no-git-checks
        fi
      env:
        NODE_AUTH_TOKEN: ${{ inputs.github-token }} 