name: 'Version and Release Packages'
description: 'Publish packages from existing tags and create GitHub releases'

inputs:
  github-token:
    description: 'GitHub token for creating releases and commits'
    required: true
  npm-token:
    description: 'NPM token for publishing packages'
    required: true
  release-type:
    description: 'Type of release to create (auto, patch, minor, major, etc.)'
    required: false
    default: 'auto'

outputs:
  has-tags:
    description: 'Whether any new tags were synchronized'
    value: ${{ steps.sync-tags.outputs.has_new_tags }}
  tag-count:
    description: 'Total number of package tags'
    value: ${{ steps.sync-tags.outputs.tag_count }}
  has-releases:
    description: 'Whether any releases were created'
    value: ${{ steps.create-releases.outputs.has_new_releases }}
  releases-count:
    description: 'Number of releases created'
    value: ${{ steps.create-releases.outputs.releases_count }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        registry-url: 'https://npm.pkg.github.com'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: '8.15.4'
        
    - name: Install dependencies
      shell: bash
      run: pnpm install
    
    - name: Verify Lerna installation
      shell: bash
      run: |
        echo "Checking Lerna installation..."
        pnpm lerna --version
        echo "Listing available packages..."
        pnpm lerna list --json --loglevel=info
        echo "Checking pnpm version..."
        pnpm --version
        echo "Checking Node.js version..."
        node --version
    
    - name: Test Lerna commands 
      shell: bash
      run: |
        chmod +x tests/pipeline-tests/test-lerna-commands.sh
        ./tests/pipeline-tests/test-lerna-commands.sh
    
    # Step 1: Synchronize tags (independent of releases)
    - name: Synchronize package tags
      id: sync-tags
      shell: bash
      run: |
        chmod +x .github/scripts/ci/sync-package-tags.sh
        .github/scripts/ci/sync-package-tags.sh --verbose
      env:
        GH_TOKEN: ${{ inputs.github-token }}
    
    # Step 2: Create GitHub releases (independent of tag creation)
    - name: Create GitHub releases
      id: create-releases
      shell: bash
      run: |
        chmod +x .github/scripts/ci/manage-github-releases.sh
        .github/scripts/ci/manage-github-releases.sh --verbose --tag-file all_package_tags.txt
      env:
        GH_TOKEN: ${{ inputs.github-token }}
    
    # Step 3: Publish npm packages (if needed)
    - name: Publish npm packages
      if: steps.create-releases.outputs.has_new_releases == 'true'
      id: publish-npm
      shell: bash
      run: |
        # Build packages before publishing
        echo "üèóÔ∏è Building packages..."
        pnpm build
        
        # Publish to npm registry if packages are not already published
        echo "üì¶ Publishing packages from tags..."
        pnpm lerna publish from-package --yes --loglevel=info --ignore-scripts || echo "Some packages may already be published, continuing"
      env:
        NODE_AUTH_TOKEN: ${{ inputs.npm-token }}
        GH_TOKEN: ${{ inputs.github-token }} 