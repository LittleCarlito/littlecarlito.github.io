name: 'Version and Release Packages'
description: 'Handle Lerna versioning and release of packages using conventional commits'

inputs:
  github-token:
    description: 'GitHub token for creating releases and commits'
    required: true
  npm-token:
    description: 'NPM token for publishing packages'
    required: true
  release-type:
    description: 'Type of release to create (auto, patch, minor, major, etc.)'
    required: false
    default: 'auto'

outputs:
  has-changes:
    description: 'Whether changes requiring versioning were found'
    value: ${{ steps.check-changes.outputs.has_changes }}
  version:
    description: 'Version number from the versioning process (if applicable)'
    value: ${{ steps.version.outputs.version }}
  pr-url:
    description: 'URL of the created PR (if any)'
    value: ${{ steps.create-pr.outputs.pr_url }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        registry-url: 'https://npm.pkg.github.com'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: '8.15.4'
        
    - name: Install dependencies
      shell: bash
      run: pnpm install
    
    - name: Verify Lerna installation
      shell: bash
      run: |
        echo "Checking Lerna installation..."
        pnpm lerna --version
        echo "Listing available packages..."
        pnpm lerna list --json --loglevel=info
        echo "Checking pnpm version..."
        pnpm --version
        echo "Checking Node.js version..."
        node --version
    
    - name: Test Lerna commands 
      shell: bash
      run: |
        chmod +x tests/pipeline-tests/test-lerna-commands.sh
        ./tests/pipeline-tests/test-lerna-commands.sh
        
    - name: Check for versionable changes
      id: check-changes
      shell: bash
      run: |
        chmod +x .github/scripts/ci/check-version-changes.sh
        .github/scripts/ci/check-version-changes.sh
        
        # Check if there are already tags on this commit (created locally by pre-push)
        LOCAL_TAGS=$(git tag --points-at HEAD | wc -l | tr -d '[:space:]')
        if [ "$LOCAL_TAGS" -gt 0 ]; then
          echo "Detected $LOCAL_TAGS tags already on HEAD commit:"
          git tag --points-at HEAD
          echo "has_local_tags=true" >> $GITHUB_OUTPUT
          echo "Skipping version creation as tags already exist."
        else
          echo "has_local_tags=false" >> $GITHUB_OUTPUT
          echo "No tags found on HEAD commit, proceeding with version creation."
        fi
    
    - name: Create version branch
      if: steps.check-changes.outputs.has_changes == 'true' && steps.check-changes.outputs.has_local_tags != 'true'
      shell: bash
      run: |
        # Configure git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Create a new branch for version changes
        VERSION_BRANCH="version-bump-$(date +%Y%m%d%H%M%S)"
        git checkout -b "$VERSION_BRANCH"
        
        echo "version_branch=$VERSION_BRANCH" >> $GITHUB_OUTPUT
      id: create-branch
    
    - name: Run version command
      id: version
      if: steps.check-changes.outputs.has_changes == 'true' && steps.check-changes.outputs.has_local_tags != 'true'
      shell: bash
      run: |
        echo "🔄 Running versioning with type: ${{ inputs.release-type }}"
        
        # Run appropriate version command based on type
        if [ "${{ inputs.release-type }}" = "auto" ]; then
          pnpm lerna version --conventional-commits --yes --no-push --ignore-scripts --loglevel=info
        else
          pnpm lerna version "${{ inputs.release-type }}" --yes --no-push --ignore-scripts --loglevel=info
        fi
        
        # Get the latest version for output
        if [ -f "lerna.json" ]; then
          VERSION=$(jq -r '.version // "unknown"' lerna.json)
          if [ "$VERSION" != "unknown" ] && [ "$VERSION" != "independent" ]; then
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
        fi
        
        # Commit and push the changes to the version branch
        git push -u origin "${{ steps.create-branch.outputs.version_branch }}"
    
    - name: Create PR for version changes
      if: steps.check-changes.outputs.has_changes == 'true' && steps.check-changes.outputs.has_local_tags != 'true'
      id: create-pr
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # Create PR
        PR_URL=$(gh pr create \
          --base main \
          --head "${{ steps.create-branch.outputs.version_branch }}" \
          --title "chore(release): version bump" \
          --body "This PR contains package version updates created by Lerna based on conventional commits." \
          --label "release" \
          --label "automated")
          
        echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        echo "Created PR: $PR_URL"
    
    # This step is conditional based on your publishing strategy
    # If you want to publish after merging the PR, you would remove this step
    # and add a new workflow that triggers on PR merge with label "release"
    - name: Publish packages
      if: steps.check-changes.outputs.has_changes == 'true'
      shell: bash
      run: |
        # If we have local tags, we can just publish from package
        if [ "${{ steps.check-changes.outputs.has_local_tags }}" == "true" ]; then
          echo "📦 Publishing packages from local tags..."
          # Build packages before publishing
          echo "🏗️ Building packages..."
          pnpm build
          
          # Publish to registry
          echo "📦 Publishing packages..."
          pnpm lerna publish from-package --yes --loglevel=info --ignore-scripts
        else 
          # Build packages before publishing
          echo "🏗️ Building packages..."
          pnpm build
          
          # Publish to registry
          echo "📦 Publishing packages..."
          pnpm lerna publish from-package --yes --loglevel=info --ignore-scripts
        fi
      env:
        NODE_AUTH_TOKEN: ${{ inputs.npm-token }}
        GH_TOKEN: ${{ inputs.github-token }} 