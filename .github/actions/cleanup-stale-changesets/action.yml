name: 'Cleanup Stale Changesets'
description: 'Identifies and removes stale changesets that have already been applied but not deleted'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  force-cleanup:
    description: 'Whether to force cleanup of stale changesets'
    required: false
    default: 'true'
  auto-commit:
    description: 'Whether to automatically commit changes to the repository'
    required: false
    default: 'true'
  commit-message:
    description: 'Commit message for changeset cleanup'
    required: false
    default: 'chore: cleanup stale changesets [skip ci]'
  debug:
    description: 'Enable verbose debug logging'
    required: false
    default: 'false'

outputs:
  stale-changesets:
    description: 'Number of stale changesets detected'
    value: ${{ steps.detect-stale.outputs.stale_changesets }}
  total-changesets:
    description: 'Total number of changesets in the .changeset directory'
    value: ${{ steps.detect-stale.outputs.total_changesets }}
  cleanup-performed:
    description: 'Whether cleanup was performed'
    value: ${{ steps.detect-stale.outputs.cleanup_performed || steps.commit-changes.outputs.committed || 'false' }}
  changes-committed:
    description: 'Whether changes were committed to the repository'
    value: ${{ steps.commit-changes.outputs.committed || 'false' }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js for changeset detection
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        
    - name: Detect and clean stale changesets
      id: detect-stale
      shell: bash
      run: |
        echo "Detecting stale changesets..."
        chmod +x .github/scripts/version/detect-stale-changesets.sh
        
        OUTPUT=$(.github/scripts/version/detect-stale-changesets.sh \
          --force-cleanup "${{ inputs.force-cleanup }}" \
          --debug "${{ inputs.debug }}")
        
        echo "$OUTPUT"
        
        # Extract outputs
        STALE_CHANGESETS=$(echo "$OUTPUT" | grep "^stale_changesets=" | cut -d= -f2)
        TOTAL_CHANGESETS=$(echo "$OUTPUT" | grep "^total_changesets=" | cut -d= -f2)
        CLEANUP_PERFORMED=$(echo "$OUTPUT" | grep "^cleanup_performed=" | cut -d= -f2)
        
        echo "stale_changesets=$STALE_CHANGESETS" >> $GITHUB_OUTPUT
        echo "total_changesets=$TOTAL_CHANGESETS" >> $GITHUB_OUTPUT
        echo "cleanup_performed=$CLEANUP_PERFORMED" >> $GITHUB_OUTPUT
        
        # Output detailed summary
        if [[ "$STALE_CHANGESETS" == "not_found" ]]; then
          echo "ℹ️ No changeset directory found"
        elif [[ "$STALE_CHANGESETS" -eq 0 ]]; then
          echo "✅ No stale changesets detected"
        else
          echo "🧹 Found $STALE_CHANGESETS stale changesets out of $TOTAL_CHANGESETS total"
          if [[ "$CLEANUP_PERFORMED" == "true" ]]; then
            echo "✅ Cleanup performed - removed stale changeset files"
          else
            echo "ℹ️ Cleanup not performed (force-cleanup=${{ inputs.force-cleanup }})"
          fi
        fi

    # Commit changes if cleanup was performed and auto-commit is enabled
    - name: Commit cleanup changes
      id: commit-changes
      if: inputs.auto-commit == 'true' && steps.detect-stale.outputs.cleanup_performed == 'true'
      shell: bash
      run: |
        echo "Committing changeset cleanup changes..."
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Check if we have changes to commit
        if [ -n "$(git status --porcelain .changeset)" ]; then
          # Commit the changes
          git add .changeset/
          git commit -m "${{ inputs.commit-message }}"
          
          # Push to the repository 
          git push origin HEAD
          
          echo "✅ Changes committed and pushed to repository"
          echo "committed=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️ No changes to commit"
          echo "committed=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        GITHUB_TOKEN: ${{ inputs.github-token }} 