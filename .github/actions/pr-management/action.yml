name: 'PR Management'
description: 'Handles Pull Request operations including creation, merging, and cleanup'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  base-branch:
    description: 'Base branch for PR'
    required: false
    default: 'main'
  head-branch:
    description: 'Head branch for PR'
    required: false
    default: ''
  pr-number:
    description: 'PR number (if managing existing PR)'
    required: false
    default: ''
  title:
    description: 'PR title'
    required: false
    default: ''
  body:
    description: 'PR body'
    required: false
    default: ''
  merge-method:
    description: 'Merge method to use (merge, squash, rebase)'
    required: false
    default: 'squash'
  delete-branch:
    description: 'Whether to delete the head branch after merge'
    required: false
    default: 'true'
  auto-merge:
    description: 'Whether to attempt auto-merge'
    required: false
    default: 'false'

outputs:
  pr-number:
    description: 'Number of the created/found PR'
    value: ${{ steps.manage-pr.outputs.pr_number }}
  pr-url:
    description: 'URL of the created/found PR'
    value: ${{ steps.manage-pr.outputs.pr_url }}
  pr-state:
    description: 'State of the PR (open, closed, merged)'
    value: ${{ steps.manage-pr.outputs.pr_state }}
  commit-sha:
    description: 'HEAD SHA of the PR'
    value: ${{ steps.get-sha.outputs.sha }}

runs:
  using: "composite"
  steps:
    # Validate inputs - either head-branch or pr-number must be provided
    - name: Validate inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.head-branch }}" ] && [ -z "${{ inputs.pr-number }}" ]; then
          echo "Error: Either head-branch or pr-number must be provided"
          exit 1
        fi
        
        if [ -z "${{ inputs.pr-number }}" ] && [ -z "${{ inputs.title }}" ]; then
          echo "Error: title is required when creating a new PR (no pr-number provided)"
          exit 1
        fi

    # Create or find PR
    - name: Create or find PR
      id: manage-pr
      if: inputs.head-branch != ''
      shell: bash
      run: |
        # Run the PR creation/finding script
        RESULT=$(.github/scripts/pr/create-or-update.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --base-branch "${{ inputs.base-branch }}" \
          --head-branch "${{ inputs.head-branch }}" \
          --title "${{ inputs.title }}" \
          --body "${{ inputs.body }}")
        
        # Parse and export the result
        PR_NUMBER=$(echo "$RESULT" | grep "PR_NUMBER=" | cut -d= -f2)
        PR_URL=$(echo "$RESULT" | grep "PR_URL=" | cut -d= -f2)
        PR_STATE=$(echo "$RESULT" | grep "PR_STATE=" | cut -d= -f2)
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        echo "pr_state=$PR_STATE" >> $GITHUB_OUTPUT

    # Use provided PR number if not creating a new one
    - name: Use provided PR number
      id: use-pr
      if: inputs.pr-number != ''
      shell: bash
      run: |
        PR_NUMBER="${{ inputs.pr-number }}"
        PR_URL="https://github.com/${{ inputs.repository }}/pull/$PR_NUMBER"
        PR_DETAILS=$(gh pr view $PR_NUMBER --json state --jq '.state')
        PR_STATE=$(echo "$PR_DETAILS" | jq -r '.state')
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        echo "pr_state=$PR_STATE" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        
    # Get PR SHA
    - name: Get PR SHA
      id: get-sha
      shell: bash
      run: |
        # Determine which PR number to use
        if [ -n "${{ steps.manage-pr.outputs.pr_number }}" ]; then
          PR_NUMBER="${{ steps.manage-pr.outputs.pr_number }}"
        else
          PR_NUMBER="${{ steps.use-pr.outputs.pr_number }}"
        fi
        
        # Get the SHA using the script
        SHA=$(.github/scripts/branch/get-sha.sh \
          --token "${{ inputs.github-token }}" \
          --repo "${{ inputs.repository }}" \
          --pr-number "$PR_NUMBER")
          
        echo "sha=$SHA" >> $GITHUB_OUTPUT

    # Auto-merge if requested
    - name: Auto-merge PR
      if: inputs.auto-merge == 'true'
      shell: bash
      run: |
        # Determine which PR number to use
        if [ -n "${{ steps.manage-pr.outputs.pr_number }}" ]; then
          PR_NUMBER="${{ steps.manage-pr.outputs.pr_number }}"
        else
          PR_NUMBER="${{ steps.use-pr.outputs.pr_number }}"
        fi
        
        # Configure git for use with the scripts
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Use the existing merge.sh script
        .github/scripts/pr/merge.sh \
          --pr "$PR_NUMBER" \
          --method "${{ inputs.merge-method }}"
          
        # Delete branch if requested
        if [ "${{ inputs.delete-branch }}" = "true" ]; then
          # Get branch name from PR
          BRANCH=$(gh pr view $PR_NUMBER --json headRefName --jq .headRefName)
          
          # Delete branch
          .github/scripts/branch/delete.sh \
            --token "${{ inputs.github-token }}" \
            --repo "${{ inputs.repository }}" \
            --branch "$BRANCH"
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }} 