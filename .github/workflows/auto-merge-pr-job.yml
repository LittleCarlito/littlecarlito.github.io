name: Auto PR Creation and Merge

on:
  push:
    branches-ignore:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-pr:
    name: Create and Merge PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> "$GITHUB_ENV"
      
      - name: Extract commit details
        id: commit_details
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE<<EOF" >> "$GITHUB_ENV"
          echo "$COMMIT_MSG" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
          
          # Extract PR title from commit message (first line)
          PR_TITLE=$(echo "$COMMIT_MSG" | head -n 1)
          echo "PR_TITLE=$PR_TITLE" >> "$GITHUB_ENV"
          
          # Extract semantic type (feat, fix, etc.)
          SEMANTIC_TYPE=$(echo "$PR_TITLE" | grep -oP '^(\w+)(?:\(.*\))?:' | sed 's/://g' || echo "")
          echo "SEMANTIC_TYPE=$SEMANTIC_TYPE" >> "$GITHUB_ENV"

      - name: Check for existing PR
        id: check_pr
        run: |
          # Check if PR already exists for this branch
          EXISTING_PR=$(curl -s -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ env.BRANCH_NAME }}&base=main&state=open" | \
            jq -r '.[0].number')
          
          if [ "$EXISTING_PR" != "null" ] && [ -n "$EXISTING_PR" ]; then
            echo "Found existing PR #$EXISTING_PR for branch ${{ env.BRANCH_NAME }}"
            echo "pr_exists=true" >> "$GITHUB_OUTPUT"
            echo "pr_number=$EXISTING_PR" >> "$GITHUB_OUTPUT"
          else
            echo "No existing PR found for branch ${{ env.BRANCH_NAME }}"
            echo "pr_exists=false" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Create Pull Request
        id: create_pr
        if: steps.check_pr.outputs.pr_exists != 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PACKAGE_TOKEN }}
          commit-message: ${{ env.COMMIT_MESSAGE }}
          title: ${{ env.PR_TITLE }}
          body: |
            This PR was automatically created from branch `${{ env.BRANCH_NAME }}`.
            
            Original commit message:
            ```
            ${{ env.COMMIT_MESSAGE }}
            ```
            
            ## Changes
            
            <!-- List of changes in this PR -->
            
            ## Checks
            
            - [ ] Passes all required checks
          branch: ${{ env.BRANCH_NAME }}
          base: main
          draft: false
      
      - name: Set PR number
        id: set_pr
        run: |
          if [[ "${{ steps.check_pr.outputs.pr_exists }}" == "true" ]]; then
            echo "PR_NUMBER=${{ steps.check_pr.outputs.pr_number }}" >> "$GITHUB_ENV"
          else
            echo "PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}" >> "$GITHUB_ENV"
          fi
      
      - name: Wait for required checks
        id: wait_checks
        if: env.PR_NUMBER != ''
        run: |
          PR_NUMBER=${{ env.PR_NUMBER }}
          echo "Waiting for required checks on PR #$PR_NUMBER"
          
          # Function to check if all required checks have passed
          check_required_checks() {
            # Get the checks status
            CHECKS_STATUS=$(curl -s -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/check-runs" | \
              jq -r '.check_runs[] | select(.conclusion != null) | .conclusion')
            
            # Check if any checks failed
            if echo "$CHECKS_STATUS" | grep -q "failure"; then
              echo "Some checks failed"
              return 1
            fi
            
            # Check if all required checks have completed
            REQUIRED_CHECKS=$(curl -s -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/branches/main/protection/required_status_checks" | \
              jq -r '.contexts[]' 2>/dev/null || echo "")
              
            if [ -n "$REQUIRED_CHECKS" ]; then
              for check in $REQUIRED_CHECKS; do
                STATUS=$(curl -s -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/statuses" | \
                  jq -r ".[] | select(.context == \"$check\") | .state")
                
                if [ "$STATUS" != "success" ]; then
                  echo "Required check $check is not yet successful"
                  return 1
                fi
              done
            fi
            
            echo "All checks passed"
            return 0
          }
          
          # Wait for checks to pass (up to 10 minutes)
          for i in {1..60}; do
            if check_required_checks; then
              echo "All required checks passed"
              break
            fi
            
            if [ $i -eq 60 ]; then
              echo "Timeout waiting for checks to pass"
              exit 1
            fi
            
            echo "Waiting for checks to complete (attempt $i/60)..."
            sleep 10
          done
      
      - name: Determine semantic merge message
        id: merge_message
        if: steps.wait_checks.outcome == 'success'
        run: |
          # Check if SEMANTIC_TYPE is set and not empty
          if [ -n "${SEMANTIC_TYPE:-}" ]; then
            echo "Using existing semantic type: ${SEMANTIC_TYPE}"
            MERGE_MSG="${COMMIT_MESSAGE:-}"
          else
            # Default to fix: if no semantic type is detected
            echo "No semantic type detected, defaulting to fix:"
            MERGE_MSG="fix: ${PR_TITLE:-}"
          fi
          
          echo "MERGE_MESSAGE<<EOF" >> "$GITHUB_ENV"
          echo "$MERGE_MSG" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
      
      - name: Merge Pull Request
        if: steps.merge_message.outcome == 'success'
        run: |
          PR_NUMBER=${PR_NUMBER:-}
          
          # Create properly escaped JSON payload
          MERGE_TITLE=$(echo "${MERGE_MESSAGE:-}" | head -n 1)
          
          # Create JSON payload with jq to handle escaping properly
          JSON_PAYLOAD=$(jq -n \
            --arg title "$MERGE_TITLE" \
            '{
              "commit_title": $title,
              "commit_message": "",
              "merge_method": "squash"
            }')
          
          # Merge the PR with the semantic commit message
          curl -X PUT \
            -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
            -d "$JSON_PAYLOAD"
          
          echo "Successfully merged PR #$PR_NUMBER with semantic message"