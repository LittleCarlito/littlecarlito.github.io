name: Dry Run Verification

on:
  pull_request:
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:

jobs:
  verify-package-builds:
    name: Verify Package Builds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Build blorkpack
        working-directory: packages/blorkpack
        run: |
          echo "Building blorkpack package..."
          # Disable husky
          HUSKY=0 HUSKY_SKIP_INSTALL=1 npm pkg delete scripts.prepare || true
          
          # Build package
          HUSKY=0 HUSKY_SKIP_INSTALL=1 pnpm install
          HUSKY=0 HUSKY_SKIP_INSTALL=1 pnpm run build
          
          # Verify build artifacts
          echo "Verifying build artifacts..."
          if [ ! -d "dist" ]; then
            echo "ERROR: dist directory not found! Build failed."
            exit 1
          fi
          
          echo "✅ blorkpack build successful"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1

      - name: Build blorktools
        working-directory: packages/blorktools
        run: |
          echo "Building blorktools package..."
          # Disable husky
          HUSKY=0 HUSKY_SKIP_INSTALL=1 npm pkg delete scripts.prepare || true
          
          # Build package
          HUSKY=0 HUSKY_SKIP_INSTALL=1 pnpm install
          HUSKY=0 HUSKY_SKIP_INSTALL=1 pnpm run build
          
          # Verify build artifacts
          echo "Verifying build artifacts..."
          if [ ! -d "dist" ]; then
            echo "ERROR: dist directory not found! Build failed."
            exit 1
          fi
          
          echo "✅ blorktools build successful"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1

  verify-portfolio-build:
    name: Verify Portfolio Build
    runs-on: ubuntu-latest
    needs: verify-package-builds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Configure for build
        run: |
          # Create .npmrc for authentication
          echo "@littlecarlito:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGE_TOKEN }}" >> .npmrc
          
          # Enable link workspace protocol handling
          echo "link-workspace-packages=true" >> .npmrc
          echo "shamefully-hoist=true" >> .npmrc
          echo "node-linker=hoisted" >> .npmrc
          
          # Disable scripts to avoid issues
          echo "ignore-scripts=true" >> .npmrc
          echo "husky=0" >> .npmrc
          
          # Create a global .npmrc file to be double sure
          mkdir -p ~/.npm
          echo "ignore-scripts=true" > ~/.npmrc
          
          # Remove tests directory to avoid build issues (like in prod)
          if [ -d "tests" ]; then
            rm -rf tests/
            echo "Removed tests directory"
          else
            echo "No tests directory found, skipping removal"
          fi
          
          # Install dependencies with no frozen lockfile
          HUSKY=0 HUSKY_SKIP_INSTALL=1 pnpm install --no-frozen-lockfile --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1
          npm_config_ignore_scripts: true

      - name: Build local packages
        run: |
          cd packages/blorkpack
          HUSKY=0 HUSKY_SKIP_INSTALL=1 pnpm run build
          cd ../..
          
          cd packages/blorktools
          HUSKY=0 HUSKY_SKIP_INSTALL=1 pnpm run build
          cd ../..
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1
          npm_config_ignore_scripts: true

      - name: Build portfolio app
        run: |
          echo "Building portfolio app..."
          cd apps/portfolio
          
          # Create empty script executables in local bin directory
          mkdir -p node_modules/.bin
          for script in husky tshy; do
            echo "#!/bin/sh" > node_modules/.bin/$script
            echo "echo \"Dummy $script script\"" >> node_modules/.bin/$script
            chmod +x node_modules/.bin/$script
          done
          
          # Disable husky and other lifecycle scripts
          export HUSKY=0
          export HUSKY_SKIP_INSTALL=1
          export npm_config_ignore_scripts=true
          
          # Update package.json to handle workspace protocol
          jq '.dependencies["@littlecarlito/blorkpack"] = "file:../../packages/blorkpack"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Use pnpm for installation
          pnpm install --no-frozen-lockfile --ignore-scripts
          
          # Run build directly using Vite CLI
          echo "Building with Vite directly..."
          pnpm vite build --logLevel=info
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1
          npm_config_ignore_scripts: true

      - name: Verify no source files in dist
        run: |
          echo "Verifying that no source files are included in the dist directory..."
          if [ -d "apps/portfolio/dist/packages" ]; then
            echo "ERROR: packages directory found in dist folder!"
            echo "Removing packages directory from dist to prevent source code deployment"
            rm -rf apps/portfolio/dist/packages
          else
            echo "✅ No packages directory found in dist. Good!"
          fi
          
          # Double check for any source code files
          SOURCE_FILES=$(find apps/portfolio/dist -name "*.ts" -o -name "*.tsx" -o -name "*.js.map" | grep -v "node_modules" || true)
          if [ ! -z "$SOURCE_FILES" ]; then
            echo "WARNING: Source files found in dist folder. Consider reviewing your build process."
            echo "$SOURCE_FILES"
          else
            echo "✅ No source files found in dist directory"
          fi

  run-semantic-dry-release:
    name: Test Semantic Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm
          echo "Installed semantic-release and plugins globally"

      - name: Get current versions
        id: current_versions
        run: |
          cd packages/blorkpack
          BLORKPACK_CURRENT=$(jq -r '.version' package.json)
          echo "blorkpack_current=$BLORKPACK_CURRENT" >> $GITHUB_OUTPUT
          
          cd ../blorktools
          BLORKTOOLS_CURRENT=$(jq -r '.version' package.json)
          echo "blorktools_current=$BLORKTOOLS_CURRENT" >> $GITHUB_OUTPUT
          
          echo "Current blorkpack version: $BLORKPACK_CURRENT"
          echo "Current blorktools version: $BLORKTOOLS_CURRENT"

      - name: Run dry-run semantic-release for blorkpack
        working-directory: packages/blorkpack
        run: |
          echo "Running dry-run semantic-release for blorkpack package"
          
          # Create local .releaserc.json for this package
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"scope": "no-release", "release": false},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"type": "build", "release": "patch"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/npm", {
                "npmPublish": false
              }],
              ["@semantic-release/git", {
                "assets": ["package.json", "CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              "@semantic-release/github"
            ]
          }
          EOF
          
          # Run semantic-release in dry-run mode
          echo "Running semantic-release in dry-run mode"
          npx semantic-release --dry-run || echo "semantic-release dry run completed"
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Run dry-run semantic-release for blorktools
        working-directory: packages/blorktools
        run: |
          echo "Running dry-run semantic-release for blorktools package"
          
          # Create local .releaserc.json for this package
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"scope": "no-release", "release": false},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"type": "build", "release": "patch"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/npm", {
                "npmPublish": false
              }],
              ["@semantic-release/git", {
                "assets": ["package.json", "CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              "@semantic-release/github"
            ]
          }
          EOF
          
          # Run semantic-release in dry-run mode
          echo "Running semantic-release in dry-run mode"
          npx semantic-release --dry-run || echo "semantic-release dry run completed"
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 