name: Dry Run Pipeline

on:
  pull_request:
    branches:
      - main
      - 'feature/**'
  workflow_dispatch:

permissions:
  contents: read
  issues: read
  pull-requests: read
  packages: read
  actions: read

jobs:
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build packages
        run: pnpm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist

  test:
    name: Test Packages
    needs: build
    uses: ./.github/workflows/test-monorepo.yml
    with:
      artifact_name: package-builds

  analyze-and-release:
    name: Test Changesets
    needs: test
    runs-on: ubuntu-latest
    outputs:
      blorkpack_version: ${{ steps.changeset_status.outputs.blorkpack_version }}
      blorktools_version: ${{ steps.changeset_status.outputs.blorktools_version }}
      blorkboard_version: ${{ steps.changeset_status.outputs.blorkboard_version }}
      has_changeset: ${{ steps.changeset_status.outputs.has_changeset }}
      potential_version_changes: ${{ steps.simulate_version.outputs.potential_version_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Changeset status check
        id: changeset_status
        run: |
          # Check if any changesets exist
          if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | grep -v config.json)" ]; then
            echo "Changesets found, would trigger version bump in production"
            echo "has_changeset=true" >> $GITHUB_OUTPUT
            
            # Get current versions for reference
            BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
            BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
            BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
            
            echo "Current versions:"
            echo "blorkpack: $BLORKPACK_VERSION"
            echo "blorktools: $BLORKTOOLS_VERSION"  
            echo "blorkboard: $BLORKBOARD_VERSION"
            
            echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
            echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
            echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No changesets found, no version changes would be triggered"
            echo "has_changeset=false" >> $GITHUB_OUTPUT
            
            # Get current versions for reference
            BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
            BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
            BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
            
            echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
            echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
            echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Simulate version changes
        id: simulate_version
        if: steps.changeset_status.outputs.has_changeset == 'true'
        run: |
          # Create a temporary branch to simulate version changes
          git checkout -b temp-simulate-version
          
          # Create a summary of what changes would be made
          echo "## Potential version changes based on changesets:" > version_changes.md
          echo "" >> version_changes.md
          
          # Extract info from changesets to determine bump types
          echo "Analyzing changesets to determine potential version bumps:" 
          
          # Parse all changesets files
          echo "Found changesets:"
          for f in .changeset/*.md; do
            if [[ "$f" != ".changeset/README.md" && "$f" != ".changeset/config.json" ]]; then
              echo "- $f"
              
              # Extract bump type and affected packages
              BUMP_TYPE=$(grep -o -E "['|\"]---['|\"].*['|\"]---['|\"]" "$f" | sed 's/['\''\""]---['\''\""]//g' | tr -d '\n' || echo "")
              
              if [[ -n "$BUMP_TYPE" ]]; then
                if [[ "$BUMP_TYPE" == *"major"* ]]; then
                  echo "  - Contains major bump"
                elif [[ "$BUMP_TYPE" == *"minor"* ]]; then
                  echo "  - Contains minor bump"
                elif [[ "$BUMP_TYPE" == *"patch"* ]]; then
                  echo "  - Contains patch bump"
                fi
                
                # Extract affected packages
                PACKAGES=$(grep -A 10 -E "['|\"]---['|\"].*['|\"]---['|\"]" "$f" | grep -v "---" | grep -v "^$" | head -n 3 || echo "")
                echo "  - Affects packages: $PACKAGES"
                
                # Add to summary
                echo "### Changeset: $(basename "$f" .md)" >> version_changes.md
                echo "- Bump type: $BUMP_TYPE" >> version_changes.md
                echo "- Affected packages: $PACKAGES" >> version_changes.md
                echo "" >> version_changes.md
              fi
            fi
          done
          
          # Try running a simulated version command (but don't commit/push changes)
          echo "Running changeset version simulation (changes won't be committed)..."
          
          # This will modify files but we won't commit the changes
          pnpm changeset version || echo "Note: Simulation completed, any errors above are informational only"
          
          # Get the potential new versions
          echo "Potential new versions:"
          NEW_BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
          NEW_BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
          NEW_BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
          
          echo "blorkpack: ${{ steps.changeset_status.outputs.blorkpack_version }} -> $NEW_BLORKPACK_VERSION"
          echo "blorktools: ${{ steps.changeset_status.outputs.blorktools_version }} -> $NEW_BLORKTOOLS_VERSION"
          echo "blorkboard: ${{ steps.changeset_status.outputs.blorkboard_version }} -> $NEW_BLORKBOARD_VERSION"
          
          # Add version summaries to our report
          echo "### Version changes" >> version_changes.md
          echo "- blorkpack: ${{ steps.changeset_status.outputs.blorkpack_version }} -> $NEW_BLORKPACK_VERSION" >> version_changes.md
          echo "- blorktools: ${{ steps.changeset_status.outputs.blorktools_version }} -> $NEW_BLORKTOOLS_VERSION" >> version_changes.md
          echo "- blorkboard: ${{ steps.changeset_status.outputs.blorkboard_version }} -> $NEW_BLORKBOARD_VERSION" >> version_changes.md
          
          # Set output with the formatted changes (escape newlines for GitHub Actions)
          CHANGES=$(cat version_changes.md)
          echo "potential_version_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Discard all changes from the simulation
          git checkout -- .
          git checkout -
          git branch -D temp-simulate-version
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 