name: Pull Request Verification

on:
  pull_request:
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:

jobs:
  verify-monorepo:
    name: Verify Monorepo Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Configure pnpm
        run: |
          # Create .npmrc for authentication and workspace config
          cat > .npmrc << EOF
          @littlecarlito:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=${{ secrets.PACKAGE_TOKEN }}
          link-workspace-packages=true
          shamefully-hoist=true
          ignore-scripts=true
          auto-install-peers=true
          EOF

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1

      - name: Build Packages
        run: |
          # Build packages in correct order
          echo "🏗️ Building workspace packages..."
          pnpm --filter "@littlecarlito/blorkpack" build
          pnpm --filter "@littlecarlito/blorktools" build
          pnpm --filter "@littlecarlito/portfolio" build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1

      - name: Verify Builds
        run: |
          # Check package builds
          for pkg in blorkpack blorktools; do
            if [ ! -d "packages/$pkg/dist" ]; then
              echo "❌ $pkg build failed - dist directory missing"
              exit 1
            fi
            echo "✅ $pkg build verified"
          done

          # Check portfolio build
          if [ ! -d "apps/portfolio/dist" ]; then
            echo "❌ Portfolio build failed - dist directory missing"
            exit 1
          fi
          echo "✅ Portfolio build verified"

          # Check for source files in portfolio dist
          SOURCE_FILES=$(find apps/portfolio/dist -name "*.ts" -o -name "*.tsx" -o -name "*.js.map" | grep -v "node_modules" || true)
          if [ ! -z "$SOURCE_FILES" ]; then
            echo "⚠️ Warning: Source files found in dist folder:"
            echo "$SOURCE_FILES"
          else
            echo "✅ No source files in dist directory"
          fi

  test-semantic-release:
    name: Test Semantic Release
    needs: verify-monorepo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm

      - name: Test Releases
        run: |
          for pkg in blorkpack blorktools; do
            echo "Testing semantic-release for $pkg..."
            cd "packages/$pkg"
            echo '{
              "branches": ["main"],
              "plugins": [
                ["@semantic-release/commit-analyzer", {
                  "preset": "angular",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"scope": "no-release", "release": false},
                    {"type": "docs", "release": "patch"},
                    {"type": "style", "release": "patch"},
                    {"type": "refactor", "release": "patch"},
                    {"type": "test", "release": "patch"},
                    {"type": "chore", "release": "patch"},
                    {"type": "build", "release": "patch"}
                  ]
                }],
                "@semantic-release/release-notes-generator",
                "@semantic-release/changelog",
                ["@semantic-release/npm", {
                  "npmPublish": false
                }],
                ["@semantic-release/git", {
                  "assets": ["package.json", "CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}"
                }],
                "@semantic-release/github"
              ]
            }' > .releaserc.json
            npx semantic-release --dry-run || echo "Completed dry-run for $pkg"
            cd ../..
          done
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 