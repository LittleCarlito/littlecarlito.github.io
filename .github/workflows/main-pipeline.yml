name: Main Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      regenerate_from:
        description: 'Force regenerate changesets from this commit'
        required: false
        default: ''
      triggered_by:
        description: 'Workflow that triggered this run'
        required: false
        default: 'manual'

# Add concurrency to ensure only one instance runs at a time
concurrency:
  group: github-pages-deploy-${{ github.sha }}
  cancel-in-progress: true

# Define reusable variables
env:
  BUILD_ARTIFACT_NAME: build-artifacts-${{ github.run_id }}
  PACKAGES_ARTIFACT_NAME: package-builds-${{ github.run_id }}
  TRIGGERING_WORKFLOW: ${{ github.event.inputs.triggered_by || 'direct' }}
  
# Note: This workflow handles GitHub Pages deployment directly.
# The separate deploy-pages.yml workflow should be disabled or deleted.
permissions:
  contents: write
  packages: write
  pull-requests: write
  statuses: write

jobs:
  # Capture information about what triggered this workflow
  capture-trigger-info:
    name: Capture Trigger Info
    runs-on: ubuntu-latest
    outputs:
      trigger_info: ${{ steps.set-trigger-info.outputs.trigger_info }}
      trigger_workflow: ${{ steps.set-trigger-info.outputs.trigger_workflow }}
      trigger_commit: ${{ steps.set-trigger-info.outputs.trigger_commit }}
      trigger_actor: ${{ steps.set-trigger-info.outputs.trigger_actor }}
    steps:
      - name: Set trigger information
        id: set-trigger-info
        run: |
          # Determine what triggered this workflow
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.triggered_by }}" != "" ]; then
            # Triggered by another workflow
            echo "trigger_workflow=${{ github.event.inputs.triggered_by }}" >> $GITHUB_OUTPUT
            echo "trigger_info=Triggered by ${{ github.event.inputs.triggered_by }} workflow" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger
            echo "trigger_workflow=manual" >> $GITHUB_OUTPUT
            echo "trigger_info=Manually triggered by ${{ github.actor }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag push
            echo "trigger_workflow=tag_push" >> $GITHUB_OUTPUT
            echo "trigger_info=Triggered by tag push to ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            # Direct push to main
            echo "trigger_workflow=direct_push" >> $GITHUB_OUTPUT
            echo "trigger_info=Triggered by push to ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
          
          # Set commit and actor info
          echo "trigger_commit=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "trigger_actor=${{ github.actor }}" >> $GITHUB_OUTPUT
          
          # Print debug info
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"

  build:
    name: Build
    needs: capture-trigger-info
    runs-on: ubuntu-latest
    outputs:
      build_artifact_name: ${{ env.BUILD_ARTIFACT_NAME }}
      trigger_info: ${{ needs.capture-trigger-info.outputs.trigger_info }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Build packages
        uses: ./.github/actions/build-and-test
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-command: 'pnpm run build'
          test-command: 'echo "Tests will run in separate job"'
          artifact-name: ${{ env.BUILD_ARTIFACT_NAME }}
          if-no-files-found: error
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: packages
          if-no-files-found: error
          
      - name: Validate build artifacts
        run: |
          echo "Validating build artifacts..."
          # Check for dist directories
          DIST_DIRS=$(find packages -name "dist" -type d | wc -l)
          if [ "$DIST_DIRS" -eq 0 ]; then
            echo "::error::No dist directories found in packages!"
            exit 1
          fi
          echo "Found $DIST_DIRS dist directories"
          
          # List all dist directories to verify they exist and contain files
          find packages -name "dist" -type d -exec ls -la {} \;
          
          # Count files to ensure we have artifacts
          FILE_COUNT=$(find packages -name "dist" -type d -exec find {} -type f \; | wc -l)
          echo "Found $FILE_COUNT files in artifact directories"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "::error::No build artifacts found in packages/dist directories!"
            exit 1
          fi
          
          echo "✅ Artifact validation successful - $FILE_COUNT files in $DIST_DIRS directories"
          
      - name: Display trigger info
        run: echo "This build was ${{ needs.capture-trigger-info.outputs.trigger_info }}"

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      # Download build artifacts explicitly first
      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.build_artifact_name }}
          path: packages
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      # Validate that artifacts were successfully downloaded
      - name: Validate downloaded artifacts
        run: |
          echo "Validating downloaded artifacts..."
          # Check that artifacts were downloaded
          DIST_DIRS=$(find packages -name "dist" -type d | wc -l)
          if [ "$DIST_DIRS" -eq 0 ]; then
            echo "::error::No dist directories found in downloaded artifacts!"
            exit 1
          fi
          
          # Count files to ensure we have artifacts
          FILE_COUNT=$(find packages -name "dist" -type d -exec find {} -type f \; | wc -l)
          echo "Found $FILE_COUNT files in $DIST_DIRS artifact directories"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "::error::Downloaded artifacts contain no files!"
            exit 1
          fi
          
          echo "✅ Downloaded artifacts validation successful"
          
      # Replace workflow call with direct use of the action
      - name: Test packages
        uses: ./.github/actions/test-packages
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          artifact-name: ${{ needs.build.outputs.build_artifact_name }}

  generate-changesets:
    name: Generate Changesets
    # Only run this on main branch pushes, not on tags
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Replace workflow call with direct use of the action
      - name: Generate Changesets
        id: generate-changesets
        uses: ./.github/actions/scan-and-generate-changesets
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          force-base-commit: ${{ github.event.inputs.regenerate_from }}
          auto-changeset-prefix: 'auto-'

  version-and-publish:
    name: Version and Publish to GitHub npm
    # Run this job even if auto-changeset job is skipped
    needs: [test, generate-changesets, build]
    if: always() && needs.test.result == 'success' && (needs.generate-changesets.result == 'success' || needs.generate-changesets.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      # Download build artifacts
      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.build_artifact_name }}
          path: packages
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      # Validate that artifacts were successfully downloaded
      - name: Validate downloaded artifacts
        run: |
          echo "Validating downloaded artifacts for version-and-publish job..."
          # Check that artifacts were downloaded
          DIST_DIRS=$(find packages -name "dist" -type d | wc -l)
          if [ "$DIST_DIRS" -eq 0 ]; then
            echo "::error::No dist directories found in downloaded artifacts!"
            exit 1
          fi
          
          # Count files to ensure we have artifacts
          FILE_COUNT=$(find packages -name "dist" -type d -exec find {} -type f \; | wc -l)
          echo "Found $FILE_COUNT files in $DIST_DIRS artifact directories"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "::error::Downloaded artifacts contain no files!"
            exit 1
          fi
          
          echo "✅ Downloaded artifacts validation successful for version-and-publish job"
          
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      # Check commit message for PR creation request  
      - name: Check for PR creation request in commit message
        id: check-pr-request
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Check if footer contains create-pr: true
          if echo "$COMMIT_MSG" | grep -q "create-pr: true"; then
            echo "Manual PR creation requested in commit footer"
            echo "create_pr=true" >> $GITHUB_OUTPUT
          else
            echo "No PR creation request found, will use direct publishing"
            echo "create_pr=false" >> $GITHUB_OUTPUT
          fi
          
      # Use the new composite action
      - name: Version and Publish Packages
        id: version-publish
        uses: ./.github/actions/version-and-publish
        with:
          github-token: ${{ secrets.PACKAGE_TOKEN }}
          artifact-name: ${{ needs.build.outputs.build_artifact_name }}
          publish-command: 'pnpm run release'
          version-command: 'pnpm run version'
          commit-message: 'chore: version packages'
          pr-title: 'chore: version packages'
          create-github-releases: 'true'
          create-pr: ${{ steps.check-pr-request.outputs.create_pr }}
          registry-url: 'https://npm.pkg.github.com'
          npm-scope: '@littlecarlito'
          package-paths: 'packages/blorkpack,packages/blorktools,packages/blorkboard,apps/portfolio'
          package-names: '@littlecarlito/blorkpack,@littlecarlito/blorktools,@littlecarlito/blorkboard,@littlecarlito/portfolio'

  # Build the site for GitHub Pages
  build-site:
    name: Build Site for GitHub Pages
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
          
      # Set GITHUB_PAGES environment variable to ensure correct base URL
      - name: Build for GitHub Pages
        run: |
          # First build the blorkpack package explicitly
          pnpm --filter=@littlecarlito/blorkpack build
          # Then build the portfolio with GitHub Pages flag
          GITHUB_PAGES=true pnpm --filter=@littlecarlito/portfolio build
          
      # Ensure _headers file is copied to the dist folder
      - name: Ensure _headers file for GitHub Pages
        run: |
          if [ -f "apps/portfolio/public/_headers" ]; then
            cp apps/portfolio/public/_headers apps/portfolio/dist/
            echo "Copied _headers file to dist folder"
          else
            echo "Warning: _headers file not found"
          fi
          
      # Create a .nojekyll file to disable Jekyll processing
      - name: Add .nojekyll file
        run: touch apps/portfolio/dist/.nojekyll
      
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/portfolio/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.PACKAGE_TOKEN }} 

  # Clean up any remaining changeset branches
  cleanup-branches:
    name: Cleanup Changeset Branches
    needs: version-and-publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
      
      # Use our specialized script that handles this task
      - name: Clean up changeset branches
        run: |
          echo "Running changeset branch cleanup..."
          bash .github/scripts/version/cleanup-changeset-branches.sh \
            --token "${{ secrets.PACKAGE_TOKEN }}" \
            --repo "${{ github.repository }}" \
            --max-attempts 3
            
  # Report pipeline results (always runs after all jobs)
  report-results:
    name: Report Pipeline Results
    needs: [capture-trigger-info, build, test, generate-changesets, version-and-publish, build-site, cleanup-branches]
    if: always()
    runs-on: ubuntu-latest
    steps:
      # Determine overall workflow result
      - name: Determine workflow result
        id: workflow-result
        run: |
          # Check results of required jobs
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi
          
          # Get trigger info
          echo "trigger_info=${{ needs.capture-trigger-info.outputs.trigger_info }}" >> $GITHUB_OUTPUT
          echo "trigger_workflow=${{ needs.capture-trigger-info.outputs.trigger_workflow }}" >> $GITHUB_OUTPUT
          
      # Trigger the report-results workflow using GitHub Script
      - name: Trigger report-results workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'report-results.yml',
              ref: 'main',
              inputs: {
                result: '${{ steps.workflow-result.outputs.result }}',
                workflow_name: 'Main Pipeline',
                summary: 'Main Pipeline completed with result: ${{ steps.workflow-result.outputs.result }}. ${{ steps.workflow-result.outputs.trigger_info }}'
              }
            }); 