name: Push and Create PR

on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to create (will use timestamp if empty)'
        required: false
        default: ''
      target_branch:
        description: 'Target branch for PR'
        required: false
        default: 'main'
      title:
        description: 'PR title/commit message'
        required: true
      body:
        description: 'PR description'
        required: false
        default: ''
      auto_merge:
        description: 'Auto merge if all checks pass'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  push-and-create-pr:
    name: Push changes and create PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PR_CREATION_TOKEN }}
          
      # Extract branch name based on trigger context
      - name: Extract branch info
        id: branch_info
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # For push event, extract from github context
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
            
            # Get the commit message for PR title
            COMMIT_MSG=$(git log -1 --pretty=%B)
            PR_TITLE=$(echo "$COMMIT_MSG" | head -n 1)
            echo "title=$PR_TITLE" >> $GITHUB_OUTPUT
            
            # Create PR body from full commit message
            echo "body<<EOF" >> $GITHUB_OUTPUT
            echo "Automated PR created from push to branch \`$BRANCH_NAME\`." >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "**Original commit message:**" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Default target branch to main
            echo "target_branch=main" >> $GITHUB_OUTPUT
            
            # Default auto_merge to true
            echo "auto_merge=true" >> $GITHUB_OUTPUT
          else
            # For manual workflow dispatch, use inputs
            if [ -n "${{ github.event.inputs.branch_name }}" ]; then
              BRANCH="${{ github.event.inputs.branch_name }}"
            else
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              BRANCH="auto-pr-${TIMESTAMP}"
            fi
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "title=${{ github.event.inputs.title }}" >> $GITHUB_OUTPUT
            echo "body=${{ github.event.inputs.body }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT
            echo "auto_merge=${{ github.event.inputs.auto_merge }}" >> $GITHUB_OUTPUT
          fi
      
      # Setup environment and tools
      - name: Setup tools
        id: setup
        uses: ./.github/actions/build-and-test
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-command: 'echo "Skipping build for PR creation"'
          test-command: 'echo "Skipping tests for PR creation"'
      
      # Only upload artifacts if we're not skipping the build
      - name: Upload build artifacts
        if: ${{ !contains(steps.setup.outputs.build-result, 'Skipping') }}
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist
      
      # Create and switch to new branch (only for workflow_dispatch)
      - name: Create branch (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git checkout -b ${{ steps.branch_info.outputs.branch }}
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
      
      # Make example changes (only for workflow_dispatch)
      - name: Make example changes (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "# Auto-generated changelog entry" > change.md
          echo "Title: ${{ steps.branch_info.outputs.title }}" >> change.md
          echo "Generated: $(date)" >> change.md
      
      # Setup for version calculation
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
      
      # Run version calculation with --apply for all PRs
      - name: Apply version changes
        id: apply_versions
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
          
          # Get the merge base with the target branch
          git fetch origin ${{ steps.branch_info.outputs.target_branch }}
          MERGE_BASE=$(git merge-base origin/${{ steps.branch_info.outputs.target_branch }} HEAD)
          echo "Merge base with ${{ steps.branch_info.outputs.target_branch }}: $MERGE_BASE"
          
          # Run version calculation with --apply
          echo "Calculating and applying version changes from $MERGE_BASE to HEAD..."
          MERGE_BASE=$MERGE_BASE node scripts/version-runner.js --apply --output-json
          
          # Check if versions were updated
          if [ -f "version-output.json" ]; then
            UPDATED_COUNT=$(jq '.updatedPackages | length' version-output.json)
            
            if [ "$UPDATED_COUNT" -gt "0" ]; then
              echo "Version changes were applied to $UPDATED_COUNT packages"
              jq -r '.updatedPackages[] | .name + ": " + .previousVersion + " → " + .version' version-output.json
              
              # Create version summary for PR body
              echo "# Version Updates" > version-summary.md
              jq -r '.updatedPackages[] | "- " + .name + ": " + .previousVersion + " → " + .version' version-output.json >> version-summary.md
              
              # Stage and commit the changes
              git add "**/package.json"
              git commit -m "chore: bump versions [auto]" -m "$(cat version-summary.md)"
              
              echo "version_changes=true" >> $GITHUB_OUTPUT
              echo "version_summary<<EOF" >> $GITHUB_OUTPUT
              cat version-summary.md >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "No version changes needed"
              echo "version_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No version-output.json found"
            echo "version_changes=false" >> $GITHUB_OUTPUT
          fi
      
      # Commit changes (only for workflow_dispatch)
      - name: Commit changes (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git add .
          git commit -m "${{ steps.branch_info.outputs.title }}"
      
      # Push branch
      - name: Push changes
        id: push_changes
        run: |
          git push origin ${{ steps.branch_info.outputs.branch }}
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      
      # Create PR body with version info if applicable
      - name: Prepare PR body
        id: prepare_pr_body
        run: |
          # Start with the original body - use cat to prevent shell interpretation
          ORIGINAL_BODY='${{ steps.branch_info.outputs.body }}'
          # Initialize FINAL_BODY with the raw content using a heredoc
          cat > body_content.txt << 'EOL'
          ${{ steps.branch_info.outputs.body }}
          EOL
          
          # Add version changes if they exist
          if [ "${{ steps.apply_versions.outputs.version_changes }}" == "true" ]; then
            cat >> body_content.txt << 'EOL'
            
            ## Version Changes
            
            ${{ steps.apply_versions.outputs.version_summary }}
            
            *These version changes will be tagged and published when merged to main*
          EOL
          fi
          
          # Output the PR body without shell interpretation
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat body_content.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # Create PR
      - name: Create PR
        id: manage_pr
        uses: ./.github/actions/manage-pull-request
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          base-branch: ${{ steps.branch_info.outputs.target_branch }}
          head-branch: ${{ steps.branch_info.outputs.branch }}
          title: ${{ steps.branch_info.outputs.title }}
          body: ${{ steps.prepare_pr_body.outputs.body }}
      
      # Wait for GitHub checks to complete
      - name: Wait for checks
        id: verify_checks
        if: steps.branch_info.outputs.auto_merge == 'true'
        shell: bash
        run: |
          echo "Waiting for checks to complete on PR #${{ steps.manage_pr.outputs.pr-number }}..."
          
          # We need to get the SHA from the PR
          SHA=${{ steps.push_changes.outputs.commit_sha }}
          
          bash .github/scripts/branch/wait-checks.sh \
            --repo "${{ github.repository }}" \
            --sha "$SHA" \
            --workflow "Push and Create PR" \
            --timeout "300" \
            --min-checks "2"  # Adjust based on expected number of checks
            
          echo "All required checks have completed successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Merge PR if auto-merge is enabled
      - name: Merge PR
        id: merge_pr
        if: steps.branch_info.outputs.auto_merge == 'true' && steps.verify_checks.outcome == 'success'
        uses: ./.github/actions/merge-pull-request
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.manage_pr.outputs.pr-number }}
          commit-title: ${{ steps.branch_info.outputs.title }}
          merge-method: 'merge'
          delete-branch: 'true'
          commit-message: >-
            Merge PR #${{ steps.manage_pr.outputs.pr-number }} from ${{ steps.branch_info.outputs.branch }}
            
            create-pr: false
            triggered-by: push-create-pr
            version-changes: ${{ steps.apply_versions.outputs.version_changes || 'false' }}

      # Cleanup if no auto-merge
      - name: Status update
        if: steps.branch_info.outputs.auto_merge != 'true'
        run: |
          echo "PR created but not auto-merging as requested"
          echo "PR: ${{ steps.manage_pr.outputs.pr-url }}"
          
      # Report failure using the action
      - name: Report failure
        if: failure()
        uses: ./.github/actions/report-workflow-results
        with:
          workflow-name: 'Push and Create PR'
          result: 'failure'
          branch: ${{ steps.branch_info.outputs.branch || github.ref_name }}
          summary: 'PR creation failed for branch ${{ steps.branch_info.outputs.branch || github.ref_name }} (reported from ${{ github.ref_name }})'
          source: 'webhook'
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          github-token: ${{ secrets.PR_CREATION_TOKEN }} 