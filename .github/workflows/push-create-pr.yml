name: Push and Create PR

on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to create (will use timestamp if empty)'
        required: false
        default: ''
      target_branch:
        description: 'Target branch for PR'
        required: false
        default: 'main'
      title:
        description: 'PR title/commit message'
        required: true
      body:
        description: 'PR description'
        required: false
        default: ''
      auto_merge:
        description: 'Auto merge if all checks pass'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      calculate_versions:
        description: 'Calculate and apply version bumps in PR'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      process_versions_on_merge:
        description: 'Process version tagging/publishing after merge'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  push-and-create-pr:
    name: Push changes and create PR
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.manage_pr.outputs.pr-number }}
      version-changes: ${{ steps.calculate_versions.outputs.version_changes || 'false' }}
      pr-merged: ${{ steps.merge_pr.outputs.merged || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PR_CREATION_TOKEN }}
          
      # Extract branch name based on trigger context
      - name: Extract branch info
        id: branch_info
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # For push event, extract from github context
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
            
            # Get the commit message for PR title
            COMMIT_MSG=$(git log -1 --pretty=%B)
            PR_TITLE=$(echo "$COMMIT_MSG" | head -n 1)
            echo "title=$PR_TITLE" >> $GITHUB_OUTPUT
            
            # Create PR body from full commit message
            echo "body<<EOF" >> $GITHUB_OUTPUT
            echo "Automated PR created from push to branch \`$BRANCH_NAME\`." >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "**Original commit message:**" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Default target branch to main
            echo "target_branch=main" >> $GITHUB_OUTPUT
            
            # Default auto_merge to true
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            
            # Default calculate_versions to true
            echo "calculate_versions=true" >> $GITHUB_OUTPUT
            
            # Default process_versions_on_merge to true
            echo "process_versions_on_merge=true" >> $GITHUB_OUTPUT
          else
            # For manual workflow dispatch, use inputs
            if [ -n "${{ github.event.inputs.branch_name }}" ]; then
              BRANCH="${{ github.event.inputs.branch_name }}"
            else
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              BRANCH="auto-pr-${TIMESTAMP}"
            fi
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "title=${{ github.event.inputs.title }}" >> $GITHUB_OUTPUT
            echo "body=${{ github.event.inputs.body }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT
            echo "auto_merge=${{ github.event.inputs.auto_merge }}" >> $GITHUB_OUTPUT
            echo "calculate_versions=${{ github.event.inputs.calculate_versions }}" >> $GITHUB_OUTPUT
            echo "process_versions_on_merge=${{ github.event.inputs.process_versions_on_merge }}" >> $GITHUB_OUTPUT
          fi
      
      # Setup environment and tools
      - name: Setup tools
        id: setup
        uses: ./.github/actions/build-and-test
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-command: 'echo "Skipping build for PR creation"'
          test-command: 'echo "Skipping tests for PR creation"'
      
      # Only upload artifacts if we're not skipping the build
      - name: Upload build artifacts
        if: ${{ !contains(steps.setup.outputs.build-result, 'Skipping') }}
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist
      
      # Create and switch to new branch (only for workflow_dispatch)
      - name: Create branch (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git checkout -b ${{ steps.branch_info.outputs.branch }}
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
      
      # Make example changes (only for workflow_dispatch)
      - name: Make example changes (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "# Auto-generated changelog entry" > change.md
          echo "Title: ${{ steps.branch_info.outputs.title }}" >> change.md
          echo "Generated: $(date)" >> change.md
      
      # Install Node and PNPM for version calculation
      - name: Setup Node.js for version calculation
        if: steps.branch_info.outputs.calculate_versions == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Setup pnpm for version calculation
        if: steps.branch_info.outputs.calculate_versions == 'true'
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies for version calculation
        if: steps.branch_info.outputs.calculate_versions == 'true'
        run: pnpm install
      
      # Calculate version changes based on commits in this branch
      - name: Calculate version changes
        id: calculate_versions
        if: steps.branch_info.outputs.calculate_versions == 'true'
        run: |
          # Get the merge base with the target branch
          git fetch origin ${{ steps.branch_info.outputs.target_branch }}
          MERGE_BASE=$(git merge-base origin/${{ steps.branch_info.outputs.target_branch }} HEAD)
          echo "Merge base with ${{ steps.branch_info.outputs.target_branch }}: $MERGE_BASE"
          
          # Run version calculation against the merge base
          echo "Calculating version changes from $MERGE_BASE to HEAD..."
          MERGE_BASE=$MERGE_BASE node scripts/version-runner.js --apply --output-json
          
          # Check if versions were updated
          if [ -f "version-output.json" ]; then
            UPDATED_COUNT=$(jq '.updatedPackages | length' version-output.json)
            echo "packages_updated=$UPDATED_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$UPDATED_COUNT" -gt "0" ]; then
              echo "Version changes were applied to $UPDATED_COUNT packages"
              jq -r '.updatedPackages[] | .name + ": " + .previousVersion + " → " + .version' version-output.json
              
              # Create version summary
              if [ ! -f "version-summary.md" ]; then
                echo "# Version Updates" > version-summary.md
                jq -r '.updatedPackages[] | "- " + .name + ": " + .previousVersion + " → " + .version' version-output.json >> version-summary.md
              fi
              
              # Stage the changed package.json files
              git add "**/package.json"
              
              # Create version bump commit
              git commit -m "chore: bump versions [auto]" -m "$(cat version-summary.md || echo 'Version updates')"
              echo "version_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
              echo "version_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No version changes needed"
              echo "version_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No version-output.json found"
            echo "version_changes=false" >> $GITHUB_OUTPUT
          fi
      
      # Commit changes (only for workflow_dispatch)
      - name: Commit changes (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch' && steps.calculate_versions.outputs.version_changes != 'true'
        run: |
          git add .
          git commit -m "${{ steps.branch_info.outputs.title }}"
      
      # Push branch 
      - name: Push changes
        id: push_changes
        run: |
          git push origin ${{ steps.branch_info.outputs.branch }}
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      
      # Extract SHA for push event
      - name: Get commit SHA
        id: get_sha
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "commit_sha=${{ steps.push_changes.outputs.commit_sha }}" >> $GITHUB_OUTPUT
          fi
      
      # Setup PR message
      - name: Setup PR commit message
        id: merge_message
        run: |
          # Create consistent PR title/message
          MERGE_TITLE="${{ steps.branch_info.outputs.title }}"
          echo "merge_title=$MERGE_TITLE" >> $GITHUB_OUTPUT
      
      # Update PR body if versions were calculated
      - name: Update PR body with version changes
        id: update_pr_body
        if: steps.calculate_versions.outputs.version_changes == 'true'
        run: |
          # Create updated PR body with version information
          ORIGINAL_BODY="${{ steps.branch_info.outputs.body }}"
          VERSION_INFO=$(cat version-summary.md)
          
          # Create new PR body
          PR_BODY="$ORIGINAL_BODY"$'\n\n'
          PR_BODY+="## Version Changes"$'\n\n'
          PR_BODY+="$VERSION_INFO"$'\n\n'
          PR_BODY+="*Version changes will be tagged and published after merging*"
          
          # Output the updated PR body
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      # Create PR
      - name: Create PR
        id: manage_pr
        uses: ./.github/actions/manage-pull-request
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          base-branch: ${{ steps.branch_info.outputs.target_branch }}
          head-branch: ${{ steps.branch_info.outputs.branch }}
          title: ${{ steps.branch_info.outputs.title }}
          body: ${{ steps.update_pr_body.outputs.body || steps.branch_info.outputs.body }}
      
      # Wait for GitHub checks to complete
      - name: Wait for checks
        id: verify_checks
        if: steps.branch_info.outputs.auto_merge == 'true'
        shell: bash
        run: |
          echo "Waiting for checks to complete on PR #${{ steps.manage_pr.outputs.pr-number }}..."
          
          # We need to get the SHA from the PR
          SHA=${{ steps.get_sha.outputs.commit_sha }}
          
          bash .github/scripts/branch/wait-checks.sh \
            --repo "${{ github.repository }}" \
            --sha "$SHA" \
            --workflow "Push and Create PR" \
            --timeout "300" \
            --min-checks "2"  # Adjust based on expected number of checks
            
          echo "All required checks have completed successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Trigger the PR merge workflow but as a separate workflow run
      - name: Trigger PR Merge
        id: trigger_merge
        if: success() && steps.branch_info.outputs.auto_merge == 'true'
        continue-on-error: true
        run: |
          echo "All checks passed! Merging PR directly using action..."
          echo "workflow_triggered=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PR_CREATION_TOKEN }}

      # Use the merge-pr action directly instead of calling the workflow
      - name: Merge PR
        id: merge_pr
        if: steps.branch_info.outputs.auto_merge == 'true' && steps.verify_checks.outcome == 'success'
        uses: ./.github/actions/merge-pull-request
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.manage_pr.outputs.pr-number }}
          commit-title: ${{ steps.merge_message.outputs.merge_title }}
          merge-method: 'merge'
          delete-branch: 'true'
          commit-message: >-
            Merge PR #${{ steps.manage_pr.outputs.pr-number }} from ${{ steps.branch_info.outputs.branch }}
            
            create-pr: false
            triggered-by: push-create-pr
            version-changes: ${{ steps.calculate_versions.outputs.version_changes || 'false' }}

      # Cleanup if no auto-merge
      - name: Status update
        if: steps.branch_info.outputs.auto_merge != 'true'
        run: |
          echo "PR created but not auto-merging as requested"
          echo "PR: ${{ steps.manage_pr.outputs.pr-url }}"
          
      # Check if report should be sent for failures
      - name: Check if report should be sent
        if: failure()
        id: should_report
        run: |
          OUTPUT=$(bash .github/scripts/reporting/filter-workflow-reports.sh \
            --workflow-name "Push and Create PR" \
            --branch "${{ steps.branch_info.outputs.branch || github.ref_name }}" \
            --source "webhook" \
            --summary "PR creation failed for branch ${{ steps.branch_info.outputs.branch || github.ref_name }}")
          
          echo "$OUTPUT"
          # Extract the should_report value
          SHOULD_REPORT=$(echo "$OUTPUT" | grep "^should_report=" | cut -d= -f2)
          echo "should_report=$SHOULD_REPORT" >> $GITHUB_OUTPUT
          
      # Report failure using the new action
      - name: Report failure
        if: failure()
        uses: ./.github/actions/report-workflow-results
        with:
          workflow-name: 'Push and Create PR'
          result: 'failure'
          branch: ${{ steps.branch_info.outputs.branch || github.ref_name }}
          summary: 'PR creation failed for branch ${{ steps.branch_info.outputs.branch || github.ref_name }} (reported from ${{ github.ref_name }})'
          source: 'webhook'
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          github-token: ${{ secrets.PR_CREATION_TOKEN }}

  # Process version changes after PR is merged
  process-versions:
    name: Process Version Changes
    needs: push-and-create-pr
    if: >-
      needs.push-and-create-pr.outputs.pr-merged == 'true' && 
      needs.push-and-create-pr.outputs.version-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.DEPLOY_TOKEN }}
          ref: main
          
      - name: Process version changes
        uses: ./.github/actions/process-version-changes
        with:
          github-token: ${{ secrets.DEPLOY_TOKEN }}
      
      - name: Report results
        run: |
          echo "Version processing complete!" 