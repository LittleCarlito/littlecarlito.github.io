name: Push and Create PR

on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to create (will use timestamp if empty)'
        required: false
        default: ''
      target_branch:
        description: 'Target branch for PR'
        required: false
        default: 'main'
      title:
        description: 'PR title/commit message'
        required: true
      body:
        description: 'PR description'
        required: false
        default: ''
      auto_merge:
        description: 'Auto merge if all checks pass'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  push-and-create-pr:
    name: Push changes and create PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PR_CREATION_TOKEN }}
          # Ensure we fetch the head branch
          ref: ${{ github.head_ref || github.ref_name }}
          
      # Extract branch name based on trigger context
      - name: Extract branch info
        id: branch_info
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # For push event, extract from github context
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            
            # Get the commit message for PR title
            COMMIT_MSG=$(git log -1 --pretty=%B)
            PR_TITLE=$(echo "${COMMIT_MSG}" | head -n 1)
            
            # Create PR body from full commit message
            {
              echo "branch=${BRANCH_NAME}"
              echo "title=${PR_TITLE}"
              echo "body<<EOF" 
              echo "Automated PR created from push to branch \`${BRANCH_NAME}\`." 
              echo "" 
              echo "**Original commit message:**" 
              echo '```' 
              echo "${COMMIT_MSG}" 
              echo '```' 
              echo "EOF"
              # Default target branch to main
              echo "target_branch=main"
              # Default auto_merge to true
              echo "auto_merge=true"
            } >> "$GITHUB_OUTPUT"
          else
            # For manual workflow dispatch, use inputs
            if [ -n "${{ github.event.inputs.branch_name }}" ]; then
              BRANCH="${{ github.event.inputs.branch_name }}"
            else
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              BRANCH="auto-pr-${TIMESTAMP}"
            fi
            
            {
              echo "branch=${BRANCH}"
              echo "title=${{ github.event.inputs.title }}"
              echo "body=${{ github.event.inputs.body }}"
              echo "target_branch=${{ github.event.inputs.target_branch }}"
              echo "auto_merge=${{ github.event.inputs.auto_merge }}"
            } >> "$GITHUB_OUTPUT"
          fi
      
      # Explicitly fetch the target branch to compare against
      - name: Fetch target branch
        run: |
          # Fetch the target branch (usually main)
          TARGET_BRANCH="${{ steps.branch_info.outputs.target_branch || 'main' }}"
          echo "Fetching target branch: ${TARGET_BRANCH}"
          git fetch origin "${TARGET_BRANCH}":refs/remotes/origin/"${TARGET_BRANCH}"
          
          # Verify branches exist
          echo "Available branches:"
          git branch -a
          
          # Ensure the target branch is properly tracked locally
          git branch --track "${TARGET_BRANCH}" origin/"${TARGET_BRANCH}" || echo "Branch already exists"
      
      # Setup environment and tools
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      # Debug package versions to ensure we're preserving what pre-push set
      - name: Debug package versions
        run: |
          echo "Current package versions (set by pre-push hook):"
          while IFS= read -r pkg_file; do
            dir_name=$(dirname "$pkg_file")
            version=$(node -p "require('./$pkg_file').version")
            echo "$dir_name version: $version"
          done < <(find apps packages -name "package.json" -not -path "*/node_modules/*") || echo "No packages found"
      
      # Create and switch to new branch (only for workflow_dispatch)
      - name: Create branch (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git checkout -b "${{ steps.branch_info.outputs.branch }}"
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
      
      # Make example changes (only for workflow_dispatch)
      - name: Make example changes (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "# Auto-generated changelog entry" > change.md
          echo "Title: ${{ steps.branch_info.outputs.title }}" >> change.md
          echo "Generated: $(date)" >> change.md
      
      # Commit changes (only for workflow_dispatch)
      - name: Commit changes (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git add .
          git commit -m "${{ steps.branch_info.outputs.title }}"
      
      # Push branch
      - name: Push changes
        id: push_changes
        run: |
          git push origin "${{ steps.branch_info.outputs.branch }}"
          {
            echo "commit_sha=$(git rev-parse HEAD)"
          } >> "${GITHUB_OUTPUT}"
      
      # Create PR
      - name: Create PR
        id: manage_pr
        uses: ./.github/actions/manage-pull-request
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          base-branch: ${{ steps.branch_info.outputs.target_branch }}
          head-branch: ${{ steps.branch_info.outputs.branch }}
          title: ${{ steps.branch_info.outputs.title }}
          body: ${{ steps.branch_info.outputs.body }}
      
      # Wait for GitHub checks to complete
      - name: Wait for checks
        id: verify_checks
        if: steps.branch_info.outputs.auto_merge == 'true'
        shell: bash
        run: |
          echo "Waiting for checks to complete on PR #${{ steps.manage_pr.outputs.pr-number }}..."
          
          # We need to get the SHA from the PR
          SHA="${{ steps.push_changes.outputs.commit_sha }}"
          
          bash .github/scripts/branch/wait-checks.sh \
            --repo "${{ github.repository }}" \
            --sha "${SHA}" \
            --workflow "Push and Create PR" \
            --timeout "300" \
            --min-checks "2"  # Adjust based on expected number of checks
            
          echo "All required checks have completed successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Merge PR if auto-merge is enabled
      - name: Merge PR
        id: merge_pr
        if: steps.branch_info.outputs.auto_merge == 'true' && steps.verify_checks.outcome == 'success'
        uses: ./.github/actions/merge-pull-request
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.manage_pr.outputs.pr-number }}
          commit-title: ${{ steps.branch_info.outputs.title }}
          merge-method: 'merge'
          delete-branch: 'true'
      
      # Cleanup if no auto-merge
      - name: Status update
        if: steps.branch_info.outputs.auto_merge != 'true'
        run: |
          echo "PR created but not auto-merging as requested"
          echo "PR: ${{ steps.manage_pr.outputs.pr-url }}"
          
      # Set branch name for reporting
      - name: Set branch name for reporting
        if: always()
        id: branch_for_report
        run: |
          if [ -n "${{ steps.branch_info.outputs.branch }}" ]; then
            {
              echo "branch_name=${{ steps.branch_info.outputs.branch }}"
            } >> "${GITHUB_OUTPUT}"
          else
            {
              echo "branch_name=${github.ref_name}"
            } >> "${GITHUB_OUTPUT}"
          fi

      # Report failure using the action
      - name: Report failure
        if: failure()
        uses: ./.github/actions/report-workflow-results
        with:
          workflow-name: 'Push and Create PR'
          result: 'failure'
          branch: ${{ steps.branch_for_report.outputs.branch_name }}
          summary: 'PR creation failed for branch ${{ steps.branch_for_report.outputs.branch_name }} (reported from ${{ github.ref_name }})'
          source: 'webhook'
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          github-token: ${{ secrets.PR_CREATION_TOKEN }} 