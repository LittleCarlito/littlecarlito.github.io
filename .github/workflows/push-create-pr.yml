name: Push and Create PR

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to create (will use timestamp if empty)'
        required: false
        default: ''
      target_branch:
        description: 'Target branch for PR'
        required: false
        default: 'main'
      title:
        description: 'PR title/commit message'
        required: true
      body:
        description: 'PR description'
        required: false
        default: ''
      auto_merge:
        description: 'Auto merge if all checks pass'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  push-and-create-pr:
    name: Push changes and create PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PR_CREATION_TOKEN }}
          
      # Get current timestamp-based branch name
      - name: Generate branch name
        id: branch_name
        run: |
          if [ -n "${{ github.event.inputs.branch_name }}" ]; then
            BRANCH="${{ github.event.inputs.branch_name }}"
          else
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            BRANCH="auto-pr-${TIMESTAMP}"
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
      
      # Setup environment and tools
      - name: Setup tools
        id: setup
        uses: ./.github/actions/build-test
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-command: 'echo "Skipping build for PR creation"'
          test-command: 'echo "Skipping tests for PR creation"'
      
      # Create and switch to new branch
      - name: Create and switch to branch
        run: |
          git checkout -b ${{ steps.branch_name.outputs.branch }}
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
      
      # Make changes here - for this example we're just touching a file
      - name: Make example changes
        run: |
          echo "# Auto-generated changelog entry" > change.md
          echo "Title: ${{ github.event.inputs.title }}" >> change.md
          echo "Generated: $(date)" >> change.md
      
      # Commit changes
      - name: Commit changes
        run: |
          git add .
          git commit -m "${{ github.event.inputs.title }}"
      
      # Push branch
      - name: Push changes
        id: push_changes
        run: |
          git push origin ${{ steps.branch_name.outputs.branch }}
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      
      # Setup PR message
      - name: Setup PR commit message
        id: merge_message
        run: |
          # Create consistent PR title/message
          MERGE_TITLE="${{ github.event.inputs.title }}"
          echo "merge_title=$MERGE_TITLE" >> $GITHUB_OUTPUT
      
      # Create PR
      - name: Create PR
        id: manage_pr
        uses: ./.github/actions/pr-management
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          base-branch: ${{ github.event.inputs.target_branch }}
          head-branch: ${{ steps.branch_name.outputs.branch }}
          title: ${{ github.event.inputs.title }}
          body: ${{ github.event.inputs.body }}
      
      # Wait for GitHub checks to complete
      - name: Wait for checks
        id: verify_checks
        if: github.event.inputs.auto_merge == 'true'
        shell: bash
        run: |
          echo "Waiting for checks to complete on PR #${{ steps.manage_pr.outputs.pr-number }}..."
          
          # We need to get the SHA from the PR
          SHA=${{ steps.push_changes.outputs.commit_sha }}
          
          bash .github/scripts/branch/wait-checks.sh \
            --repo "${{ github.repository }}" \
            --sha "$SHA" \
            --timeout "300" \
            --min-checks "2"  # Adjust based on expected number of checks
            
          echo "All required checks have completed successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Trigger the PR merge workflow but as a separate workflow run
      - name: Trigger PR Merge
        id: trigger_merge
        if: success() && github.event.inputs.auto_merge == 'true'
        continue-on-error: true
        run: |
          echo "All checks passed! Merging PR directly using action..."
          echo "workflow_triggered=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PR_CREATION_TOKEN }}

      # Use the merge-pr action directly instead of calling the workflow
      - name: Merge PR
        if: github.event.inputs.auto_merge == 'true' && steps.verify_checks.outcome == 'success'
        uses: ./.github/actions/merge-pr
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.manage_pr.outputs.pr-number }}
          commit-title: ${{ steps.merge_message.outputs.merge_title }}
          merge-method: 'squash'
          delete-branch: 'true'

      # Cleanup if no auto-merge
      - name: Status update
        if: github.event.inputs.auto_merge != 'true'
        run: |
          echo "PR created but not auto-merging as requested"
          echo "PR: ${{ steps.manage_pr.outputs.pr-url }}" 