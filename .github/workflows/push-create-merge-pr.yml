# This workflow creates and merges PRs automatically.
# IMPORTANT BEHAVIOR NOTE:
# This workflow intentionally uses the latest commit message (git log -1) for status display.
# This works in conjunction with the Dry Run Pipeline which shows the original PR title,
# giving visibility to both the initial PR intent and current work status.
# DO NOT "fix" this behavior - it's a useful feature for tracking work progress.

name: Push Create and Merge PR

on:
  push:
    branches-ignore:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-pr:
    name: Create and Merge PR
    runs-on: ubuntu-latest
    steps:
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          fetch-depth: 0

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> "$GITHUB_ENV"
      
      - name: Extract commit details
        id: commit_details
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          # Extract PR title from commit message (first line)
          PR_TITLE=$(echo "$COMMIT_MSG" | head -n 1)
          
          # Extract semantic type (feat, fix, etc.)
          SEMANTIC_TYPE=$(echo "$PR_TITLE" | grep -oP '^(\w+)(?:\(.*\))?:' | sed 's/://g' || echo "")
          
          # Output these values for use in next steps
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "semantic_type=$SEMANTIC_TYPE" >> $GITHUB_OUTPUT

      - name: Create or Find PR
        id: manage_pr
        uses: ./.github/actions/pr-management
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          base-branch: main
          head-branch: ${{ github.ref_name }}
          title: ${{ steps.commit_details.outputs.pr_title }}
          body: |
            This PR was automatically created from branch `${{ github.ref_name }}`.
            
            Original commit message:
            ```
            ${{ steps.commit_details.outputs.commit_message }}
            ```
            
            ## Changes
            
            <!-- List of changes in this PR -->
            
            ## Checks
            
            - [ ] Passes all required checks
          auto-merge: false
          delete-branch: false
      
      - name: Wait for required checks
        uses: ./.github/actions/status-checks
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.manage_pr.outputs.pr-number }}
          min-checks: 3
          wait-for-checks: true
          timeout: 600
          workflow-name: "Push Create and Merge PR"

      - name: Additional Check Verification
        id: verify_checks
        shell: bash
        run: |
          # Get commit SHA for PR head
          PR_HEAD_SHA=$(gh pr view ${{ steps.manage_pr.outputs.pr-number }} --json headRefOid --jq .headRefOid)
          
          # Use the wait-checks script for more precise verification
          bash .github/scripts/branch/wait-checks.sh \
            --repo "${{ github.repository }}" \
            --sha "$PR_HEAD_SHA" \
            --workflow "Push Create and Merge PR" \
            --timeout 300 \
            --min-checks 3
        env:
          GH_TOKEN: ${{ secrets.PR_CREATION_TOKEN }}

      - name: Determine semantic merge message
        id: merge_message
        if: success()
        run: |
          # Get the commit message directly
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Extract PR title from commit message (first line)
          PR_TITLE=$(echo "$COMMIT_MSG" | head -n 1)
          
          # Extract semantic type (feat, fix, etc.)
          SEMANTIC_TYPE=$(echo "$PR_TITLE" | grep -oP '^(\w+)(?:\(.*\))?:' | sed 's/://g' || echo "")
          
          # Check if SEMANTIC_TYPE is set and not empty
          if [ -n "$SEMANTIC_TYPE" ]; then
            echo "Using existing semantic type: $SEMANTIC_TYPE"
            MERGE_MSG="$COMMIT_MSG"
          else
            # Default to fix: if no semantic type is detected
            echo "No semantic type detected, defaulting to fix:"
            MERGE_MSG="fix: $PR_TITLE"
          fi
          
          # Set first line as title
          MERGE_TITLE=$(echo "$MERGE_MSG" | head -n 1)
          
          # Output for next steps
          echo "merge_title=$MERGE_TITLE" >> $GITHUB_OUTPUT

      - name: Merge Pull Request
        if: success()
        uses: ./.github/actions/pr-management
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          base-branch: main
          head-branch: ${{ github.ref_name }}
          title: ${{ steps.merge_message.outputs.merge_title }}
          pr-number: ${{ steps.manage_pr.outputs.pr-number }}
          merge-method: squash
          delete-branch: true
          auto-merge: true 