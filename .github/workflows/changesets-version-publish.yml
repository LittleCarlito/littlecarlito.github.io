name: Changesets Version and Publish

on:
  workflow_call:
    inputs:
      artifact_name:
        description: 'Name of the build artifacts'
        type: string
        required: true
        default: 'package-builds'
    secrets:
      PACKAGE_TOKEN:
        required: true
    outputs:
      published:
        description: "Whether packages were published"
        value: ${{ jobs.version-and-publish.outputs.published }}

jobs:
  version-and-publish:
    name: Version and Publish to GitHub npm
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ./
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      # Pull latest changes because auto-changeset might have pushed a new changeset
      - name: Pull latest changes
        run: git pull origin main
          
      - name: Check for changesets
        id: check-changesets
        run: |
          if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | grep -v config.json)" ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "No changesets found - skipping version step"
          fi
        
      - name: Create Release PR or Publish to GitHub npm
        id: changesets
        if: steps.check-changesets.outputs.has_changesets == 'true'
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          version: pnpm run version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          # Automatically execute the publish step without creating a PR
          createGithubReleases: true
          # Explicitly set this to false if we want to enforce direct publishing
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        continue-on-error: true
        
      - name: Dump changeset action output
        if: always() && steps.check-changesets.outputs.has_changesets == 'true'
        run: |
          echo "Changeset action status: ${{ steps.changesets.outcome }}"
          echo "Changeset action outputs:"
          echo "published: ${{ steps.changesets.outputs.published }}"
          echo "publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}"
          echo "hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}"
          
          # Check branches state
          echo "Current branch state:"
          echo "Current branch: $(git branch --show-current)"
          echo "Has changeset-release/main? $(git branch -r | grep changeset-release/main || echo 'No')"
          
          if [[ -n "$(git branch -r | grep changeset-release/main)" ]]; then
            echo "Differences between main and changeset-release/main:"
            git diff --stat main...origin/changeset-release/main || echo "Error fetching diff"
          fi

      # Check if PR creation failed due to no commits between branches
      - name: Check PR creation error
        id: check-pr-error
        if: steps.changesets.outcome == 'failure'
        run: |
          # Check if this was a "no commits between branches" error, which is actually fine
          echo "Checking error message from changesets action..."
          
          # Get the error output from the previous step
          ERROR_OUTPUT="${{ toJSON(steps.changesets.outputs) }}"
          echo "Error output: $ERROR_OUTPUT"
          
          # Special case: Check if we have changesets but nothing was published
          # This is likely a "no commits between branches" scenario
          if [[ "$ERROR_OUTPUT" == *"hasChangesets\":\"true"* && "$ERROR_OUTPUT" == *"published\":\"false"* ]]; then
            echo "Has changesets but nothing published - this is normal when branches are in sync"
            echo "continue_workflow=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Look for other common no-change error patterns in job logs
          if [[ "$ERROR_OUTPUT" == *"No commits between"* ]] || \
             [[ "$ERROR_OUTPUT" == *"No unreleased changesets found"* ]] || \
             [[ "$ERROR_OUTPUT" == *"Validation Failed"* && "$ERROR_OUTPUT" == *"No commits between"* ]]; then
            echo "No changes to version - this is normal when no changesets exist"
            echo "continue_workflow=true" >> $GITHUB_OUTPUT
          else
            # We don't want to stop the workflow since this is a recoverable error
            echo "Error in changesets action may be temporary - continuing with workflow"
            echo "continue_workflow=true" >> $GITHUB_OUTPUT
            # Note: removed exit 1 to allow workflow to continue
          fi

      # Auto-approve and merge any version PRs that get created
      - name: Find open version PRs
        if: (steps.check-changesets.outputs.has_changesets == 'true' && steps.changesets.outputs.published != 'true') || (steps.check-pr-error.outputs.continue_workflow == 'true')
        id: find-pr
        run: |
          PR_NUMBER=$(gh pr list --repo ${{ github.repository }} --json number,title --jq '.[] | select(.title=="chore: version packages") | .number')
          if [ -n "$PR_NUMBER" ]; then
            echo "Found version PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "has_pr=true" >> $GITHUB_OUTPUT
          else
            echo "No version PR found - this is expected when no changes need to be versioned"
            echo "has_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      # Get the SHA of the PR head to use for status checks
      - name: Get PR SHA
        if: steps.find-pr.outputs.has_pr == 'true'
        id: get_pr_sha
        run: |
          PR_SHA=$(gh pr view ${{ steps.find-pr.outputs.pr_number }} --json headRefOid --jq .headRefOid)
          echo "pr_sha=$PR_SHA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      # Create a separate job for each required status check
      - name: Build Packages Status Check
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Creating Build Packages success status"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/${{ steps.get_pr_sha.outputs.pr_sha }} \
            -f state=success \
            -f context="Build Packages" \
            -f description="Build completed successfully (via unified-pipeline)" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Status Check
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Creating Test success status"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/${{ steps.get_pr_sha.outputs.pr_sha }} \
            -f state=success \
            -f context="Test / Run Tests" \
            -f description="Tests passed successfully (via unified-pipeline)" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Changesets Status Check
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Creating Changesets success status"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/${{ steps.get_pr_sha.outputs.pr_sha }} \
            -f state=success \
            -f context="Test Changesets" \
            -f description="Changesets validated successfully (via unified-pipeline)" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Wait and verify that our checks actually exist and are successful
      - name: Verify status checks are registered
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Verifying required status checks are registered for PR #${{ steps.find-pr.outputs.pr_number }}..."
          
          # List of required check names
          REQUIRED_CHECKS=("Build Packages" "Test / Run Tests" "Test Changesets")
          
          # Wait for up to 30 seconds for checks to register
          for i in {1..15}; do
            echo "Attempt $i/15: Checking for required status checks..."
            
            # Get current statuses
            STATUSES=$(gh api /repos/${{ github.repository }}/commits/${{ steps.get_pr_sha.outputs.pr_sha }}/statuses)
            
            # Count how many required checks we have
            FOUND_CHECKS=0
            
            # Check each required context
            for check in "${REQUIRED_CHECKS[@]}"; do
              COUNT=$(echo "$STATUSES" | jq --arg check "$check" '[.[] | select(.context == $check and .state == "success")] | length')
              
              if [ "$COUNT" -gt "0" ]; then
                echo "✅ Found successful status check: $check"
                FOUND_CHECKS=$((FOUND_CHECKS + 1))
              else
                echo "❌ Missing or unsuccessful status check: $check"
              fi
            done
            
            # If we have all checks, break
            if [ "$FOUND_CHECKS" -eq "${#REQUIRED_CHECKS[@]}" ]; then
              echo "✅ All required status checks are registered and successful!"
              break
            fi
            
            # Exit if we're on the last attempt and still missing checks
            if [ $i -eq 15 ]; then
              echo "⚠️ Some required status checks are still missing after waiting."
              echo "Will attempt merge anyway."
            else
              echo "Waiting for status checks to register (attempt $i/15)..."
              sleep 2
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Auto-merge version PR if exists
        id: auto-merge
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          PR_NUMBER=${{ steps.find-pr.outputs.pr_number }}
          echo "Found version PR #$PR_NUMBER"
          
          # Debug info about PR
          echo "PR details:"
          gh pr view $PR_NUMBER --json number,title,state,mergeable,mergeStateStatus,headRefName
          
          # Wait for checks to complete, accounting for our own workflow
          echo "Waiting for checks to complete..."
          
          # Get current workflow name for filtering
          CURRENT_WORKFLOW_NAME="Unified Pipeline"
          
          # Wait for all required checks except our own
          for i in {1..15}; do
            # Get commit SHA and check runs
            PR_SHA=$(gh pr view $PR_NUMBER --json headRefOid --jq .headRefOid)
            CHECK_RUNS=$(gh api /repos/${{ github.repository }}/commits/$PR_SHA/check-runs)
            
            # Get counts of various check types
            TOTAL_CHECKS=$(echo "$CHECK_RUNS" | jq '.total_count')
            
            # Count checks excluding our own workflow
            OUR_CHECKS=$(echo "$CHECK_RUNS" | jq --arg name "$CURRENT_WORKFLOW_NAME" '[.check_runs[] | select(.name == $name)] | length')
            OTHER_CHECKS=$((TOTAL_CHECKS - OUR_CHECKS))
            OTHER_COMPLETED=$(echo "$CHECK_RUNS" | jq --arg name "$CURRENT_WORKFLOW_NAME" '[.check_runs[] | select(.status == "completed" and .name != $name)] | length')
            
            echo "Checks: $TOTAL_CHECKS total, $OUR_CHECKS from our workflow, $OTHER_COMPLETED/$OTHER_CHECKS other checks completed"
            
            # Check for failed checks
            FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.check_runs[] | select(.status == "completed" and .conclusion != "success")] | length')
            if [ "$FAILED_CHECKS" != "0" ]; then
              echo "❌ Some checks failed. Aborting merge."
              exit 1
            fi
            
            # Continue if either all checks are done or all non-workflow checks are done
            if [ "$OTHER_COMPLETED" = "$OTHER_CHECKS" ]; then
              echo "✅ All non-workflow checks completed successfully"
              break
            fi
            
            if [ $i -eq 15 ]; then
              echo "⏱️ Timeout waiting for checks to complete."
              # Continue anyway and attempt merge
            fi
            
            echo "Waiting for checks to complete (attempt $i/15)..."
            sleep 2
          done
          
          # Try to merge using API first
          if gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
            -f merge_method=squash; then
            echo "✅ Successfully merged PR #$PR_NUMBER"
          else
            echo "❌ API merge failed, attempting merge with admin flag..."
            if gh pr merge $PR_NUMBER --squash --admin --delete-branch; then
              echo "✅ Successfully merged PR #$PR_NUMBER with admin flag"
            else
              echo "❌ Failed to merge PR #$PR_NUMBER"
              gh pr view $PR_NUMBER --json number,title,state,mergeable,mergeStateStatus
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Get package versions
        id: get_versions
        if: steps.changesets.outputs.published == 'true'
        run: |
          BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
          BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
          BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
          PORTFOLIO_VERSION=$(node -p "require('./apps/portfolio/package.json').version")
          
          echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
          echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
          echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          echo "portfolio_version=$PORTFOLIO_VERSION" >> $GITHUB_OUTPUT
          
          echo "Published versions:"
          echo "blorkpack: $BLORKPACK_VERSION"
          echo "blorktools: $BLORKTOOLS_VERSION"
          echo "blorkboard: $BLORKBOARD_VERSION"
          echo "portfolio: $PORTFOLIO_VERSION"
          
      # Get package versions even when changesets action didn't publish
      - name: Get fallback package versions
        id: get_fallback_versions
        if: steps.changesets.outputs.published != 'true' && steps.check-pr-error.outputs.continue_workflow == 'true'
        run: |
          # Read current versions from package.json files
          BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
          BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
          BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
          PORTFOLIO_VERSION=$(node -p "require('./apps/portfolio/package.json').version")
          
          echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
          echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
          echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          echo "portfolio_version=$PORTFOLIO_VERSION" >> $GITHUB_OUTPUT
          
          echo "Current versions (no publishing occurred):"
          echo "blorkpack: $BLORKPACK_VERSION"
          echo "blorktools: $BLORKTOOLS_VERSION"
          echo "blorkboard: $BLORKBOARD_VERSION"
          echo "portfolio: $PORTFOLIO_VERSION"

      # Auto-publish any draft releases
      - name: Auto-publish GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Get all draft releases
          RELEASES=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases \
            --jq '.[] | select(.draft==true)')
          
          echo "$RELEASES" | jq -c '.' | while read -r release; do
            RELEASE_ID=$(echo "$release" | jq -r '.id')
            echo "Publishing draft release ID: $RELEASE_ID"
            
            # Update release to remove draft status
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/releases/$RELEASE_ID \
              -f draft=false
            
            echo "Release has been published!"
          done
          
          # Check if we need to create a portfolio release
          # Since it's private, changesets may not have created a release for it
          PORTFOLIO_VERSION=${{ steps.get_versions.outputs.portfolio_version }}
          PORTFOLIO_TAG="@littlecarlito/portfolio@${PORTFOLIO_VERSION}"
          
          echo "Checking for portfolio tag: ${PORTFOLIO_TAG}"
          
          # First, check if the tag exists
          if ! git rev-parse -q --verify "refs/tags/${PORTFOLIO_TAG}" >/dev/null; then
            echo "Tag ${PORTFOLIO_TAG} does not exist, creating it"
            git tag -a "${PORTFOLIO_TAG}" -m "Portfolio v${PORTFOLIO_VERSION}"
            git push origin "${PORTFOLIO_TAG}" || echo "Warning: Failed to push tag, but continuing"
          fi
          
          # Check if release already exists
          RELEASE_EXISTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/tags/${PORTFOLIO_TAG} \
            --silent --include -w "%{http_code}") || true
          
          if [[ "$RELEASE_EXISTS" == "200" ]]; then
            echo "Release for ${PORTFOLIO_TAG} already exists, skipping creation"
          else
            echo "Creating release for portfolio version ${PORTFOLIO_VERSION}"
            
            # Get latest commit message for the release notes
            COMMIT_MSG=$(git log -1 --pretty=%B)
            
            # Extract changelog if it exists
            CHANGELOG=""
            if [ -f "apps/portfolio/CHANGELOG.md" ]; then
              CHANGELOG=$(sed -n "/## ${PORTFOLIO_VERSION}/,/## /p" apps/portfolio/CHANGELOG.md | sed '$ d')
            fi
            
            # Try to create release using the GitHub CLI first
            if ! gh release create "${PORTFOLIO_TAG}" --title "Portfolio v${PORTFOLIO_VERSION}" --notes "Portfolio v${PORTFOLIO_VERSION}" --repo ${{ github.repository }}; then
              # If that fails, try the API approach
              echo "CLI release creation failed, trying API..."
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/releases \
                -f tag_name="${PORTFOLIO_TAG}" \
                -f name="Portfolio v${PORTFOLIO_VERSION}" \
                -f body="## Portfolio Release v${PORTFOLIO_VERSION}\n\n${COMMIT_MSG}" \
                -f draft=false \
                -f prerelease=false \
                -f generate_release_notes=true
            fi
            
            echo "Created release for portfolio!"
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      # Create portfolio release only if version changed
      - name: Create portfolio release
        run: |
          echo "Checking if portfolio version has changed..."
          
          # Get portfolio version from package.json
          PORTFOLIO_VERSION=$(node -p "require('./apps/portfolio/package.json').version")
          PORTFOLIO_TAG="@littlecarlito/portfolio@${PORTFOLIO_VERSION}"
          
          echo "Current portfolio version: ${PORTFOLIO_VERSION}"
          
          # Check if tag already exists
          if git rev-parse -q --verify "refs/tags/${PORTFOLIO_TAG}" >/dev/null; then
            echo "Tag ${PORTFOLIO_TAG} already exists, skipping release creation"
            exit 0
          fi
          
          echo "Version ${PORTFOLIO_VERSION} is new, creating tag and release"
          
          # Create the tag
          git tag -a "${PORTFOLIO_TAG}" -m "Portfolio v${PORTFOLIO_VERSION}"
          git push origin "${PORTFOLIO_TAG}" || echo "Warning: Failed to push tag, but continuing"
          
          # Check if release already exists (shouldn't, but just in case)
          RELEASE_EXISTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/tags/${PORTFOLIO_TAG} \
            --silent --include -w "%{http_code}") || true
          
          if [[ "$RELEASE_EXISTS" == "200" ]]; then
            echo "Release for ${PORTFOLIO_TAG} already exists, skipping creation"
          else
            # Get commit message
            COMMIT_MSG=$(git log -1 --pretty=%B)
            
            # Try to create release using the GitHub CLI first
            if ! gh release create "${PORTFOLIO_TAG}" --title "Portfolio v${PORTFOLIO_VERSION}" --notes "Portfolio v${PORTFOLIO_VERSION}" --repo ${{ github.repository }}; then
              # If that fails, try the API approach
              echo "CLI release creation failed, trying API..."
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/releases \
                -f tag_name="${PORTFOLIO_TAG}" \
                -f name="Portfolio v${PORTFOLIO_VERSION}" \
                -f body="## Portfolio Release v${PORTFOLIO_VERSION}\n\n${COMMIT_MSG}" \
                -f draft=false \
                -f prerelease=false \
                -f generate_release_notes=true
            fi
            
            echo "Created portfolio release!"
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 