name: Semantic Release Job

on:
  workflow_call:
    inputs:
      dry_run:
        description: 'Whether to run semantic-release in dry-run mode'
        required: true
        type: boolean
        default: false
    secrets:
      PACKAGE_TOKEN:
        required: true
    outputs:
      blorkpack_version:
        description: "The new version of blorkpack package"
        value: ${{ jobs.semantic-release.outputs.blorkpack_version }}
      blorktools_version:
        description: "The new version of blorktools package"
        value: ${{ jobs.semantic-release.outputs.blorktools_version }}
      blorkpack_version_changed:
        description: "Whether blorkpack version changed"
        value: ${{ jobs.semantic-release.outputs.blorkpack_changed }}
      blorktools_version_changed:
        description: "Whether blorktools version changed"
        value: ${{ jobs.semantic-release.outputs.blorktools_changed }}

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      blorkpack_version: ${{ steps.blorkpack_release.outputs.new_version }}
      blorktools_version: ${{ steps.blorktools_release.outputs.new_version }}
      blorkpack_changed: ${{ steps.check_versions.outputs.blorkpack_changed }}
      blorktools_changed: ${{ steps.check_versions.outputs.blorktools_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}

      - name: Configure Git identity
        run: |
          git config --global user.name 'semantic-release-bot'
          git config --global user.email 'semantic-release-bot@martynus.net'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Validate package.json for semantic-release compatibility
        run: |
          echo "Validating package.json files for semantic-release compatibility"
          
          # Check for workspace protocol references
          echo "Checking for workspace protocol references that could cause issues:"
          if grep -q "workspace:" packages/*/package.json; then
            echo "WARNING: Found workspace: references that might cause issues with semantic-release"
            grep -n "workspace:" packages/*/package.json
          fi
          
          # Test pnpm version command for both packages to verify it would succeed
          echo "Testing version command for blorkpack:"
          cd packages/blorkpack
          # Create test npmrc file
          echo "shell-emulator=true" > .npmrc
          echo "save-workspace-protocol=false" >> .npmrc
          # Try the command that semantic-release will use
          pnpm version 0.0.0-test --no-git-tag-version || echo "FAILURE: Version command would fail in actual release"
          git checkout -- package.json
          cd ../..
          
          echo "Testing version command for blorktools:"
          cd packages/blorktools
          # Create test npmrc file
          echo "shell-emulator=true" > .npmrc
          echo "save-workspace-protocol=false" >> .npmrc
          # Try the command that semantic-release will use
          pnpm version 0.0.0-test --no-git-tag-version || echo "FAILURE: Version command would fail in actual release"
          git checkout -- package.json
          cd ../..
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Install semantic-release and plugins
        run: |
          pnpm add -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm
          echo "Installed semantic-release and plugins globally"
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: ./
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Get pre-release versions
        id: pre_versions
        run: |
          cd packages/blorkpack
          BLORKPACK_PRE=$(jq -r '.version' package.json)
          echo "blorkpack_pre=$BLORKPACK_PRE" >> $GITHUB_OUTPUT
          
          cd ../blorktools
          BLORKTOOLS_PRE=$(jq -r '.version' package.json)
          echo "blorktools_pre=$BLORKTOOLS_PRE" >> $GITHUB_OUTPUT
      
      - name: Run semantic-release for blorkpack
        id: blorkpack_release
        working-directory: packages/blorkpack
        run: |
          echo "Running semantic-release for blorkpack package"
          PRE_VERSION=$(jq -r '.version' package.json)
          
          # Ensure package name is correct
          jq '.name = "@littlecarlito/blorkpack"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Safer approach to handle workspace dependencies - process each dependency type separately
          # Initialize empty objects for any missing dependency sections
          jq '.dependencies = (.dependencies // {}) | .devDependencies = (.devDependencies // {}) | .peerDependencies = (.peerDependencies // {})' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Handle dependencies
          jq '.dependencies = (.dependencies | with_entries(if .value | startswith("workspace:") then .value = "*" else . end))' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Handle devDependencies
          jq '.devDependencies = (.devDependencies | with_entries(if .value | startswith("workspace:") then .value = "*" else . end))' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Handle peerDependencies
          jq '.peerDependencies = (.peerDependencies | with_entries(if .value | startswith("workspace:") then .value = "*" else . end))' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Validate JSON
          cat package.json | jq empty || { echo "ERROR: Invalid JSON after manipulation"; exit 1; }
          
          # Create local .releaserc.json for this package
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"scope": "no-release", "release": false},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"type": "build", "release": "patch"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/npm", {
                "npmPublish": false,
                "pkgRoot": ".",
                "npmPath": "pnpm"
              }],
              ["@semantic-release/git", {
                "assets": ["package.json", "CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              ["@semantic-release/github", {
                "successComment": "This ${issue.pull_request ? 'PR is included' : 'issue has been resolved'} in version ${nextRelease.version}",
                "failTitle": "The automated release failed",
                "failComment": "The automated release from this branch failed. Please analyze the logs."
              }]
            ]
          }
          EOF
          
          # Force a patch bump if there are no relevant commits - but only in real release mode
          if [ "$PRE_VERSION" = "0.12.0" ] && [ "${{ inputs.dry_run }}" != "true" ]; then
            echo "Forcing a patch bump since version has been 0.12.0 for a while"
            git config user.email "semantic-release-bot@martynus.net"
            git config user.name "semantic-release-bot"
            git commit --allow-empty -m "fix: force version bump for blorkpack"
          elif [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "In dry-run mode, skipping empty commit for version bump"
          fi
          
          # Run semantic-release
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            semantic-release --dry-run
          else
            semantic-release
          fi
          
          # Store the new version for later use
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Check if version changed
          if [ "$PRE_VERSION" != "$NEW_VERSION" ]; then
            echo "Version changed from $PRE_VERSION to $NEW_VERSION"
          else
            echo "Version remained at $NEW_VERSION"
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Run semantic-release for blorktools
        id: blorktools_release
        if: success() || failure()
        working-directory: packages/blorktools
        run: |
          echo "Running semantic-release for blorktools package"
          PRE_VERSION=$(jq -r '.version' package.json)
          
          # Ensure package name is correct
          jq '.name = "@littlecarlito/blorktools"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Create local .releaserc.json for this package
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"scope": "no-release", "release": false},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"type": "build", "release": "patch"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/npm", {
                "npmPublish": false,
                "pkgRoot": ".",
                "npmPath": "pnpm"
              }],
              ["@semantic-release/git", {
                "assets": ["package.json", "CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              ["@semantic-release/github", {
                "successComment": "This ${issue.pull_request ? 'PR is included' : 'issue has been resolved'} in version ${nextRelease.version}",
                "failTitle": "The automated release failed",
                "failComment": "The automated release from this branch failed. Please analyze the logs."
              }]
            ]
          }
          EOF
          
          # Force a patch bump if there are no relevant commits - but only in real release mode
          if [ "$PRE_VERSION" = "0.12.0" ] && [ "${{ inputs.dry_run }}" != "true" ]; then
            echo "Forcing a patch bump since version has been 0.12.0 for a while"
            git config user.email "semantic-release-bot@martynus.net"
            git config user.name "semantic-release-bot"
            git commit --allow-empty -m "fix: force version bump for blorktools"
          elif [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "In dry-run mode, skipping empty commit for version bump"
          fi
          
          # Run semantic-release
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            semantic-release --dry-run
          else
            semantic-release
          fi
          
          # Store the new version for later use
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Check if version changed
          if [ "$PRE_VERSION" != "$NEW_VERSION" ]; then
            echo "Version changed from $PRE_VERSION to $NEW_VERSION"
          else
            echo "Version remained at $NEW_VERSION"
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Check version changes
        id: check_versions
        run: |
          echo "blorkpack_changed=${{ steps.blorkpack_release.outputs.pre_version != steps.blorkpack_release.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "blorktools_changed=${{ steps.blorktools_release.outputs.pre_version != steps.blorktools_release.outputs.new_version }}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 