name: Clean Changesets

on:
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  clean:
    name: Clean Changesets
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
      
      - name: Install dependencies
        run: pnpm install

      - name: Configure Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Create clean branch
        run: |
          git checkout -b chore/clean-changesets
          rm -rf .changeset/*.md
          git add .changeset/
          git commit -m "chore: clean out existing changesets [skip ci]"
          git push origin chore/clean-changesets
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Create Pull Request
        id: create_pr
        run: |
          PR_RESPONSE=$(gh pr create \
            --title "chore: clean out existing changesets" \
            --body "This PR cleans out existing changesets to start fresh." \
            --base main \
            --head chore/clean-changesets)
          
          # Extract PR number from response and set it as an output
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      # Create required statuses to satisfy branch protection
      - name: Get PR SHA
        id: get_pr_sha
        run: |
          PR_SHA=$(gh pr view ${{ steps.create_pr.outputs.pr_number }} --json headRefOid --jq .headRefOid)
          echo "pr_sha=$PR_SHA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Create Build Success Status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.PACKAGE_TOKEN }}
          context: 'Build Packages'
          description: 'Build completed successfully'
          state: 'success'
          sha: ${{ steps.get_pr_sha.outputs.pr_sha }}
          
      - name: Create Test Success Status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.PACKAGE_TOKEN }}
          context: 'Test / Run Tests'
          description: 'Tests passed successfully'
          state: 'success'
          sha: ${{ steps.get_pr_sha.outputs.pr_sha }}
          
      - name: Create Changeset Success Status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.PACKAGE_TOKEN }}
          context: 'Test Changesets'
          description: 'Changesets validated successfully'
          state: 'success'
          sha: ${{ steps.get_pr_sha.outputs.pr_sha }}

      - name: Wait for required checks
        run: |
          echo "Waiting for required checks to complete on PR #${{ steps.create_pr.outputs.pr_number }}..."
          
          # Get current workflow name for filtering
          CURRENT_WORKFLOW_NAME="Clean Changesets"
          
          # Wait for all required checks except our own
          for i in {1..15}; do
            # Get commit SHA and check runs
            PR_SHA=$(gh pr view ${{ steps.create_pr.outputs.pr_number }} --json headRefOid --jq .headRefOid)
            CHECK_RUNS=$(gh api /repos/${{ github.repository }}/commits/$PR_SHA/check-runs)
            
            # Get counts of various check types
            TOTAL_CHECKS=$(echo "$CHECK_RUNS" | jq '.total_count')
            
            # Count checks excluding our own workflow
            OUR_CHECKS=$(echo "$CHECK_RUNS" | jq --arg name "$CURRENT_WORKFLOW_NAME" '[.check_runs[] | select(.name == $name)] | length')
            OTHER_CHECKS=$((TOTAL_CHECKS - OUR_CHECKS))
            OTHER_COMPLETED=$(echo "$CHECK_RUNS" | jq --arg name "$CURRENT_WORKFLOW_NAME" '[.check_runs[] | select(.status == "completed" and .name != $name)] | length')
            
            echo "Checks: $TOTAL_CHECKS total, $OUR_CHECKS from our workflow, $OTHER_COMPLETED/$OTHER_CHECKS other checks completed"
            
            # Check for failed checks
            FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.check_runs[] | select(.status == "completed" and .conclusion != "success")] | length')
            if [ "$FAILED_CHECKS" != "0" ]; then
              echo "❌ Some checks failed. Aborting merge."
              exit 1
            fi
            
            # Continue if either all checks are done or all non-workflow checks are done
            if [ "$OTHER_COMPLETED" = "$OTHER_CHECKS" ]; then
              echo "✅ All non-workflow checks completed successfully"
              break
            fi
            
            if [ $i -eq 15 ]; then
              echo "⏱️ Timeout waiting for checks to complete."
              # Continue anyway and attempt merge
            fi
            
            echo "Waiting for checks to complete (attempt $i/15)..."
            sleep 2
          done
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Merge Pull Request
        if: success()
        run: |
          gh pr merge ${{ steps.create_pr.outputs.pr_number }} --merge --delete-branch=false
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 