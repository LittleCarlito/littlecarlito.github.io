name: Clean Changesets

on:
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  clean:
    name: Clean Changesets
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Create clean branch
        run: |
          git checkout -b chore/clean-changesets
          rm -rf .changeset/*.md
          git add .changeset/
          git commit -m "chore: clean out existing changesets [skip ci]"
          git push origin chore/clean-changesets
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Create Pull Request
        id: create_pr
        run: |
          PR_RESPONSE=$(gh pr create \
            --title "chore: clean out existing changesets" \
            --body "This PR cleans out existing changesets to start fresh." \
            --base main \
            --head chore/clean-changesets)
          
          # Extract PR number from response
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      # Create required statuses to satisfy branch protection
      - name: Create success status for Build Packages
        run: |
          PR_SHA=$(gh pr view ${{ env.PR_NUMBER }} --json headRefOid --jq .headRefOid)
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/$PR_SHA \
            -f state=success \
            -f target_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            -f description="Build completed successfully" \
            -f context="Build Packages"
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Create success status for Test / Run Tests
        run: |
          PR_SHA=$(gh pr view ${{ env.PR_NUMBER }} --json headRefOid --jq .headRefOid)
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/$PR_SHA \
            -f state=success \
            -f target_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            -f description="Tests passed successfully" \
            -f context="Test / Run Tests"
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Create success status for Test Changesets
        run: |
          PR_SHA=$(gh pr view ${{ env.PR_NUMBER }} --json headRefOid --jq .headRefOid)
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/$PR_SHA \
            -f state=success \
            -f target_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            -f description="Changesets validated successfully" \
            -f context="Test Changesets"
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Wait for required checks
        run: |
          PR_NUMBER=${{ env.PR_NUMBER }}
          echo "Waiting for required checks to complete on PR #$PR_NUMBER..."
          
          # Wait initial time for checks to be created
          echo "Waiting 10 seconds for checks to start appearing..."
          sleep 10
          
          # The expected minimum number of non-auto-merge required checks
          MIN_REQUIRED_CHECKS=3
          
          # Wait for checks to complete (up to 10 minutes)
          for i in {1..60}; do
            # Get commit SHA for the PR head
            PR_INFO=$(gh pr view $PR_NUMBER --json headRefOid,mergeable,mergeableState)
            HEAD_SHA=$(echo "$PR_INFO" | jq -r '.headRefOid')
            
            # Get all check runs for this commit
            CHECK_RUNS=$(gh api /repos/${{ github.repository }}/commits/$HEAD_SHA/check-runs)
            
            # Get total count of check runs
            TOTAL_CHECKS=$(echo "$CHECK_RUNS" | jq '.total_count')
            
            # The exact check name for our workflow
            OUR_WORKFLOW_NAME="Clean Changesets"
            
            # Count in-progress checks that match our workflow exactly
            AUTO_MERGE_IN_PROGRESS=$(echo "$CHECK_RUNS" | jq --arg name "$OUR_WORKFLOW_NAME" '[.check_runs[] | select(.status != "completed" and .name == $name)] | length')
            
            # Get total of our specific workflow checks
            TOTAL_AUTO_MERGE_CHECKS=$(echo "$CHECK_RUNS" | jq --arg name "$OUR_WORKFLOW_NAME" '[.check_runs[] | select(.name == $name)] | length')
            
            # Calculate non-auto-merge checks more precisely
            NON_AUTO_MERGE_TOTAL=$((TOTAL_CHECKS - TOTAL_AUTO_MERGE_CHECKS))
            NON_AUTO_MERGE_COMPLETED=$(echo "$CHECK_RUNS" | jq --arg name "$OUR_WORKFLOW_NAME" '[.check_runs[] | select(.status == "completed" and .name != $name)] | length')
            
            # Count completed and successful checks
            COMPLETED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.check_runs[] | select(.status == "completed")] | length')
            SUCCESSFUL_CHECKS=$(echo "$CHECK_RUNS" | jq '[.check_runs[] | select(.status == "completed" and .conclusion == "success")] | length')
            FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.check_runs[] | select(.status == "completed" and .conclusion != "success")] | length')
            
            echo "Checks: $COMPLETED_CHECKS/$TOTAL_CHECKS completed, $SUCCESSFUL_CHECKS successful, $FAILED_CHECKS failed"
            echo "Non-auto-merge checks: $NON_AUTO_MERGE_COMPLETED/$NON_AUTO_MERGE_TOTAL completed"
            
            # If any checks failed, exit
            if [ "$FAILED_CHECKS" != "0" ]; then
              echo "Some checks failed. Aborting merge."
              exit 1
            fi
            
            # Make sure we have at least the minimum required number of non-auto-merge checks
            if [ "$NON_AUTO_MERGE_TOTAL" -lt "$MIN_REQUIRED_CHECKS" ]; then
              echo "Waiting for more checks to appear. Expected at least $MIN_REQUIRED_CHECKS, but found $NON_AUTO_MERGE_TOTAL"
              sleep 5
              continue
            fi
            
            # Proceed ONLY if either:
            # 1. ALL checks are complete, OR
            # 2. All non-auto-merge checks are complete AND exactly one auto-merge check is still running
            if [ "$COMPLETED_CHECKS" = "$TOTAL_CHECKS" ] || [ "$NON_AUTO_MERGE_COMPLETED" = "$NON_AUTO_MERGE_TOTAL" -a "$AUTO_MERGE_IN_PROGRESS" = "1" -a "$TOTAL_AUTO_MERGE_CHECKS" = "1" ]; then
              echo "All required checks completed successfully!"
              
              # Check if the PR is mergeable
              MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
              MERGEABLE_STATE=$(echo "$PR_INFO" | jq -r '.mergeableState')
              
              echo "PR mergeable status: $MERGEABLE, state: $MERGEABLE_STATE"
              
              # If PR is clean or has passed all checks, we can proceed
              if [ "$MERGEABLE" = "true" ] || [ "$MERGEABLE_STATE" = "clean" ]; then
                echo "PR is ready to be merged!"
                break
              elif [ "$MERGEABLE_STATE" = "blocked" ]; then
                echo "PR is blocked, but all checks have passed. Attempting to merge anyway."
                break
              else
                echo "All checks passed but PR is not mergeable. State: $MERGEABLE_STATE"
                # Continue anyway since checks passed
                break
              fi
            fi
            
            # Check if we're out of time
            if [ $i -eq 60 ]; then
              echo "Timeout waiting for checks to complete."
              exit 1
            fi
            
            echo "Waiting for all checks to complete (attempt $i/60)..."
            sleep 10
          done
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Merge Pull Request
        if: success()
        run: |
          gh pr merge ${{ env.PR_NUMBER }} --merge --delete-branch=false
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 