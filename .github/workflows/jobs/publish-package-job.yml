name: Publish Package Job

on:
  workflow_call:
    inputs:
      package_name:
        description: "Name of the package to publish (e.g., blorkpack or blorktools)"
        required: true
        type: string
      package_version:
        description: "Version of the package to publish"
        required: true
        type: string
      should_publish:
        description: "Whether the package should be published"
        required: false
        type: boolean
        default: true
    secrets:
      PACKAGE_TOKEN:
        required: true
    outputs:
      publish_success:
        description: "Whether the publish succeeded"
        value: ${{ jobs.publish.outputs.success }}
      package_published:
        description: "Whether the package was actually published"
        value: ${{ jobs.publish.outputs.published }}

jobs:
  publish:
    name: Publish ${{ inputs.package_name }} Package
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.publish.outputs.success }}
      published: ${{ steps.check_version.outputs.published }}
    # Skip if should_publish is false
    if: ${{ inputs.should_publish }}
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
        
      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Configure package for publishing
        working-directory: packages/${{ inputs.package_name }}
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/${{ inputs.package_name }}"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ inputs.package_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ inputs.package_version }}"
      
      - name: Build package
        working-directory: packages/${{ inputs.package_name }}
        run: |
          echo "Building ${{ inputs.package_name }} package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Check if version exists
        id: check_version
        working-directory: packages/${{ inputs.package_name }}
        run: |
          VERSION="${{ inputs.package_version }}"
          echo "Checking if version $VERSION already exists in registry..."
          
          # Try to view the package - if it succeeds with this exact version, it exists
          if npm view "@littlecarlito/${{ inputs.package_name }}@$VERSION" version --registry=https://npm.pkg.github.com/ &>/dev/null; then
            echo "Version $VERSION already exists, will skip publishing"
            echo "published=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION does not exist, will publish"
            echo "published=true" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Publish package to GitHub Packages
        id: publish
        if: steps.check_version.outputs.published == 'true'
        working-directory: packages/${{ inputs.package_name }}
        run: |
          echo "Publishing ${{ inputs.package_name }} version ${{ inputs.package_version }} to GitHub Packages"
          npm publish --access=public
          echo "success=true" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 