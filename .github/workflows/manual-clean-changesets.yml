name: Manual Clean and Generate Changesets

on:
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  clean-and-generate:
    name: Clean and Generate Changesets
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Setup environment
        id: setup
        run: |
          # Run the setup script and filter only properly formatted output lines 
          bash .github/scripts/maintenance/setup-environment.sh \
            --github-token "${{ secrets.GITHUB_TOKEN }}" \
            --node-version "20.x" \
            --pnpm-version "8.15.4" \
            --registry-url "https://npm.pkg.github.com" \
            --scope "@littlecarlito" 2>&1 | grep -E "^[a-zA-Z0-9_-]+=.+" >> $GITHUB_OUTPUT || true

      # Create a unique branch for new changesets
      - name: Create branch for changesets
        id: create_branch
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="chore/generate-changesets-$TIMESTAMP"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # Clear all unreleased changeset files
      - name: Clear unreleased changesets
        run: |
          echo "Cleaning all unreleased changeset files"
          rm -rf .changeset/*.md
          # Create README.md if it doesn't exist
          [ ! -f .changeset/README.md ] && echo "---\n# Changesets\n\nThis directory contains changeset files generated by the changeset tool." > .changeset/README.md
          
          # Commit the changes to clear changesets
          git add .changeset/
          git commit -m "chore: clear all unreleased changesets" || echo "No changes to commit"
      
      # Use our new action to generate precise changesets
      - name: Generate precise changesets
        id: generate_changesets
        uses: ./.github/actions/generate-precise-changesets
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          auto-changeset-prefix: 'auto-'
          force-generate: 'false'
      
      # Check if changesets were created
      - name: Check if changesets were created
        id: check_changesets
        run: |
          CHANGESET_COUNT=$(find .changeset -name "*.md" ! -name "README.md" ! -name "config.json" | wc -l)
          echo "changeset_count=$CHANGESET_COUNT" >> $GITHUB_OUTPUT
          
          # Check if there are actual changes to commit
          CHANGES=$(git status --porcelain .changeset/)
          
          echo "==== CHANGESET DEBUG INFO ===="
          echo "Changeset count: $CHANGESET_COUNT"
          if [ -n "$CHANGES" ]; then
            echo "Changes detected in .changeset directory:"
            echo "$CHANGES"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in .changeset directory"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          # List any changesets that exist
          if [ "$CHANGESET_COUNT" -gt "0" ]; then
            echo "Existing changesets:"
            find .changeset -name "*.md" ! -name "README.md" ! -name "config.json" | xargs cat
          fi
          echo "==== END CHANGESET DEBUG INFO ===="
      
      # Commit and push the generated changesets
      - name: Commit and push changesets
        id: commit_changesets
        if: steps.check_changesets.outputs.has_changes == 'true'
        run: |
          echo "Committing changes to .changeset directory"
          git add .changeset/
          git commit -m "chore: generate changesets for unreleased changes" || echo "No changes to commit"
          
          # Push the branch
          git push origin ${{ steps.create_branch.outputs.branch_name }}
          
          if [ $? -eq 0 ]; then
            echo "pushed_changes=true" >> $GITHUB_OUTPUT  
          else
            echo "pushed_changes=false" >> $GITHUB_OUTPUT
          fi
      
      # Create PR using the manage-pull-request action
      - name: Create PR
        id: create_pr
        if: steps.check_changesets.outputs.has_changes == 'true' && steps.commit_changesets.outputs.pushed_changes == 'true'
        uses: ./.github/actions/manage-pull-request
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          base-branch: main
          head-branch: ${{ steps.create_branch.outputs.branch_name }}
          title: 'chore: generate changesets for unreleased changes'
          body: 'This PR generates changesets for unreleased changes since the last release or tag for each package, then cleans up existing changesets to start fresh.'
      
      # Add status checks to PR for workflow compatibility
      - name: Add status checks
        if: steps.check_changesets.outputs.has_changes == 'true' && steps.commit_changesets.outputs.pushed_changes == 'true' && steps.create_pr.outputs.pr-number != ''
        run: |
          bash .github/scripts/branch/force-status.sh \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --repo "${{ github.repository }}" \
            --sha "${{ steps.create_pr.outputs.commit-sha }}" \
            --contexts '["Build Packages", "Test / Run Tests", "Test Changesets"]' \
            --descriptions '["Build completed successfully (via manual-clean-changesets)", "Tests passed successfully (via manual-clean-changesets)", "Changesets validated successfully (via manual-clean-changesets)"]'
      
      # Wait for checks to complete before merging
      - name: Wait for checks to complete
        if: steps.check_changesets.outputs.has_changes == 'true' && steps.commit_changesets.outputs.pushed_changes == 'true' && steps.create_pr.outputs.pr-number != ''
        run: |
          bash .github/scripts/branch/wait-checks.sh \
            --repo "${{ github.repository }}" \
            --sha "${{ steps.create_pr.outputs.commit-sha }}" \
            --workflow "Manual Clean and Generate Changesets" \
            --timeout "300" \
            --min-checks "3"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Merge the PR using the merge-pull-request action
      - name: Merge pull request
        if: steps.check_changesets.outputs.has_changes == 'true' && steps.commit_changesets.outputs.pushed_changes == 'true' && steps.create_pr.outputs.pr-number != ''
        uses: ./.github/actions/merge-pull-request
        with:
          github-token: ${{ secrets.PACKAGE_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.create_pr.outputs.pr-number }}
          merge-method: 'squash'
          delete-branch: 'true'
          auto-merge: 'true'
      
      # Output status message for completion
      - name: Status check
        run: |
          if [ "${{ steps.check_changesets.outputs.has_changes }}" == "true" ] && [ "${{ steps.commit_changesets.outputs.pushed_changes }}" == "true" ] && [ -n "${{ steps.create_pr.outputs.pr-number }}" ]; then
            echo "Successfully generated changesets and created PR #${{ steps.create_pr.outputs.pr-number }}"
            echo "After merging, main-pipeline.yml will run and publish packages with direct publishing."
          else
            if [ "${{ steps.check_changesets.outputs.has_changes }}" != "true" ]; then
              echo "No changes to commit: No new changesets were needed or could be created."
            elif [ "${{ steps.commit_changesets.outputs.pushed_changes }}" != "true" ]; then
              echo "Failed to push changes: Changes were detected but could not be committed."
            else
              echo "Failed to create PR: Changes were committed but PR creation failed."
            fi
            echo "No action was needed or the process could not complete."
          fi
          
      # Report failure if the workflow fails
      - name: Report failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'report-results.yml',
              ref: 'main',
              inputs: {
                result: 'failure',
                workflow_name: 'Manual Clean and Generate Changesets',
                summary: 'The manual clean and generate changesets workflow failed'
              }
            }); 