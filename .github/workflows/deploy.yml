name: Deploy to GitHub Pages

on:
  workflow_run:
    workflows: ["Publish Package to GitHub Packages"]
    types:
      - completed

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: read

jobs:
  build-and-deploy:
    name: Build and Deploy to GitHub Pages
    runs-on: ubuntu-latest
    # Only run this job if the Package Publishing workflow completed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          # Disable caching since lock files aren't available
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Get Latest package version
        id: get_version
        run: |
          echo "LATEST_VERSION=$(npm view @littlecarlito/blorkpack version --registry=https://npm.pkg.github.com/)" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure package for production deployment
        run: |
          # Update dependency to use the GitHub package with latest version
          jq --arg version "${{ steps.get_version.outputs.LATEST_VERSION }}" '.dependencies."@littlecarlito/blorkpack" = "@littlecarlito/blorkpack@" + $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Add a resolution to ensure the correct version is used
          jq --arg version "${{ steps.get_version.outputs.LATEST_VERSION }}" '.resolutions."@littlecarlito/blorkpack" = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Remove tests directory to avoid build issues
          rm -rf tests/
          
          # Create .npmrc for authentication
          echo "@littlecarlito:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGE_TOKEN }}" >> .npmrc
          
          # Add debug output
          echo "Updated package.json:"
          cat package.json
          
      - name: Install Production Dependencies
        run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Ensure blorkpack package is built and linked
        run: |
          echo "Building and linking blorkpack for local use..."
          cd packages/blorkpack
          npm install
          npm run build
          cd ../..
          ls -la packages/blorkpack/dist
          
          # Update vite.config.js to ensure it can find blorkpack
          cat > vite.config.js << 'EOL'
          import { defineConfig } from 'vite'
          import path from 'path'
          import fs from 'fs'

          export default defineConfig({
            base: '/threejs_site/',
            resolve: {
              alias: {
                '@littlecarlito/blorkpack': path.resolve(__dirname, 'packages/blorkpack/dist/index.js')
              }
            },
            optimizeDeps: {
              include: ['@littlecarlito/blorkpack']
            },
            build: {
              rollupOptions: {
                output: {
                  manualChunks: {
                    'three-core': ['three'],
                    'three-addons': [
                      'three/examples/jsm/controls/OrbitControls',
                      'three/examples/jsm/Addons.js',
                      'three/examples/jsm/libs/tween.module.js'
                    ]
                  }
                }
              }
            }
          })
          EOL
          
          echo "Updated vite.config.js:"
          cat vite.config.js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Build Production Bundle
        run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Verify no source files in dist
        run: |
          echo "Verifying that no source files are included in the dist directory..."
          if [ -d "dist/packages" ]; then
            echo "ERROR: packages directory found in dist folder!"
            echo "Removing packages directory from dist to prevent source code deployment"
            rm -rf dist/packages
          else
            echo "✅ No packages directory found in dist. Good!"
          fi
          
          # Double check for any source code files
          SOURCE_FILES=$(find dist -name "*.ts" -o -name "*.tsx" -o -name "*.js.map" | grep -v "node_modules" || true)
          if [ ! -z "$SOURCE_FILES" ]; then
            echo "WARNING: Source files found in dist folder. Consider reviewing your build process."
            echo "$SOURCE_FILES"
          else
            echo "✅ No source code files found in dist."
          fi
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

      - name: Output Deployment Information
        run: |
          echo "✨ Deployed successfully!"
          echo "🌐 Site is live at: https://littlecarlito.github.io/threejs_site/" 