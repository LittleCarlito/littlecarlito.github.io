name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release (all, blorkpack, blorktools, blorkboard)'
        required: true
        default: 'all'

# Add concurrency group to prevent conflicts with other workflows
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build packages
        run: pnpm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: packages
        
      - name: Run tests
        run: pnpm test

  create-release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: packages
          
      - name: Create changeset based on selected package
        if: ${{ github.event.inputs.package != 'all' }}
        run: |
          PACKAGE="${{ github.event.inputs.package }}"
          
          mkdir -p .changeset
          
          # Generate a random ID for the changeset
          CHANGESET_ID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
          
          # Create a changeset file for the specific package
          if [ "$PACKAGE" = "blorkpack" ]; then
            echo "---" > .changeset/$CHANGESET_ID.md
            echo '"@littlecarlito/blorkpack": patch' >> .changeset/$CHANGESET_ID.md
            echo "---" >> .changeset/$CHANGESET_ID.md
            echo "" >> .changeset/$CHANGESET_ID.md
            echo "Release for blorkpack" >> .changeset/$CHANGESET_ID.md
          elif [ "$PACKAGE" = "blorktools" ]; then
            echo "---" > .changeset/$CHANGESET_ID.md
            echo '"@littlecarlito/blorktools": patch' >> .changeset/$CHANGESET_ID.md
            echo "---" >> .changeset/$CHANGESET_ID.md
            echo "" >> .changeset/$CHANGESET_ID.md
            echo "Release for blorktools" >> .changeset/$CHANGESET_ID.md
          elif [ "$PACKAGE" = "blorkboard" ]; then
            echo "---" > .changeset/$CHANGESET_ID.md
            echo '"@littlecarlito/blorkboard": patch' >> .changeset/$CHANGESET_ID.md
            echo "---" >> .changeset/$CHANGESET_ID.md
            echo "" >> .changeset/$CHANGESET_ID.md
            echo "Release for blorkboard" >> .changeset/$CHANGESET_ID.md
          fi
          
          echo "Created changeset for $PACKAGE"
          cat .changeset/$CHANGESET_ID.md
          
      - name: Check for changesets
        id: check-changesets
        run: |
          if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | grep -v config.json)" ]; then
            echo "Changesets found, will proceed with versioning"
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "No changesets found, skipping version updates"
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Create Release with Changesets
        id: changesets
        if: steps.check-changesets.outputs.has_changesets == 'true'
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          version: pnpm run version
          commit: 'chore: version packages'
          title: 'chore: version packages'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Get package versions
        id: get_versions
        if: steps.changesets.outputs.published == 'true'
        run: |
          BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
          BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
          BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
          
          echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
          echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
          echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          
          echo "Published versions:"
          echo "blorkpack: $BLORKPACK_VERSION"
          echo "blorktools: $BLORKTOOLS_VERSION"
          echo "blorkboard: $BLORKBOARD_VERSION"
          
      # New step to auto-publish the GitHub releases
      - name: Auto-publish GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Get the latest created tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          
          # Use GitHub API to list draft releases and publish them
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/releases")
          
          # Find draft releases and publish them
          echo "$RELEASES" | jq -c '.[] | select(.draft==true)' | while read -r release; do
            RELEASE_ID=$(echo "$release" | jq -r '.id')
            echo "Publishing draft release ID: $RELEASE_ID"
            
            # Update the release to remove draft status
            curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
              -d '{"draft": false}'
            
            echo "Release has been published!"
          done

# Remove the GitHub Pages deployment job since it's handled by the unified pipeline 