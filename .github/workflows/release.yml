name: Release

on:
  # This is the primary workflow triggered on push to main
  push:
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:

jobs:
  release:
    name: Analyze Commits and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      blorkpack_version: ${{ steps.blorkpack_release.outputs.new_version }}
      blorktools_version: ${{ steps.blorktools_release.outputs.new_version }}
      version_metadata: ${{ steps.create_version_metadata.outputs.metadata_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}

      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm
          echo "Installed semantic-release and plugins globally"
      
      - name: Get pre-release versions
        id: pre_versions
        run: |
          cd packages/blorkpack
          BLORKPACK_PRE=$(jq -r '.version' package.json)
          echo "blorkpack_pre=$BLORKPACK_PRE" >> $GITHUB_OUTPUT
          
          cd ../blorktools
          BLORKTOOLS_PRE=$(jq -r '.version' package.json)
          echo "blorktools_pre=$BLORKTOOLS_PRE" >> $GITHUB_OUTPUT
      
      - name: Run semantic-release for blorkpack
        id: blorkpack_release
        working-directory: packages/blorkpack
        run: |
          echo "Running semantic-release for blorkpack package"
          PRE_VERSION=$(jq -r '.version' package.json)
          
          # Ensure package name is correct
          jq '.name = "@littlecarlito/blorkpack"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Debug: Show current commits
          echo "Recent commits that might trigger version changes:"
          git log -n 5 --pretty=format:"%h %s" -- .
          
          # Create local .releaserc.json for this package
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"scope": "no-release", "release": false},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"type": "build", "release": "patch"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/npm", {
                "npmPublish": false
              }],
              ["@semantic-release/git", {
                "assets": ["package.json", "CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              "@semantic-release/github"
            ]
          }
          EOF
          
          echo "Created local .releaserc.json:"
          cat .releaserc.json
          
          # Force a patch bump if there are no relevant commits
          # Add a dummy fix commit if there have been no release-worthy commits
          if [ "$PRE_VERSION" = "0.12.0" ]; then
            echo "Forcing a patch bump since version has been 0.12.0 for a while"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git config user.name "github-actions[bot]"
            git commit --allow-empty -m "fix: force version bump for blorkpack"
          fi
          
          # Run semantic-release to determine version and update package.json
          echo "Running semantic-release in dry-run mode first to see what it would do"
          pnpm semantic-release --dry-run || echo "semantic-release dry run completed"
          
          echo "Running actual semantic-release"
          pnpm semantic-release --debug || echo "semantic-release process completed"
          
          # Get the new version post-semantic-release
          NEW_VERSION=$(jq -r '.version' package.json)
          
          # Output version info for downstream workflows
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Log version change
          if [ "$PRE_VERSION" != "$NEW_VERSION" ]; then
            echo "Version updated: $PRE_VERSION â†’ $NEW_VERSION"
            
            # Determine likely tag name based on convention
            TAG_NAME="v$NEW_VERSION"
            echo "New version tag should be: $TAG_NAME"
            
            # Create and push the tag regardless of whether it exists locally
            cd ../../
            echo "Creating and pushing tag $TAG_NAME for blorkpack..."
            
            # Set the remote URL with authentication
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
            
            # Check if tag exists on remote
            if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
              echo "Creating new tag: $TAG_NAME"
              git tag -a "$TAG_NAME" -m "Release $TAG_NAME for blorkpack"
              echo "Pushing new tag: $TAG_NAME"
              git push origin refs/tags/$TAG_NAME
            else
              echo "Tag already exists on remote: $TAG_NAME"
            fi
            
            cd packages/blorkpack
          else
            echo "Version unchanged: $NEW_VERSION"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Run semantic-release for blorktools
        id: blorktools_release
        working-directory: packages/blorktools
        run: |
          echo "Running semantic-release for blorktools package"
          PRE_VERSION=$(jq -r '.version' package.json)
          
          # Ensure package name is correct
          jq '.name = "@littlecarlito/blorktools"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Debug: Show current commits
          echo "Recent commits that might trigger version changes:"
          git log -n 5 --pretty=format:"%h %s" -- .
          
          # Create local .releaserc.json for this package
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"scope": "no-release", "release": false},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"type": "build", "release": "patch"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/npm", {
                "npmPublish": false
              }],
              ["@semantic-release/git", {
                "assets": ["package.json", "CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              "@semantic-release/github"
            ]
          }
          EOF
          
          echo "Created local .releaserc.json:"
          cat .releaserc.json
          
          # Force a patch bump if there are no relevant commits
          # Add a dummy fix commit if there have been no release-worthy commits
          echo "Forcing a patch bump for blorktools"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git commit --allow-empty -m "fix: force version bump for blorktools"
          
          # Run semantic-release to determine version and update package.json
          echo "Running semantic-release in dry-run mode first to see what it would do"
          pnpm semantic-release --dry-run || echo "semantic-release dry run completed"
          
          echo "Running actual semantic-release"
          pnpm semantic-release --debug || echo "semantic-release process completed"
          
          # Get the new version post-semantic-release
          NEW_VERSION=$(jq -r '.version' package.json)
          
          # Output version info for downstream workflows
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Log version change
          if [ "$PRE_VERSION" != "$NEW_VERSION" ]; then
            echo "Version updated: $PRE_VERSION â†’ $NEW_VERSION"
            
            # Determine likely tag name based on convention
            TAG_NAME="v$NEW_VERSION"
            echo "New version tag should be: $TAG_NAME"
            
            # Create and push the tag regardless of whether it exists locally
            cd ../../
            echo "Creating and pushing tag $TAG_NAME for blorktools..."
            
            # Set the remote URL with authentication
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
            
            # Check if tag exists on remote
            if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
              echo "Creating new tag: $TAG_NAME"
              git tag -a "$TAG_NAME" -m "Release $TAG_NAME for blorktools"
              echo "Pushing new tag: $TAG_NAME"
              git push origin refs/tags/$TAG_NAME
            else
              echo "Tag already exists on remote: $TAG_NAME"
            fi
            
            cd packages/blorktools
          else
            echo "Version unchanged: $NEW_VERSION"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Create version metadata
        id: create_version_metadata
        run: |
          echo "Creating version metadata file..."
          mkdir -p artifacts
          cat > artifacts/version-metadata.json << EOF
          {
            "blorkpack": {
              "pre_version": "${{ steps.pre_versions.outputs.blorkpack_pre }}",
              "new_version": "${{ steps.blorkpack_release.outputs.new_version }}"
            },
            "blorktools": {
              "pre_version": "${{ steps.pre_versions.outputs.blorktools_pre }}",
              "new_version": "${{ steps.blorktools_release.outputs.new_version }}"
            },
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "run_id": "${{ github.run_id }}"
          }
          EOF
          
          echo "Version metadata:"
          cat artifacts/version-metadata.json
          echo "metadata_created=true" >> $GITHUB_OUTPUT
      
      - name: Upload version metadata
        uses: actions/upload-artifact@v4
        with:
          name: version-metadata
          path: artifacts/version-metadata.json
          retention-days: 5
          if-no-files-found: error
          
      - name: Push tags to GitHub
        run: |
          echo "Pushing tags to GitHub repository..."
          
          # List local tags first
          echo "Local tags:"
          git tag -l
          
          # List remote tags
          echo "Remote tags:"
          git ls-remote --tags origin
          
          # Set the remote URL with authentication
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          
          # Find new tags by comparing local and remote tags
          for TAG in $(git tag -l); do
            # Check if tag exists on remote
            if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
              echo "Pushing new tag: $TAG"
              git push origin refs/tags/$TAG
            else
              echo "Tag already exists on remote: $TAG"
            fi
          done
          
          echo "Tag pushing completed"
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 