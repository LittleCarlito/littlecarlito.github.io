name: Release

on:
  # This is the primary workflow triggered on push to main
  push:
    branches:
      - main

jobs:
  update-lock-files:
    name: Update Package Lock Files
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}

      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Debug - list existing lock files
        run: |
          echo "Checking for existing lock files:"
          find . -name "package-lock.json" || echo "No lock files found"

      - name: Remove existing lock files if any
        run: |
          echo "Removing any existing lock files to force recreation"
          find . -name "package-lock.json" -delete || echo "No lock files to delete"

      - name: Create blorkpack lock file
        run: |
          cd packages/blorkpack
          echo "Creating lock file for blorkpack..."
          # Force regular npm install to generate lock file
          npm install
          ls -la package-lock.json || echo "No package-lock.json created"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Create blorktools lock file
        run: |
          cd packages/blorktools
          echo "Creating lock file for blorktools..."
          # Force regular npm install to generate lock file
          npm install
          ls -la package-lock.json || echo "No package-lock.json created"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Create root project lock file
        run: |
          echo "Creating lock file for root project..."
          # Force regular npm install to generate lock file
          npm install
          ls -la package-lock.json || echo "No package-lock.json created"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Check for lock file changes
        id: check_changes
        run: |
          echo "Checking for changes in lock files..."
          git status --porcelain
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected!"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected."
          fi

      - name: Commit and push lock file changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "Committing lock file changes..."
          git add **/package-lock.json package-lock.json || true
          git status --porcelain
          git commit -m "chore: update package-lock.json files [skip ci]" || echo "No changes to commit"
          git pull --rebase origin main || echo "Failed to pull, but continuing"
          git push && echo "Successfully pushed changes" || echo "Failed to push changes, but continuing workflow"
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Debug - Verify lock files existence
        run: |
          echo "Verifying lock files existence after commit:"
          find . -name "package-lock.json" || echo "No lock files found"
          
      - name: Check if lock files exist
        id: check_lockfiles
        run: |
          if [[ -f "packages/blorkpack/package-lock.json" && -f "packages/blorktools/package-lock.json" && -f "package-lock.json" ]]; then
            echo "lockfiles_exist=true" >> $GITHUB_OUTPUT
            echo "All lock files exist!"
          else
            echo "lockfiles_exist=false" >> $GITHUB_OUTPUT
            echo "Not all lock files exist."
          fi

  release:
    name: Analyze Commits and Release
    needs: update-lock-files
    if: ${{ needs.update-lock-files.outputs.changes == 'false' || needs.update-lock-files.result == 'skipped' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      blorkpack_version: ${{ steps.blorkpack_release.outputs.new_version }}
      blorktools_version: ${{ steps.blorktools_release.outputs.new_version }}
      version_metadata: ${{ steps.create_version_metadata.outputs.metadata_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm
          echo "Installed semantic-release and plugins globally"
      
      - name: Get pre-release versions
        id: pre_versions
        run: |
          cd packages/blorkpack
          BLORKPACK_PRE=$(jq -r '.version' package.json)
          echo "blorkpack_pre=$BLORKPACK_PRE" >> $GITHUB_OUTPUT
          
          cd ../blorktools
          BLORKTOOLS_PRE=$(jq -r '.version' package.json)
          echo "blorktools_pre=$BLORKTOOLS_PRE" >> $GITHUB_OUTPUT
      
      - name: Run semantic-release for blorkpack
        id: blorkpack_release
        working-directory: packages/blorkpack
        run: |
          echo "Running semantic-release for blorkpack package"
          PRE_VERSION=$(jq -r '.version' package.json)
          
          # Ensure package name is correct
          jq '.name = "@littlecarlito/blorkpack"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Run semantic-release to determine version and update package.json
          npx semantic-release || echo "semantic-release process completed"
          
          # Get the new version post-semantic-release
          NEW_VERSION=$(jq -r '.version' package.json)
          
          # Output version info for downstream workflows
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Log version change
          if [ "$PRE_VERSION" != "$NEW_VERSION" ]; then
            echo "Version updated: $PRE_VERSION → $NEW_VERSION"
          else
            echo "Version unchanged: $NEW_VERSION"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Run semantic-release for blorktools
        id: blorktools_release
        working-directory: packages/blorktools
        run: |
          echo "Running semantic-release for blorktools package"
          PRE_VERSION=$(jq -r '.version' package.json)
          
          # Ensure package name is correct
          jq '.name = "@littlecarlito/blorktools"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Run semantic-release to determine version and update package.json
          npx semantic-release || echo "semantic-release process completed"
          
          # Get the new version post-semantic-release
          NEW_VERSION=$(jq -r '.version' package.json)
          
          # Output version info for downstream workflows
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Log version change
          if [ "$PRE_VERSION" != "$NEW_VERSION" ]; then
            echo "Version updated: $PRE_VERSION → $NEW_VERSION"
          else
            echo "Version unchanged: $NEW_VERSION"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Create version metadata
        id: create_version_metadata
        run: |
          echo "Creating version metadata file..."
          mkdir -p artifacts
          cat > artifacts/version-metadata.json << EOF
          {
            "blorkpack": {
              "pre_version": "${{ steps.pre_versions.outputs.blorkpack_pre }}",
              "new_version": "${{ steps.blorkpack_release.outputs.new_version }}"
            },
            "blorktools": {
              "pre_version": "${{ steps.pre_versions.outputs.blorktools_pre }}",
              "new_version": "${{ steps.blorktools_release.outputs.new_version }}"
            },
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "run_id": "${{ github.run_id }}"
          }
          EOF
          
          echo "Version metadata:"
          cat artifacts/version-metadata.json
          echo "metadata_created=true" >> $GITHUB_OUTPUT
      
      - name: Upload version metadata
        uses: actions/upload-artifact@v3
        with:
          name: version-metadata
          path: artifacts/version-metadata.json
          retention-days: 5
          if-no-files-found: error 