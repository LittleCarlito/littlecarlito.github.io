name: Release

on:
  # This is the primary workflow triggered on push to main
  push:
    branches:
      - main

jobs:
  update-lock-files:
    name: Update Package Lock Files
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}

      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Create blorkpack lock file
        run: |
          cd packages/blorkpack
          # Force regular npm install to generate lock file
          npm install --no-package-lock
          npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Create blorktools lock file
        run: |
          cd packages/blorktools
          # Force regular npm install to generate lock file
          npm install --no-package-lock
          npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Create root project lock file
        run: |
          # Force regular npm install to generate lock file
          npm install --no-package-lock
          npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Check for lock file changes
        id: check_changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push lock file changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git add */*/package-lock.json */package-lock.json package-lock.json || true
          git commit -m "chore: update package-lock.json files [skip ci]" || true
          git pull --rebase origin main || true
          git push || echo "Failed to push changes, but continuing workflow"
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Check if lock files exist
        id: check_lockfiles
        run: |
          if [[ -f "packages/blorkpack/package-lock.json" && -f "packages/blorktools/package-lock.json" && -f "package-lock.json" ]]; then
            echo "lockfiles_exist=true" >> $GITHUB_OUTPUT
          else
            echo "lockfiles_exist=false" >> $GITHUB_OUTPUT
          fi

  release:
    name: Create Semantic Release
    runs-on: ubuntu-latest
    needs: update-lock-files
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          ref: main

      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'

      - name: Pull latest changes from remote
        run: |
          git pull origin main
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Install project dependencies
        run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Install and build blorkpack
        run: |
          cd packages/blorkpack
          npm install
          npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      # Capture blorkpack version before release
      - name: Get blorkpack original version
        id: blorkpack_pre_version
        run: |
          cd packages/blorkpack
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Create semantic release for blorkpack
        id: blorkpack_release
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        run: |
          cd packages/blorkpack
          npx semantic-release --extends=./.releaserc.json
          # Store the new version to be used by the publish workflow
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
          # No need to copy package.json since we're already in the right directory

      - name: Install and build blorktools
        run: |
          cd packages/blorktools
          npm install
          npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      # Capture blorktools version before release
      - name: Get blorktools original version
        id: blorktools_pre_version
        run: |
          cd packages/blorktools
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Create semantic release for blorktools
        id: blorktools_release
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        run: |
          cd packages/blorktools
          npx semantic-release --extends=./.releaserc.json
          # Store the new version to be used by the publish workflow
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
          # No need to copy package.json since we're already in the right directory

      - name: Create semantic release for main project
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        run: npx semantic-release

      # Create version metadata file that will be passed to the publish workflow
      - name: Create version metadata
        run: |
          echo '{
            "blorkpack": {
              "pre_version": "${{ steps.blorkpack_pre_version.outputs.version }}",
              "new_version": "${{ steps.blorkpack_release.outputs.version }}"
            },
            "blorktools": {
              "pre_version": "${{ steps.blorktools_pre_version.outputs.version }}",
              "new_version": "${{ steps.blorktools_release.outputs.version }}"
            }
          }' > version-metadata.json
          cat version-metadata.json

      # Upload the version metadata as an artifact
      - name: Upload version metadata
        uses: actions/upload-artifact@v4
        with:
          name: version-metadata
          path: version-metadata.json
          retention-days: 1 