# This workflow runs tests and checks for PRs.
# IMPORTANT BEHAVIOR NOTE:
# This workflow intentionally displays using the original PR title (first commit message).
# This works in conjunction with the Auto PR workflow which shows the latest commit message,
# giving visibility to both the initial PR intent and current work status.
# DO NOT "fix" this behavior - it's a useful feature for tracking work progress.

name: PR Dry Run

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  workflow_dispatch:

# Define the same artifact naming strategy as unified-pipeline.yml
env:
  BUILD_ARTIFACT_NAME: build-artifacts-${{ github.run_id }}
  PACKAGES_ARTIFACT_NAME: package-builds-${{ github.run_id }}

jobs:
  # Add workflow validation job as the first step
  validate-workflow:
    name: Validate Workflow Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run workflow alignment validation
        run: |
          echo "🔍 Validating workflow alignment between PR workflow and main pipeline..."
          chmod +x .github/scripts/pr/validate-workflow-alignment.sh
          ./.github/scripts/pr/validate-workflow-alignment.sh

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: validate-workflow
    outputs:
      build_artifact_name: ${{ env.BUILD_ARTIFACT_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      # Add workflow validation step to ensure alignment with unified-pipeline.yml
      - name: Verify workflow alignment with main pipeline
        run: |
          echo "Verifying workflow alignment with main pipeline..."
          # Extract artifact naming and structure from unified-pipeline.yml
          MAIN_ARTIFACT_NAME=$(grep -A 2 "BUILD_ARTIFACT_NAME:" .github/workflows/unified-pipeline.yml | grep -v "#" | head -1 | awk -F: '{print $2}' | xargs)
          PR_ARTIFACT_NAME="${{ env.BUILD_ARTIFACT_NAME }}"
          
          echo "Main pipeline artifact naming: $MAIN_ARTIFACT_NAME"
          echo "PR pipeline artifact naming: $PR_ARTIFACT_NAME"
          
          # Check that we have job output structure matching the main pipeline
          JOB_OUTPUT_MAIN=$(grep -A 2 "outputs:" .github/workflows/unified-pipeline.yml | grep "build_artifact_name:" | head -1)
          JOB_OUTPUT_PR="build_artifact_name: ${{ env.BUILD_ARTIFACT_NAME }}"
          
          echo "Main pipeline job output structure: $JOB_OUTPUT_MAIN"
          echo "PR pipeline job output structure: $JOB_OUTPUT_PR"
          
          echo "✅ Workflow validation complete - artifact naming structure verified"
          
      - name: Build packages
        uses: ./.github/actions/build-and-test
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-command: 'pnpm run build'
          test-command: 'echo "Tests will run in separate job"'
          artifact-name: ${{ env.BUILD_ARTIFACT_NAME }}
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: packages
          if-no-files-found: error
          
      - name: Validate build artifacts
        run: |
          echo "Validating build artifacts..."
          # Check for dist directories
          DIST_DIRS=$(find packages -name "dist" -type d | wc -l)
          if [ "$DIST_DIRS" -eq 0 ]; then
            echo "::error::No dist directories found in packages!"
            exit 1
          fi
          echo "Found $DIST_DIRS dist directories"
          
          # List all dist directories to verify they exist and contain files
          find packages -name "dist" -type d -exec ls -la {} \;
          
          # Count files to ensure we have artifacts
          FILE_COUNT=$(find packages -name "dist" -type d -exec find {} -type f \; | wc -l)
          echo "Found $FILE_COUNT files in artifact directories"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "::error::No build artifacts found in packages/dist directories!"
            exit 1
          fi
          
          echo "✅ Artifact validation successful - $FILE_COUNT files in $DIST_DIRS directories"

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      # Download build artifacts explicitly first
      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.build_artifact_name }}
          path: packages
          
      # Validate that artifacts were successfully downloaded
      - name: Validate downloaded artifacts
        run: |
          echo "Validating downloaded artifacts..."
          # Check that artifacts were downloaded
          DIST_DIRS=$(find packages -name "dist" -type d | wc -l)
          if [ "$DIST_DIRS" -eq 0 ]; then
            echo "::error::No dist directories found in downloaded artifacts!"
            exit 1
          fi
          
          # Count files to ensure we have artifacts
          FILE_COUNT=$(find packages -name "dist" -type d -exec find {} -type f \; | wc -l)
          echo "Found $FILE_COUNT files in $DIST_DIRS artifact directories"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "::error::Downloaded artifacts contain no files!"
            exit 1
          fi
          
          echo "✅ Downloaded artifacts validation successful"
          
      # Replace workflow call with direct use of the action
      - name: Test packages
        uses: ./.github/actions/test-packages
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          artifact-name: ${{ needs.build.outputs.build_artifact_name }}

  analyze-and-release:
    name: Test Version Impact
    needs: [test, build]
    runs-on: ubuntu-latest
    outputs:
      blorkpack_version: ${{ steps.version_status.outputs.blorkpack_version }}
      blorktools_version: ${{ steps.version_status.outputs.blorktools_version }}
      blorkboard_version: ${{ steps.version_status.outputs.blorkboard_version }}
      has_version_impact: ${{ steps.version_status.outputs.has_version_impact }}
      potential_version_changes: ${{ steps.simulate_version.outputs.potential_version_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      # Download build artifacts to ensure they're available
      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.build_artifact_name }}
          path: packages
          
      # Validate that artifacts were successfully downloaded
      - name: Validate downloaded artifacts
        run: |
          echo "Validating downloaded artifacts for analyze-and-release job..."
          # Check that artifacts were downloaded
          DIST_DIRS=$(find packages -name "dist" -type d | wc -l)
          if [ "$DIST_DIRS" -eq 0 ]; then
            echo "::error::No dist directories found in downloaded artifacts!"
            exit 1
          fi
          
          # Count files to ensure we have artifacts
          FILE_COUNT=$(find packages -name "dist" -type d -exec find {} -type f \; | wc -l)
          echo "Found $FILE_COUNT files in $DIST_DIRS artifact directories"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "::error::Downloaded artifacts contain no files!"
            exit 1
          fi
          
          echo "✅ Downloaded artifacts validation successful for analyze-and-release job"
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Version impact analysis
        id: version_status
        run: |
          # Get current versions for reference
          BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
          BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
          BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
          
          echo "Current versions:"
          echo "blorkpack: $BLORKPACK_VERSION"
          echo "blorktools: $BLORKTOOLS_VERSION"  
          echo "blorkboard: $BLORKBOARD_VERSION"
          
          echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
          echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
          echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          
          # Analyze PR commits to see if there's versioning impact
          PR_COMMITS=$(git log --format=%s origin/main..HEAD)
          
          # Check if any commits would trigger version changes
          if echo "$PR_COMMITS" | grep -q -E "^(feat|fix|perf|refactor)(\([^)]+\))?!?:"; then
            echo "Found conventional commits that would trigger version changes"
            echo "has_version_impact=true" >> $GITHUB_OUTPUT
          else
            echo "No version-impacting commits found"
            echo "has_version_impact=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Simulate version changes
        id: simulate_version
        if: steps.version_status.outputs.has_version_impact == 'true'
        run: |
          # Create a temporary branch to simulate version changes
          git checkout -b temp-simulate-version
          
          # Create a summary of what changes would be made
          echo "## Potential version changes based on conventional commits:" > version_changes.md
          echo "" >> version_changes.md
          
          # Extract info from commits to determine bump types
          echo "Analyzing commits to determine potential version bumps:" 
          
          PR_COMMITS=$(git log --format=%B origin/main..HEAD)
          
          # Define regex patterns for different commit types
          FEAT_PATTERN="^feat(\([^)]+\))?!?:"
          FIX_PATTERN="^fix(\([^)]+\))?!?:"
          BREAKING_PATTERN="^(feat|fix)(\([^)]+\))?!:"
          BREAKING_FOOTER="BREAKING CHANGE:"
          
          # Analyze potential bumps for each package
          BLORKPACK_BUMP="none"
          BLORKTOOLS_BUMP="none"
          BLORKBOARD_BUMP="none"
          
          # Check for breaking changes (major bumps)
          if echo "$PR_COMMITS" | grep -q -E "$BREAKING_PATTERN" || echo "$PR_COMMITS" | grep -q "$BREAKING_FOOTER"; then
            echo "Found breaking changes that would trigger major version bumps"
            
            # Check which packages are affected
            if echo "$PR_COMMITS" | grep -q -E "^(feat|fix)(\(blorkpack\))?!:" || echo "$PR_COMMITS" | grep -q -E "BREAKING CHANGE:.*blorkpack"; then
              BLORKPACK_BUMP="major"
            fi
            
            if echo "$PR_COMMITS" | grep -q -E "^(feat|fix)(\(blorktools\))?!:" || echo "$PR_COMMITS" | grep -q -E "BREAKING CHANGE:.*blorktools"; then
              BLORKTOOLS_BUMP="major"
            fi
            
            if echo "$PR_COMMITS" | grep -q -E "^(feat|fix)(\(blorkboard\))?!:" || echo "$PR_COMMITS" | grep -q -E "BREAKING CHANGE:.*blorkboard"; then
              BLORKBOARD_BUMP="major"
            fi
          fi
          
          # Check for features (minor bumps)
          if [ "$BLORKPACK_BUMP" = "none" ] && echo "$PR_COMMITS" | grep -q -E "^feat(\(blorkpack\))?:"; then
            BLORKPACK_BUMP="minor"
          fi
          
          if [ "$BLORKTOOLS_BUMP" = "none" ] && echo "$PR_COMMITS" | grep -q -E "^feat(\(blorktools\))?:"; then
            BLORKTOOLS_BUMP="minor"
          fi
          
          if [ "$BLORKBOARD_BUMP" = "none" ] && echo "$PR_COMMITS" | grep -q -E "^feat(\(blorkboard\))?:"; then
            BLORKBOARD_BUMP="minor"
          fi
          
          # Check for fixes (patch bumps)
          if [ "$BLORKPACK_BUMP" = "none" ] && echo "$PR_COMMITS" | grep -q -E "^fix(\(blorkpack\))?:"; then
            BLORKPACK_BUMP="patch"
          fi
          
          if [ "$BLORKTOOLS_BUMP" = "none" ] && echo "$PR_COMMITS" | grep -q -E "^fix(\(blorktools\))?:"; then
            BLORKTOOLS_BUMP="patch"
          fi
          
          if [ "$BLORKBOARD_BUMP" = "none" ] && echo "$PR_COMMITS" | grep -q -E "^fix(\(blorkboard\))?:"; then
            BLORKBOARD_BUMP="patch"
          fi
          
          # Check for generic commits without scopes
          if [ "$BLORKPACK_BUMP" = "none" ] && [ "$BLORKTOOLS_BUMP" = "none" ] && [ "$BLORKBOARD_BUMP" = "none" ]; then
            if echo "$PR_COMMITS" | grep -q -E "^feat:"; then
              BLORKPACK_BUMP="minor"
              BLORKTOOLS_BUMP="minor"
              BLORKBOARD_BUMP="minor"
            elif echo "$PR_COMMITS" | grep -q -E "^fix:"; then
              BLORKPACK_BUMP="patch"
              BLORKTOOLS_BUMP="patch"
              BLORKBOARD_BUMP="patch"
            fi
          fi
          
          # Calculate potential new versions
          calculate_new_version() {
            local current_version=$1
            local bump_type=$2
            
            if [ "$bump_type" = "none" ]; then
              echo "$current_version"
              return
            fi
            
            # Parse the version components
            IFS='.' read -r major minor patch <<< "$current_version"
            
            # Apply the bump
            case "$bump_type" in
              major)
                echo "$((major + 1)).0.0"
                ;;
              minor)
                echo "$major.$((minor + 1)).0"
                ;;
              patch)
                echo "$major.$minor.$((patch + 1))"
                ;;
              *)
                echo "$current_version"
                ;;
            esac
          }
          
          NEW_BLORKPACK_VERSION=$(calculate_new_version "${{ steps.version_status.outputs.blorkpack_version }}" "$BLORKPACK_BUMP")
          NEW_BLORKTOOLS_VERSION=$(calculate_new_version "${{ steps.version_status.outputs.blorktools_version }}" "$BLORKTOOLS_BUMP")
          NEW_BLORKBOARD_VERSION=$(calculate_new_version "${{ steps.version_status.outputs.blorkboard_version }}" "$BLORKBOARD_BUMP")
          
          echo "Potential version changes:"
          echo "blorkpack: ${{ steps.version_status.outputs.blorkpack_version }} -> $NEW_BLORKPACK_VERSION ($BLORKPACK_BUMP)"
          echo "blorktools: ${{ steps.version_status.outputs.blorktools_version }} -> $NEW_BLORKTOOLS_VERSION ($BLORKTOOLS_BUMP)"
          echo "blorkboard: ${{ steps.version_status.outputs.blorkboard_version }} -> $NEW_BLORKBOARD_VERSION ($BLORKBOARD_BUMP)"
          
          # Add commit summaries to our report
          echo "### Commit Analysis" >> version_changes.md
          echo "| Package | Current | New | Bump Type |" >> version_changes.md
          echo "| ------- | ------- | --- | --------- |" >> version_changes.md
          echo "| blorkpack | ${{ steps.version_status.outputs.blorkpack_version }} | $NEW_BLORKPACK_VERSION | $BLORKPACK_BUMP |" >> version_changes.md
          echo "| blorktools | ${{ steps.version_status.outputs.blorktools_version }} | $NEW_BLORKTOOLS_VERSION | $BLORKTOOLS_BUMP |" >> version_changes.md
          echo "| blorkboard | ${{ steps.version_status.outputs.blorkboard_version }} | $NEW_BLORKBOARD_VERSION | $BLORKBOARD_BUMP |" >> version_changes.md
          echo "" >> version_changes.md
          
          # Set output with the formatted changes (escape newlines for GitHub Actions)
          CHANGES=$(cat version_changes.md)
          echo "potential_version_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Discard all changes from the simulation
          git checkout -- .
          git checkout -
          git branch -D temp-simulate-version
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 