name: Manual Fix Releases and Changesets

on:
  workflow_dispatch:
    inputs:
      package-paths:
        description: 'Comma-separated list of package paths (defaults to all)'
        required: false
        default: 'packages/blorkpack,packages/utility,packages/three-js'
      package-names:
        description: 'Comma-separated list of package names (defaults to all)'
        required: false
        default: '@littlecarlito/blorkpack,@littlecarlito/utility,@littlecarlito/three-js'
      create-missing-tags:
        description: 'Create missing tags'
        required: false
        default: true
        type: boolean
      generate-changesets:
        description: 'Generate fresh changesets'
        required: false
        default: false
        type: boolean
      debug:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  analyze-and-fix:
    name: Analyze and Fix Release Issues
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # We need full history for proper tag analysis
          token: ${{ secrets.VERSION_TOKEN || secrets.GITHUB_TOKEN }}
          
      - name: Setup environment
        id: setup
        if: inputs.generate-changesets == true
        run: |
          # Run the setup script if it exists
          if [ -f ".github/scripts/maintenance/setup-environment.sh" ]; then
            bash .github/scripts/maintenance/setup-environment.sh \
              --github-token "${{ secrets.GITHUB_TOKEN }}" \
              --node-version "20.x" \
              --pnpm-version "8.15.4" \
              --registry-url "https://npm.pkg.github.com" \
              --scope "@littlecarlito" 2>&1 | grep -E "^[a-zA-Z0-9_-]+=.+" >> $GITHUB_OUTPUT || true
          else
            # Basic Node.js setup if script doesn't exist
            echo "Setting up Node.js environment"
          fi

      # Create a unique branch for new changesets if generating them
      - name: Create branch for changesets
        id: create_branch
        if: inputs.generate-changesets == true
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="chore/generate-changesets-$TIMESTAMP"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # Clear existing changesets if generating new ones
      - name: Clear unreleased changesets
        if: inputs.generate-changesets == true
        run: |
          echo "Cleaning all unreleased changeset files"
          if [ -d ".changeset" ]; then
            rm -rf .changeset/*.md
            # Create README.md if it doesn't exist
            [ ! -f .changeset/README.md ] && echo "---\n# Changesets\n\nThis directory contains changeset files generated by the changeset tool." > .changeset/README.md
            
            # Commit the changes to clear changesets
            git add .changeset/
            git commit -m "chore: clear all unreleased changesets" || echo "No changes to commit"
          else
            echo "No .changeset directory found, skipping cleanup"
          fi

      # Generate changesets if requested
      - name: Generate precise changesets
        id: generate_changesets
        if: inputs.generate-changesets == true
        uses: ./.github/actions/generate-precise-changesets
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          auto-changeset-prefix: 'auto-'
          force-generate: 'false'

      # Check if changesets were created
      - name: Check if changesets were created
        id: check_changesets
        if: inputs.generate-changesets == true
        run: |
          CHANGESET_COUNT=$(find .changeset -name "*.md" ! -name "README.md" ! -name "config.json" | wc -l)
          echo "changeset_count=$CHANGESET_COUNT" >> $GITHUB_OUTPUT
          
          # Check if there are actual changes to commit
          CHANGES=$(git status --porcelain .changeset/)
          
          echo "==== CHANGESET DEBUG INFO ===="
          echo "Changeset count: $CHANGESET_COUNT"
          if [ -n "$CHANGES" ]; then
            echo "Changes detected in .changeset directory:"
            echo "$CHANGES"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in .changeset directory"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          # List any changesets that exist
          if [ "$CHANGESET_COUNT" -gt "0" ]; then
            echo "Existing changesets:"
            find .changeset -name "*.md" ! -name "README.md" ! -name "config.json" | xargs cat
          fi
          echo "==== END CHANGESET DEBUG INFO ===="

      # Commit and push the generated changesets
      - name: Commit and push changesets
        id: commit_changesets
        if: inputs.generate-changesets == true && steps.check_changesets.outputs.has_changes == 'true'
        run: |
          echo "Committing changes to .changeset directory"
          git add .changeset/
          git commit -m "chore: generate changesets for unreleased changes" || echo "No changes to commit"
          
          # Push the branch
          git push origin ${{ steps.create_branch.outputs.branch_name }}
          
          if [ $? -eq 0 ]; then
            echo "pushed_changes=true" >> $GITHUB_OUTPUT  
          else
            echo "pushed_changes=false" >> $GITHUB_OUTPUT
          fi

      # Create PR for generated changesets
      - name: Create PR
        id: create_pr
        if: inputs.generate-changesets == true && steps.check_changesets.outputs.has_changes == 'true' && steps.commit_changesets.outputs.pushed_changes == 'true'
        uses: ./.github/actions/manage-pull-request
        with:
          github-token: ${{ secrets.VERSION_TOKEN || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          base-branch: main
          head-branch: ${{ steps.create_branch.outputs.branch_name }}
          title: 'chore: generate changesets for unreleased changes'
          body: 'This PR generates changesets for unreleased changes since the last release or tag for each package, then cleans up existing changesets to start fresh.'

      # Add status checks to PR for workflow compatibility
      - name: Add status checks
        if: inputs.generate-changesets == true && steps.check_changesets.outputs.has_changes == 'true' && steps.commit_changesets.outputs.pushed_changes == 'true' && steps.create_pr.outputs.pr-number != ''
        run: |
          if [ -f ".github/scripts/branch/force-status.sh" ]; then
            bash .github/scripts/branch/force-status.sh \
              --token "${{ secrets.GITHUB_TOKEN }}" \
              --repo "${{ github.repository }}" \
              --sha "${{ steps.create_pr.outputs.commit-sha }}" \
              --contexts '["Build Packages", "Test / Run Tests", "Test Changesets"]' \
              --descriptions '["Build completed successfully (via manual-fix-releases)", "Tests passed successfully (via manual-fix-releases)", "Changesets validated successfully (via manual-fix-releases)"]'
          else
            echo "Status check script not found, skipping"
          fi

      # Merge the PR using the merge-pull-request action
      - name: Merge pull request
        id: merge_pr
        if: inputs.generate-changesets == true && steps.check_changesets.outputs.has_changes == 'true' && steps.commit_changesets.outputs.pushed_changes == 'true' && steps.create_pr.outputs.pr-number != ''
        uses: ./.github/actions/merge-pull-request
        with:
          github-token: ${{ secrets.VERSION_TOKEN || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.create_pr.outputs.pr-number }}
          merge-method: 'squash'
          delete-branch: 'true'
          cleanup-changesets: 'true'

      # Cleanup stale changesets
      - name: Cleanup stale changesets
        uses: ./.github/actions/cleanup-stale-changesets
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          force-cleanup: true
          auto-commit: true
          commit-message: 'chore: cleanup stale changesets [skip ci]'
          debug: ${{ inputs.debug }}
          
      # Prepare for releases by checking tag status and creating missing tags
      - name: Prepare for releases
        id: prepare
        uses: ./.github/actions/prepare-for-releases
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-paths: ${{ inputs.package-paths }}
          package-names: ${{ inputs.package-names }}
          create-missing-tags: ${{ inputs.create-missing-tags }}
          debug: ${{ inputs.debug }}
          
      # Create GitHub releases for missing tags
      - name: Create GitHub releases for missing tags
        if: steps.prepare.outputs.tags-created != '0'
        uses: ./.github/actions/create-github-releases
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-paths: ${{ inputs.package-paths }}
          package-names: ${{ inputs.package-names }}
          include-changelog: true
          
      # Report results
      - name: Report results
        run: |
          echo "## Release Fix Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Report changeset information if that step was run
          if [ "${{ inputs.generate-changesets }}" == "true" ]; then
            echo "### Changeset Generation" >> $GITHUB_STEP_SUMMARY
            echo "Changesets generated: ${{ steps.check_changesets.outputs.changeset_count || '0' }}" >> $GITHUB_STEP_SUMMARY
            echo "PR created: ${{ steps.create_pr.outputs.pr-number != '' && 'Yes (#' || 'No' }}${{ steps.create_pr.outputs.pr-number }}${{ steps.create_pr.outputs.pr-number != '' && ')' || '' }}" >> $GITHUB_STEP_SUMMARY
            echo "PR merged: ${{ steps.merge_pr.outputs.merged == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Report release preparation information
          echo "### Release Preparation" >> $GITHUB_STEP_SUMMARY
          echo "Packages checked: ${{ steps.prepare.outputs.packages-checked }}" >> $GITHUB_STEP_SUMMARY
          echo "Tags needed: ${{ steps.prepare.outputs.tags-to-create }}" >> $GITHUB_STEP_SUMMARY
          echo "Tags created: ${{ steps.prepare.outputs.tags-created }}" >> $GITHUB_STEP_SUMMARY
          echo "Ready for release: ${{ steps.prepare.outputs.ready-for-release }}" >> $GITHUB_STEP_SUMMARY 