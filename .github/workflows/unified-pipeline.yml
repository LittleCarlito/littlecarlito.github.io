name: Unified Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

# Add concurrency to ensure only one instance runs at a time
concurrency:
  group: unified-pipeline-${{ github.ref }}
  cancel-in-progress: false
  
# Note: This workflow handles GitHub Pages deployment directly.
# The separate deploy-pages.yml workflow should be disabled or deleted.
permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build packages
        run: pnpm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist

  test:
    name: Test Packages
    needs: build
    uses: ./.github/workflows/test-monorepo.yml
    with:
      artifact_name: package-builds

  version-and-publish:
    name: Version and Publish
    needs: test
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: ./
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Check for changesets
        id: check-changesets
        run: |
          if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | grep -v config.json)" ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Create Release PR or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          version: pnpm run version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          # Automatically execute the publish step without creating a PR
          createGithubReleases: true
          # Explicitly set this to false if we want to enforce direct publishing
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      # Auto-approve and merge any version PRs that get created
      - name: Find open version PRs
        if: steps.check-changesets.outputs.has_changesets == 'true' && steps.changesets.outputs.published != 'true'
        id: find-pr
        run: |
          PR_NUMBER=$(gh pr list --repo ${{ github.repository }} --json number,title --jq '.[] | select(.title=="chore: version packages") | .number')
          if [ -n "$PR_NUMBER" ]; then
            echo "Found version PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "has_pr=true" >> $GITHUB_OUTPUT
          else
            echo "No version PR found"
            echo "has_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Auto-approve version PR
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          gh pr review ${{ steps.find-pr.outputs.pr_number }} --approve --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Auto-merge version PR
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          gh pr merge ${{ steps.find-pr.outputs.pr_number }} --auto --merge --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Get package versions
        id: get_versions
        if: steps.changesets.outputs.published == 'true'
        run: |
          BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
          BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
          BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
          
          echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
          echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
          echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          
          echo "Published versions:"
          echo "blorkpack: $BLORKPACK_VERSION"
          echo "blorktools: $BLORKTOOLS_VERSION"
          echo "blorkboard: $BLORKBOARD_VERSION"

  # Build the site for GitHub Pages
  build-site:
    name: Build Site for GitHub Pages
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      # Set GITHUB_PAGES environment variable to ensure correct base URL
      - name: Build for GitHub Pages
        run: GITHUB_PAGES=true pnpm run build
        
      # Ensure _headers file is copied to the dist folder
      - name: Ensure _headers file for GitHub Pages
        run: |
          if [ -f "apps/portfolio/public/_headers" ]; then
            cp apps/portfolio/public/_headers apps/portfolio/dist/
            echo "Copied _headers file to dist folder"
          else
            echo "Warning: _headers file not found"
          fi

      # Create a .nojekyll file to disable Jekyll processing
      - name: Add .nojekyll file
        run: touch apps/portfolio/dist/.nojekyll
      
      # Deploy to GitHub Pages using JamesIves action for consistency
      - name: Deploy to GitHub Pages
        id: deployment
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: apps/portfolio/dist
          branch: gh-pages
          clean: true
          force: true
          single-commit: true
          token: ${{ secrets.PACKAGE_TOKEN }}
          commit-message: "Deploy website from unified pipeline" 