name: Unified Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: read

jobs:
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build packages
        run: pnpm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist

  test:
    name: Test Packages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: packages
        
      - name: Run tests
        run: pnpm test

  analyze-and-release:
    name: Analyze Commits and Release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      blorkpack_version: ${{ steps.semantic_release.outputs.blorkpack_version }}
      blorktools_version: ${{ steps.semantic_release.outputs.blorktools_version }}
      blorkpack_version_changed: ${{ steps.semantic_release.outputs.blorkpack_changed }}
      blorktools_version_changed: ${{ steps.semantic_release.outputs.blorktools_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Run semantic release
        id: semantic_release
        run: |
          # Install semantic-release and its dependencies
          npm install -g semantic-release @semantic-release/git @semantic-release/changelog conventional-changelog-conventionalcommits
          
          # Process blorkpack package
          cd packages/blorkpack
          
          # Get current version from package.json
          CURRENT_BLORKPACK_VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          echo "Current blorkpack version: $CURRENT_BLORKPACK_VERSION"
          
          # Run semantic-release to determine and update version
          RELEASE_OUTPUT=$(npx semantic-release --dry-run || echo "No release")
          
          # Check if a new version would be released
          if echo "$RELEASE_OUTPUT" | grep -q "The next release version is"; then
            # Actually run semantic-release to update version
            npx semantic-release
            
            # Get the new version after semantic-release has updated it
            NEXT_BLORKPACK_VERSION=$(node -p "require('./package.json').version")
            echo "New blorkpack version: $NEXT_BLORKPACK_VERSION"
            echo "blorkpack_version=$NEXT_BLORKPACK_VERSION" >> $GITHUB_OUTPUT
            echo "blorkpack_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No new version for blorkpack"
            echo "blorkpack_version=$CURRENT_BLORKPACK_VERSION" >> $GITHUB_OUTPUT
            echo "blorkpack_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Process blorktools package
          cd ../blorktools
          
          # Get current version from package.json
          CURRENT_BLORKTOOLS_VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          echo "Current blorktools version: $CURRENT_BLORKTOOLS_VERSION"
          
          # Run semantic-release to determine and update version
          RELEASE_OUTPUT=$(npx semantic-release --dry-run || echo "No release")
          
          # Check if a new version would be released
          if echo "$RELEASE_OUTPUT" | grep -q "The next release version is"; then
            # Actually run semantic-release to update version
            npx semantic-release
            
            # Get the new version after semantic-release has updated it
            NEXT_BLORKTOOLS_VERSION=$(node -p "require('./package.json').version")
            echo "New blorktools version: $NEXT_BLORKTOOLS_VERSION"
            echo "blorktools_version=$NEXT_BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
            echo "blorktools_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No new version for blorktools"
            echo "blorktools_version=$CURRENT_BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
            echo "blorktools_changed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  publish-blorkpack:
    name: Publish blorkpack Package
    needs: analyze-and-release
    if: ${{ needs.analyze-and-release.outputs.blorkpack_version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Configure package for publishing
        working-directory: packages/blorkpack
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/blorkpack"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ needs.analyze-and-release.outputs.blorkpack_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ needs.analyze-and-release.outputs.blorkpack_version }}"
        
      - name: Build package
        working-directory: packages/blorkpack
        run: |
          echo "Building blorkpack package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Check if version exists
        id: version_check
        working-directory: packages/blorkpack
        run: |
          VERSION="${{ needs.analyze-and-release.outputs.blorkpack_version }}"
          EXISTS=$(npm view @littlecarlito/blorkpack@$VERSION version 2>/dev/null || echo "")
          if [ -z "$EXISTS" ]; then
            echo "version_exists=false" >> $GITHUB_OUTPUT
          else
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists in registry, skipping publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Publish package to GitHub Packages
        if: steps.version_check.outputs.version_exists == 'false'
        working-directory: packages/blorkpack
        run: |
          echo "Publishing blorkpack version ${{ needs.analyze-and-release.outputs.blorkpack_version }} to GitHub Packages"
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  publish-blorktools:
    name: Publish blorktools Package
    needs: analyze-and-release
    if: ${{ needs.analyze-and-release.outputs.blorktools_version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Configure package for publishing
        working-directory: packages/blorktools
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/blorktools"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ needs.analyze-and-release.outputs.blorktools_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ needs.analyze-and-release.outputs.blorktools_version }}"
        
      - name: Build package
        working-directory: packages/blorktools
        run: |
          echo "Building blorktools package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Check if version exists
        id: version_check
        working-directory: packages/blorktools
        run: |
          VERSION="${{ needs.analyze-and-release.outputs.blorktools_version }}"
          EXISTS=$(npm view @littlecarlito/blorktools@$VERSION version 2>/dev/null || echo "")
          if [ -z "$EXISTS" ]; then
            echo "version_exists=false" >> $GITHUB_OUTPUT
          else
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists in registry, skipping publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Publish package to GitHub Packages
        if: steps.version_check.outputs.version_exists == 'false'
        working-directory: packages/blorktools
        run: |
          echo "Publishing blorktools version ${{ needs.analyze-and-release.outputs.blorktools_version }} to GitHub Packages"
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  deploy:
    name: Deploy to GitHub Pages
    needs: [analyze-and-release, publish-blorkpack, publish-blorktools]
    if: always() && needs.analyze-and-release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build for deployment
        run: pnpm run build
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PACKAGE_TOKEN }}
          publish_dir: ./dist 