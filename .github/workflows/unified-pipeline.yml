name: Unified Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: read

jobs:
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build packages
        run: pnpm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist

  test:
    name: Test Packages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: packages
        
      - name: Run tests
        run: pnpm test

  analyze-and-release:
    name: Analyze Commits and Release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      blorkpack_version: ${{ steps.blorkpack_release.outputs.new_release_version || steps.blorkpack_release.outputs.current_version }}
      blorktools_version: ${{ steps.blorktools_release.outputs.new_release_version || steps.blorktools_release.outputs.current_version }}
      blorkboard_version: ${{ steps.blorkboard_release.outputs.new_release_version || steps.blorkboard_release.outputs.current_version }}
      blorkpack_version_changed: ${{ steps.blorkpack_release.outputs.new_release_version != '' }}
      blorktools_version_changed: ${{ steps.blorktools_release.outputs.new_release_version != '' }}
      blorkboard_version_changed: ${{ steps.blorkboard_release.outputs.new_release_version != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'semantic-release-bot'
          git config --global user.email 'semantic-release-bot@martynus.net'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: ./
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Install semantic-release globally
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github @semantic-release/npm conventional-changelog-conventionalcommits
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Get current blorkpack version
        id: blorkpack_current
        run: |
          cd packages/blorkpack
          CURRENT_VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Run semantic-release for blorkpack
        id: blorkpack_release
        working-directory: packages/blorkpack
        run: |
          echo "Current version: ${{ steps.blorkpack_current.outputs.current_version }}"
          
          # Create completely new package.json with Node.js
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            
            // Process all dependency types
            const depTypes = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
            
            depTypes.forEach(type => {
              if (pkg[type]) {
                Object.keys(pkg[type]).forEach(dep => {
                  // Replace workspace: with * for all versions
                  if (pkg[type][dep].startsWith("workspace:")) {
                    pkg[type][dep] = "*";
                  }
                });
              }
            });
            
            // Extra check to handle nested workspace references
            const pkgStr = JSON.stringify(pkg, null, 2);
            if (pkgStr.includes("workspace:")) {
              console.log("Found additional workspace references, fixing with regex");
              const fixedPkgStr = pkgStr.replace(/"workspace:[^"]*"/g, '"*"');
              fs.writeFileSync("package.json", fixedPkgStr);
            } else {
              fs.writeFileSync("package.json", pkgStr);
            }
            
            console.log("Successfully removed all workspace: references");
          '
          
          # Verify no workspace protocols remain
          if grep -q "workspace:" package.json; then
            echo "ERROR: Still found workspace references after processing"
            cat package.json
            exit 1
          else
            echo "Successfully removed all workspace protocol references"
          fi
          
          # Configure npm directly for this package
          cat > .npmrc << EOL
          save-workspace-protocol=false
          link-workspace-packages=false
          shamefully-hoist=true
          ignore-workspace-root-check=true
          EOL
          
          # Force a commit if needed
          if [ "${{ steps.blorkpack_current.outputs.current_version }}" = "0.12.0" ]; then
            git commit --allow-empty -m "fix: force version bump for blorkpack"
          fi
          
          # Run semantic-release with a temporary package.json
          export NODE_ENV=production
          npx --no-install semantic-release
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Get current blorktools version
        id: blorktools_current
        run: |
          cd packages/blorktools
          CURRENT_VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Run semantic-release for blorktools
        id: blorktools_release
        if: success() || failure()
        working-directory: packages/blorktools
        run: |
          echo "Current version: ${{ steps.blorktools_current.outputs.current_version }}"
          
          # Create completely new package.json with Node.js
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            
            // Process all dependency types
            const depTypes = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
            
            depTypes.forEach(type => {
              if (pkg[type]) {
                Object.keys(pkg[type]).forEach(dep => {
                  // Replace workspace: with * for all versions
                  if (pkg[type][dep].startsWith("workspace:")) {
                    pkg[type][dep] = "*";
                  }
                });
              }
            });
            
            // Extra check to handle nested workspace references
            const pkgStr = JSON.stringify(pkg, null, 2);
            if (pkgStr.includes("workspace:")) {
              console.log("Found additional workspace references, fixing with regex");
              const fixedPkgStr = pkgStr.replace(/"workspace:[^"]*"/g, '"*"');
              fs.writeFileSync("package.json", fixedPkgStr);
            } else {
              fs.writeFileSync("package.json", pkgStr);
            }
            
            console.log("Successfully removed all workspace: references");
          '
          
          # Verify no workspace protocols remain
          if grep -q "workspace:" package.json; then
            echo "ERROR: Still found workspace references after processing"
            cat package.json
            exit 1
          else
            echo "Successfully removed all workspace protocol references"
          fi
          
          # Configure npm directly for this package
          cat > .npmrc << EOL
          save-workspace-protocol=false
          link-workspace-packages=false
          shamefully-hoist=true
          ignore-workspace-root-check=true
          EOL
          
          # Force a commit if needed
          if [ "${{ steps.blorktools_current.outputs.current_version }}" = "0.12.0" ]; then
            git commit --allow-empty -m "fix: force version bump for blorktools"
          fi
          
          # Run semantic-release with a temporary package.json
          export NODE_ENV=production
          npx --no-install semantic-release
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Get current blorkboard version
        id: blorkboard_current
        run: |
          cd packages/blorkboard
          CURRENT_VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Run semantic-release for blorkboard
        id: blorkboard_release
        if: success() || failure()
        working-directory: packages/blorkboard
        run: |
          echo "Current version: ${{ steps.blorkboard_current.outputs.current_version }}"
          
          # Create completely new package.json with Node.js
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            
            // Process all dependency types
            const depTypes = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
            
            depTypes.forEach(type => {
              if (pkg[type]) {
                Object.keys(pkg[type]).forEach(dep => {
                  // Replace workspace: with * for all versions
                  if (pkg[type][dep].startsWith("workspace:")) {
                    pkg[type][dep] = "*";
                  }
                });
              }
            });
            
            // Extra check to handle nested workspace references
            const pkgStr = JSON.stringify(pkg, null, 2);
            if (pkgStr.includes("workspace:")) {
              console.log("Found additional workspace references, fixing with regex");
              const fixedPkgStr = pkgStr.replace(/"workspace:[^"]*"/g, '"*"');
              fs.writeFileSync("package.json", fixedPkgStr);
            } else {
              fs.writeFileSync("package.json", pkgStr);
            }
            
            console.log("Successfully removed all workspace: references");
          '
          
          # Verify no workspace protocols remain
          if grep -q "workspace:" package.json; then
            echo "ERROR: Still found workspace references after processing"
            cat package.json
            exit 1
          else
            echo "Successfully removed all workspace protocol references"
          fi
          
          # Configure npm directly for this package
          cat > .npmrc << EOL
          save-workspace-protocol=false
          link-workspace-packages=false
          shamefully-hoist=true
          ignore-workspace-root-check=true
          EOL
          
          # Force a commit if needed
          if [ "${{ steps.blorkboard_current.outputs.current_version }}" = "0.12.0" ]; then
            git commit --allow-empty -m "fix: force version bump for blorkboard"
          fi
          
          # Run semantic-release with a temporary package.json
          export NODE_ENV=production
          npx --no-install semantic-release
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  publish-blorkpack:
    name: Publish blorkpack Package
    needs: analyze-and-release
    if: ${{ needs.analyze-and-release.outputs.blorkpack_version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Configure package for publishing
        working-directory: packages/blorkpack
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/blorkpack"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ needs.analyze-and-release.outputs.blorkpack_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ needs.analyze-and-release.outputs.blorkpack_version }}"
        
      - name: Build package
        working-directory: packages/blorkpack
        run: |
          echo "Building blorkpack package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Check if version exists
        id: version_check
        working-directory: packages/blorkpack
        run: |
          VERSION="${{ needs.analyze-and-release.outputs.blorkpack_version }}"
          EXISTS=$(npm view @littlecarlito/blorkpack@$VERSION version 2>/dev/null || echo "")
          if [ -z "$EXISTS" ]; then
            echo "version_exists=false" >> $GITHUB_OUTPUT
          else
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists in registry, skipping publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Publish package to GitHub Packages
        if: steps.version_check.outputs.version_exists == 'false'
        working-directory: packages/blorkpack
        run: |
          echo "Publishing blorkpack version ${{ needs.analyze-and-release.outputs.blorkpack_version }} to GitHub Packages"
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  publish-blorktools:
    name: Publish blorktools Package
    needs: analyze-and-release
    if: ${{ needs.analyze-and-release.outputs.blorktools_version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Configure package for publishing
        working-directory: packages/blorktools
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/blorktools"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ needs.analyze-and-release.outputs.blorktools_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ needs.analyze-and-release.outputs.blorktools_version }}"
        
      - name: Build package
        working-directory: packages/blorktools
        run: |
          echo "Building blorktools package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Check if version exists
        id: version_check
        working-directory: packages/blorktools
        run: |
          VERSION="${{ needs.analyze-and-release.outputs.blorktools_version }}"
          EXISTS=$(npm view @littlecarlito/blorktools@$VERSION version 2>/dev/null || echo "")
          if [ -z "$EXISTS" ]; then
            echo "version_exists=false" >> $GITHUB_OUTPUT
          else
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists in registry, skipping publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Publish package to GitHub Packages
        if: steps.version_check.outputs.version_exists == 'false'
        working-directory: packages/blorktools
        run: |
          echo "Publishing blorktools version ${{ needs.analyze-and-release.outputs.blorktools_version }} to GitHub Packages"
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  publish-blorkboard:
    name: Publish blorkboard Package
    needs: analyze-and-release
    if: ${{ needs.analyze-and-release.outputs.blorkboard_version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Configure package for publishing
        working-directory: packages/blorkboard
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/blorkboard"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ needs.analyze-and-release.outputs.blorkboard_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ needs.analyze-and-release.outputs.blorkboard_version }}"
        
      - name: Build package
        working-directory: packages/blorkboard
        run: |
          echo "Building blorkboard package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Check if version exists
        id: version_check
        working-directory: packages/blorkboard
        run: |
          VERSION="${{ needs.analyze-and-release.outputs.blorkboard_version }}"
          EXISTS=$(npm view @littlecarlito/blorkboard@$VERSION version 2>/dev/null || echo "")
          if [ -z "$EXISTS" ]; then
            echo "version_exists=false" >> $GITHUB_OUTPUT
          else
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists in registry, skipping publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
      - name: Publish package to GitHub Packages
        if: steps.version_check.outputs.version_exists == 'false'
        working-directory: packages/blorkboard
        run: |
          echo "Publishing blorkboard version ${{ needs.analyze-and-release.outputs.blorkboard_version }} to GitHub Packages"
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  deploy:
    name: Deploy to GitHub Pages
    needs: [analyze-and-release, publish-blorkpack, publish-blorktools, publish-blorkboard]
    if: always() && needs.analyze-and-release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build for deployment
        run: pnpm run build
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PACKAGE_TOKEN }}
          publish_dir: ./dist 