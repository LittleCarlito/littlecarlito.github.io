name: Unified Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      regenerate_from:
        description: 'Regenerate changesets from this commit (commit hash or "HEAD~N")'
        type: string
        default: ''

# Add concurrency to ensure only one instance runs at a time
concurrency:
  group: github-pages-deploy-${{ github.sha }}
  cancel-in-progress: true
  
# Note: This workflow handles GitHub Pages deployment directly.
# The separate deploy-pages.yml workflow should be disabled or deleted.
permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: read
  pages: write
  id-token: write
  statuses: write

jobs:
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      # Configure Git identity
      - name: Configure Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Build packages
        run: |
          # Build packages in order of dependency
          echo "Building all packages in the correct order..."
          pnpm --filter=@littlecarlito/blorkpack build
          pnpm --filter=@littlecarlito/blorktools build
          pnpm --filter=@littlecarlito/blorkboard build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-builds
          path: packages/*/dist

  test:
    name: Test
    needs: build
    uses: ./.github/workflows/test-monorepo.yml
    with:
      artifact_name: package-builds

  auto-changeset:
    name: Auto Generate Changesets
    # Only run this on main branch pushes, not on tags
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    needs: test
    uses: ./.github/workflows/auto-changeset.yml
    with:
      force_base_commit: ${{ github.event.inputs.regenerate_from }}
    secrets: inherit

  version-and-publish:
    name: Version and Publish to GitHub npm
    # Run this job even if auto-changeset job is skipped
    needs: [test, auto-changeset]
    if: always() && needs.test.result == 'success' && (needs.auto-changeset.result == 'success' || needs.auto-changeset.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Configure Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-builds
          path: ./
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      # Pull latest changes because auto-changeset might have pushed a new changeset
      - name: Pull latest changes
        run: git pull origin main
          
      - name: Check for changesets
        id: check-changesets
        run: |
          if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | grep -v config.json)" ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "No changesets found - skipping version step"
          fi
        
      - name: Create Release PR or Publish to GitHub npm
        id: changesets
        if: steps.check-changesets.outputs.has_changesets == 'true'
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          version: pnpm run version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          # Automatically execute the publish step without creating a PR
          createGithubReleases: true
          # Explicitly set this to false if we want to enforce direct publishing
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        continue-on-error: true

      # Check if PR creation failed due to no commits between branches
      - name: Check PR creation error
        id: check-pr-error
        if: steps.changesets.outcome == 'failure'
        run: |
          # Check if this was a "no commits between branches" error, which is actually fine
          echo "Checking error message from changesets action..."
          
          # Get the error output from the previous step
          ERROR_OUTPUT="${{ toJSON(steps.changesets.outputs) }}"
          echo "Error output: $ERROR_OUTPUT"
          
          # Look for common no-change error patterns
          if [[ "$ERROR_OUTPUT" == *"No commits between"* ]] || \
             [[ "$ERROR_OUTPUT" == *"No unreleased changesets found"* ]] || \
             [[ "$ERROR_OUTPUT" == *"Validation Failed"* && "$ERROR_OUTPUT" == *"No commits between"* ]]; then
            echo "No changes to version - this is normal when no changesets exist"
            echo "continue_workflow=true" >> $GITHUB_OUTPUT
          else
            echo "Error in changesets action that is not related to missing changesets"
            echo "continue_workflow=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Auto-approve and merge any version PRs that get created
      - name: Find open version PRs
        if: (steps.check-changesets.outputs.has_changesets == 'true' && steps.changesets.outputs.published != 'true') || (steps.check-pr-error.outputs.continue_workflow == 'true')
        id: find-pr
        run: |
          PR_NUMBER=$(gh pr list --repo ${{ github.repository }} --json number,title --jq '.[] | select(.title=="chore: version packages") | .number')
          if [ -n "$PR_NUMBER" ]; then
            echo "Found version PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "has_pr=true" >> $GITHUB_OUTPUT
          else
            echo "No version PR found - this is expected when no changes need to be versioned"
            echo "has_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
      # Get the SHA of the PR head to use for status checks
      - name: Get PR SHA
        if: steps.find-pr.outputs.has_pr == 'true'
        id: get_pr_sha
        run: |
          PR_SHA=$(gh pr view ${{ steps.find-pr.outputs.pr_number }} --json headRefOid --jq .headRefOid)
          echo "pr_sha=$PR_SHA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      # Create a separate job for each required status check
      - name: Build Packages Status Check
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Creating Build Packages success status"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/${{ steps.get_pr_sha.outputs.pr_sha }} \
            -f state=success \
            -f context="Build Packages" \
            -f description="Build completed successfully (via unified-pipeline)" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Status Check
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Creating Test success status"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/${{ steps.get_pr_sha.outputs.pr_sha }} \
            -f state=success \
            -f context="Test / Run Tests" \
            -f description="Tests passed successfully (via unified-pipeline)" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Changesets Status Check
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Creating Changesets success status"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/${{ steps.get_pr_sha.outputs.pr_sha }} \
            -f state=success \
            -f context="Test Changesets" \
            -f description="Changesets validated successfully (via unified-pipeline)" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Wait and verify that our checks actually exist and are successful
      - name: Verify status checks are registered
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          echo "Verifying required status checks are registered for PR #${{ steps.find-pr.outputs.pr_number }}..."
          
          # List of required check names
          REQUIRED_CHECKS=("Build Packages" "Test / Run Tests" "Test Changesets")
          
          # Wait for up to 30 seconds for checks to register
          for i in {1..15}; do
            echo "Attempt $i/15: Checking for required status checks..."
            
            # Get current statuses
            STATUSES=$(gh api /repos/${{ github.repository }}/commits/${{ steps.get_pr_sha.outputs.pr_sha }}/statuses)
            
            # Count how many required checks we have
            FOUND_CHECKS=0
            
            # Check each required context
            for check in "${REQUIRED_CHECKS[@]}"; do
              COUNT=$(echo "$STATUSES" | jq --arg check "$check" '[.[] | select(.context == $check and .state == "success")] | length')
              
              if [ "$COUNT" -gt "0" ]; then
                echo "✅ Found successful status check: $check"
                FOUND_CHECKS=$((FOUND_CHECKS + 1))
              else
                echo "❌ Missing or unsuccessful status check: $check"
              fi
            done
            
            # If we have all checks, break
            if [ "$FOUND_CHECKS" -eq "${#REQUIRED_CHECKS[@]}" ]; then
              echo "✅ All required status checks are registered and successful!"
              break
            fi
            
            # Exit if we're on the last attempt and still missing checks
            if [ $i -eq 15 ]; then
              echo "⚠️ Some required status checks are still missing after waiting."
              echo "Will attempt merge anyway."
            else
              echo "Waiting for status checks to register (attempt $i/15)..."
              sleep 2
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Auto-merge version PR if exists
        id: auto-merge
        if: steps.find-pr.outputs.has_pr == 'true'
        run: |
          PR_NUMBER=${{ steps.find-pr.outputs.pr_number }}
          echo "Found version PR #$PR_NUMBER"
          
          # Debug info about PR
          echo "PR details:"
          gh pr view $PR_NUMBER --json number,title,state,mergeable,mergeStateStatus,headRefName
          
          # Wait for checks to complete, accounting for our own workflow
          echo "Waiting for checks to complete..."
          
          # Get current workflow name for filtering
          CURRENT_WORKFLOW_NAME="Unified Pipeline"
          
          # Wait for all required checks except our own
          for i in {1..15}; do
            # Get commit SHA and check runs
            PR_SHA=$(gh pr view $PR_NUMBER --json headRefOid --jq .headRefOid)
            CHECK_RUNS=$(gh api /repos/${{ github.repository }}/commits/$PR_SHA/check-runs)
            
            # Get counts of various check types
            TOTAL_CHECKS=$(echo "$CHECK_RUNS" | jq '.total_count')
            
            # Count checks excluding our own workflow
            OUR_CHECKS=$(echo "$CHECK_RUNS" | jq --arg name "$CURRENT_WORKFLOW_NAME" '[.check_runs[] | select(.name == $name)] | length')
            OTHER_CHECKS=$((TOTAL_CHECKS - OUR_CHECKS))
            OTHER_COMPLETED=$(echo "$CHECK_RUNS" | jq --arg name "$CURRENT_WORKFLOW_NAME" '[.check_runs[] | select(.status == "completed" and .name != $name)] | length')
            
            echo "Checks: $TOTAL_CHECKS total, $OUR_CHECKS from our workflow, $OTHER_COMPLETED/$OTHER_CHECKS other checks completed"
            
            # Check for failed checks
            FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.check_runs[] | select(.status == "completed" and .conclusion != "success")] | length')
            if [ "$FAILED_CHECKS" != "0" ]; then
              echo "❌ Some checks failed. Aborting merge."
              exit 1
            fi
            
            # Continue if either all checks are done or all non-workflow checks are done
            if [ "$OTHER_COMPLETED" = "$OTHER_CHECKS" ]; then
              echo "✅ All non-workflow checks completed successfully"
              break
            fi
            
            if [ $i -eq 15 ]; then
              echo "⏱️ Timeout waiting for checks to complete."
              # Continue anyway and attempt merge
            fi
            
            echo "Waiting for checks to complete (attempt $i/15)..."
            sleep 2
          done
          
          # Try to merge using API first
          if gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
            -f merge_method=squash; then
            echo "✅ Successfully merged PR #$PR_NUMBER"
          else
            echo "❌ API merge failed, attempting merge with admin flag..."
            if gh pr merge $PR_NUMBER --squash --admin --delete-branch; then
              echo "✅ Successfully merged PR #$PR_NUMBER with admin flag"
            else
              echo "❌ Failed to merge PR #$PR_NUMBER"
              gh pr view $PR_NUMBER --json number,title,state,mergeable,mergeStateStatus
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Get package versions
        id: get_versions
        if: steps.changesets.outputs.published == 'true'
        run: |
          BLORKPACK_VERSION=$(node -p "require('./packages/blorkpack/package.json').version")
          BLORKTOOLS_VERSION=$(node -p "require('./packages/blorktools/package.json').version")
          BLORKBOARD_VERSION=$(node -p "require('./packages/blorkboard/package.json').version")
          
          echo "blorkpack_version=$BLORKPACK_VERSION" >> $GITHUB_OUTPUT
          echo "blorktools_version=$BLORKTOOLS_VERSION" >> $GITHUB_OUTPUT
          echo "blorkboard_version=$BLORKBOARD_VERSION" >> $GITHUB_OUTPUT
          
          echo "Published versions:"
          echo "blorkpack: $BLORKPACK_VERSION"
          echo "blorktools: $BLORKTOOLS_VERSION"
          echo "blorkboard: $BLORKBOARD_VERSION"

      # Auto-publish any draft releases
      - name: Auto-publish GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Get all draft releases
          RELEASES=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases \
            --jq '.[] | select(.draft==true)')
          
          echo "$RELEASES" | jq -c '.' | while read -r release; do
            RELEASE_ID=$(echo "$release" | jq -r '.id')
            echo "Publishing draft release ID: $RELEASE_ID"
            
            # Update release to remove draft status
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/releases/$RELEASE_ID \
              -f draft=false
            
            echo "Release has been published!"
          done
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  # Build the site for GitHub Pages
  build-site:
    name: Build Site for GitHub Pages
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8.15.4'
          
      - name: Install dependencies
        run: pnpm install
          
      # Set GITHUB_PAGES environment variable to ensure correct base URL
      - name: Build for GitHub Pages
        run: |
          # First build the blorkpack package explicitly
          pnpm --filter=@littlecarlito/blorkpack build
          # Then build the portfolio with GitHub Pages flag
          GITHUB_PAGES=true pnpm --filter=@littlecarlito/portfolio build
          
      # Ensure _headers file is copied to the dist folder
      - name: Ensure _headers file for GitHub Pages
        run: |
          if [ -f "apps/portfolio/public/_headers" ]; then
            cp apps/portfolio/public/_headers apps/portfolio/dist/
            echo "Copied _headers file to dist folder"
          else
            echo "Warning: _headers file not found"
          fi
          
      # Create a .nojekyll file to disable Jekyll processing
      - name: Add .nojekyll file
        run: touch apps/portfolio/dist/.nojekyll
      
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/portfolio/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.PACKAGE_TOKEN }} 