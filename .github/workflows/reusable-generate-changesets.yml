name: Reusable Generate Changesets

on:
  workflow_call:
    inputs:
      since:
        description: 'Generate changesets from commits since (e.g., "1 day ago", commit hash, or branch name)'
        required: false
        type: string
        default: ''
      force_base_commit:
        description: 'Force a specific base commit to check from (useful for initial setup)'
        required: false
        type: string
        default: ''
    outputs:
      changeset_created:
        description: "Whether a changeset was created"
        value: ${{ jobs.generate-changesets.outputs.changeset_created }}
      base_commit:
        description: "The base commit used for comparison"
        value: ${{ jobs.generate-changesets.outputs.base_commit }}
      pr_number:
        description: "The PR number if one was created"
        value: ${{ jobs.generate-changesets.outputs.pr_number }}
  workflow_dispatch:
    inputs:
      since:
        description: 'Generate changesets from commits since (e.g., "1 day ago", commit hash, or branch name)'
        required: false
        default: ''
      force_base_commit:
        description: 'Force a specific base commit to check from (useful for initial setup)'
        required: false
        default: ''

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  generate-changesets:
    name: Generate Changesets from Conventional Commits
    runs-on: ubuntu-latest
    outputs:
      changeset_created: ${{ steps.changeset_mgmt.outputs.has-auto-changesets }}
      base_commit: ${{ steps.check_commits.outputs.base_commit }}
      pr_number: ${{ steps.changeset_mgmt.outputs.pr-number }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PR_CREATION_TOKEN }}
      
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          node-version: 'lts/*'
          pnpm-version: '8.15.4'
      
      - name: Check conventional commits
        id: check_commits
        run: |
          # Count conventional commits since latest changeset or tag
          LATEST_CHANGESET_COMMIT=$(git log -1 --format=%H -- .changeset/)
          LATEST_TAG_COMMIT=$(git rev-list --tags --max-count=1)
          
          # Determine base commit to check from
          if [ -n "${{ inputs.force_base_commit }}" ]; then
            BASE_COMMIT="${{ inputs.force_base_commit }}"
            echo "Using forced base commit: $BASE_COMMIT"
          elif [ -z "${{ inputs.since }}" ]; then
            if [ -n "$LATEST_CHANGESET_COMMIT" ]; then
              BASE_COMMIT=$LATEST_CHANGESET_COMMIT
              echo "Using latest changeset commit as base: $BASE_COMMIT"
            elif [ -n "$LATEST_TAG_COMMIT" ]; then
              BASE_COMMIT=$LATEST_TAG_COMMIT
              echo "Using latest tag commit as base: $BASE_COMMIT"
            else
              # Get the first commit in the repo
              BASE_COMMIT=$(git rev-list --max-parents=0 HEAD)
              echo "No changesets or tags found, using first commit in repo: $BASE_COMMIT"
            fi
          else
            BASE_COMMIT="${{ inputs.since }}"
            echo "Using provided base: $BASE_COMMIT"
          fi
          
          # Count conventional commits, excluding auto-generated changeset commits
          CONVENTIONAL_COUNT=$(git log $BASE_COMMIT..HEAD --format=%s | grep -E '^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert)(\([^)]+\))?!?:' | grep -v "auto-generate changeset" | wc -l)
          
          echo "Found $CONVENTIONAL_COUNT conventional commits since $BASE_COMMIT"
          echo "base_commit=$BASE_COMMIT" >> $GITHUB_OUTPUT
          echo "conventional_count=$CONVENTIONAL_COUNT" >> $GITHUB_OUTPUT
      
      - name: Manage changesets
        id: changeset_mgmt
        if: steps.check_commits.outputs.conventional_count != '0'
        uses: ./.github/actions/changeset-management
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          since-commit: ${{ steps.check_commits.outputs.base_commit }}
          create-release: 'false'
          auto-changeset-prefix: 'auto-'
      
      # Get PR SHA 
      - name: Get PR SHA
        id: get-sha
        if: steps.changeset_mgmt.outputs.has-auto-changesets == 'true' && steps.changeset_mgmt.outputs.pr-number != ''
        shell: bash
        run: |
          # Use shared script to get PR SHA
          SHA=$(bash .github/scripts/branch/get-sha.sh --pr-number "${{ steps.changeset_mgmt.outputs.pr-number }}")
          echo "sha=$SHA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Add status checks
        if: steps.changeset_mgmt.outputs.has-auto-changesets == 'true' && steps.changeset_mgmt.outputs.pr-number != ''
        shell: bash
        run: |
          bash .github/scripts/branch/force-status.sh \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --repo "${{ github.repository }}" \
            --sha "${{ steps.get-sha.outputs.sha }}" \
            --contexts '["Build Packages", "Test / Run Tests", "Test Changesets"]'
      
      # Wait for checks to complete before merging
      - name: Wait for checks to complete
        if: steps.changeset_mgmt.outputs.has-auto-changesets == 'true' && steps.changeset_mgmt.outputs.pr-number != ''
        shell: bash
        run: |
          WORKFLOW_NAME="Reusable Generate Changesets"
          echo "Waiting for checks to complete with workflow name: $WORKFLOW_NAME"
          
          bash .github/scripts/branch/wait-checks.sh \
            --repo "${{ github.repository }}" \
            --sha "${{ steps.get-sha.outputs.sha }}" \
            --workflow "$WORKFLOW_NAME" \
            --timeout "300" \
            --min-checks "3"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Merge PR
        if: steps.changeset_mgmt.outputs.pr-number != ''
        uses: ./.github/actions/pr-management
        with:
          github-token: ${{ secrets.PR_CREATION_TOKEN }}
          repository: ${{ github.repository }}
          pr-number: ${{ steps.changeset_mgmt.outputs.pr-number }}
          merge-method: 'squash'
          delete-branch: 'true'
      
      - name: No conventional commits found
        if: steps.check_commits.outputs.conventional_count == '0'
        run: |
          echo "No conventional commits found since ${{ steps.check_commits.outputs.base_commit }}. No changeset needed."
          echo "changeset_created=false" >> $GITHUB_OUTPUT 