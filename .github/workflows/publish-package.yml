name: Publish Package to GitHub Packages

on:
  # Run this workflow after the Release workflow completes
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  # Allow manual trigger
  workflow_dispatch:

jobs:
  download-metadata:
    name: Download Version Metadata
    runs-on: ubuntu-latest
    permissions:
      actions: read
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      blorkpack_pre_version: ${{ steps.extract-metadata.outputs.blorkpack_pre_version }}
      blorkpack_new_version: ${{ steps.extract-metadata.outputs.blorkpack_new_version }}
      blorktools_pre_version: ${{ steps.extract-metadata.outputs.blorktools_pre_version }}
      blorktools_new_version: ${{ steps.extract-metadata.outputs.blorktools_new_version }}
      blorkpack_version_changed: ${{ steps.extract-metadata.outputs.blorkpack_version_changed }}
      blorktools_version_changed: ${{ steps.extract-metadata.outputs.blorktools_version_changed }}
      metadata_found: ${{ steps.extract-metadata.outputs.metadata_found }}
    steps:
      - name: Debug Workflow Info
        run: |
          echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow Run Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow Name: ${{ github.event.workflow_run.workflow_id }}"
      
      - name: Download version metadata
        id: download-metadata
        run: |
          echo "Attempting to download artifacts from workflow run ID: ${{ github.event.workflow_run.id }}"
          mkdir -p ./artifacts
          
          # Use GitHub API to get artifacts from the workflow run
          echo "Getting list of artifacts from GitHub API..."
          ARTIFACTS_RESPONSE=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts")
          
          echo "Full artifacts response (names only):"
          echo "$ARTIFACTS_RESPONSE" | jq '.artifacts[].name'
          
          ARTIFACTS_URL=$(echo "$ARTIFACTS_RESPONSE" | \
            jq -r '.artifacts[] | select(.name=="version-metadata") | .archive_download_url')
          
          if [ -n "$ARTIFACTS_URL" ]; then
            echo "Found artifact URL: $ARTIFACTS_URL"
            
            # Download the artifact
            curl -s -L \
              -H "Authorization: token ${{ secrets.PACKAGE_TOKEN }}" \
              -o ./artifacts/artifact.zip \
              "$ARTIFACTS_URL"
            
            # Extract the artifact
            unzip -o ./artifacts/artifact.zip -d ./artifacts || {
              echo "Error extracting artifact"
              exit 1
            }
            
            echo "Extracted artifact contents:"
            ls -la ./artifacts
          else
            echo "No version-metadata artifact found in workflow run"
            exit 1
          fi

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f -ls || echo "No artifacts found"
          
      - name: Extract version metadata
        id: extract-metadata
        run: |
          if [ -f ./artifacts/version-metadata.json ]; then
            echo "Found version metadata file:"
            cat ./artifacts/version-metadata.json
            
            # Extract version information from metadata
            BLORKPACK_PRE_VERSION=$(jq -r '.blorkpack.pre_version' ./artifacts/version-metadata.json)
            BLORKPACK_NEW_VERSION=$(jq -r '.blorkpack.new_version' ./artifacts/version-metadata.json)
            BLORKTOOLS_PRE_VERSION=$(jq -r '.blorktools.pre_version' ./artifacts/version-metadata.json)
            BLORKTOOLS_NEW_VERSION=$(jq -r '.blorktools.new_version' ./artifacts/version-metadata.json)
            
            # Determine if versions changed
            if [ "$BLORKPACK_PRE_VERSION" != "$BLORKPACK_NEW_VERSION" ]; then
              BLORKPACK_CHANGED="true"
              echo "Blorkpack version changed!"
            else
              BLORKPACK_CHANGED="false"
              echo "Blorkpack version unchanged"
            fi
            
            if [ "$BLORKTOOLS_PRE_VERSION" != "$BLORKTOOLS_NEW_VERSION" ]; then
              BLORKTOOLS_CHANGED="true"
              echo "Blorktools version changed!"
            else
              BLORKTOOLS_CHANGED="false"
              echo "Blorktools version unchanged"
            fi
            
            # Set outputs
            echo "blorkpack_pre_version=$BLORKPACK_PRE_VERSION" >> $GITHUB_OUTPUT
            echo "blorkpack_new_version=$BLORKPACK_NEW_VERSION" >> $GITHUB_OUTPUT
            echo "blorktools_pre_version=$BLORKTOOLS_PRE_VERSION" >> $GITHUB_OUTPUT
            echo "blorktools_new_version=$BLORKTOOLS_NEW_VERSION" >> $GITHUB_OUTPUT
            echo "blorkpack_version_changed=$BLORKPACK_CHANGED" >> $GITHUB_OUTPUT
            echo "blorktools_version_changed=$BLORKTOOLS_CHANGED" >> $GITHUB_OUTPUT
            echo "metadata_found=true" >> $GITHUB_OUTPUT
            
            # Log
            echo "Blorkpack: $BLORKPACK_PRE_VERSION -> $BLORKPACK_NEW_VERSION (Changed: $BLORKPACK_CHANGED)"
            echo "Blorktools: $BLORKTOOLS_PRE_VERSION -> $BLORKTOOLS_NEW_VERSION (Changed: $BLORKTOOLS_CHANGED)"
          else
            echo "ERROR: Version metadata file not found"
            echo "Current directory contents:"
            ls -la
            echo "Artifacts directory contents:"
            ls -la ./artifacts || echo "Artifacts directory not found"
            
            echo "metadata_found=false" >> $GITHUB_OUTPUT
            echo "blorkpack_version_changed=false" >> $GITHUB_OUTPUT
            echo "blorktools_version_changed=false" >> $GITHUB_OUTPUT
          fi

  publish-blorkpack:
    name: Publish blorkpack Package
    runs-on: ubuntu-latest
    needs: download-metadata
    permissions:
      contents: read
      packages: write
    if: ${{ needs.download-metadata.outputs.metadata_found == 'true' && needs.download-metadata.outputs.blorkpack_version_changed == 'true' }}
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
      
      - name: Install dependencies
        run: |
          npm install -g @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm semantic-release
          echo "Installed semantic-release and required plugins globally"
          
      - name: Configure package for publishing
        working-directory: packages/blorkpack
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/blorkpack"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ needs.download-metadata.outputs.blorkpack_new_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ needs.download-metadata.outputs.blorkpack_new_version }}"
          cat package.json | grep version
      
      - name: Build package
        working-directory: packages/blorkpack
        run: |
          echo "Building blorkpack package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Publish package to GitHub Packages
        working-directory: packages/blorkpack
        run: |
          echo "Publishing blorkpack version ${{ needs.download-metadata.outputs.blorkpack_new_version }} to GitHub Packages"
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

  publish-blorktools:
    name: Publish blorktools Package
    runs-on: ubuntu-latest
    needs: download-metadata
    permissions:
      contents: read
      packages: write
    if: ${{ needs.download-metadata.outputs.metadata_found == 'true' && needs.download-metadata.outputs.blorktools_version_changed == 'true' }}
    steps:
      - name: Debug all outputs from previous job
        run: |
          echo "All metadata outputs from download-metadata job:"
          echo "metadata_found: ${{ needs.download-metadata.outputs.metadata_found }}"
          echo "blorktools_version_changed: ${{ needs.download-metadata.outputs.blorktools_version_changed }}"
          echo "blorktools_pre_version: ${{ needs.download-metadata.outputs.blorktools_pre_version }}"
          echo "blorktools_new_version: ${{ needs.download-metadata.outputs.blorktools_new_version }}"
          echo "Raw if condition: needs.download-metadata.outputs.metadata_found == 'true' && needs.download-metadata.outputs.blorktools_version_changed == 'true'"
          echo "Evaluated as: ${{ needs.download-metadata.outputs.metadata_found == 'true' && needs.download-metadata.outputs.blorktools_version_changed == 'true' }}"
          
      - name: Checkout latest code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@littlecarlito'
          
      - name: Install dependencies
        run: |
          npm install -g @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm semantic-release
          echo "Installed semantic-release and required plugins globally"
      
      - name: Debug Version Information
        run: |
          echo "Blorktools pre version: ${{ needs.download-metadata.outputs.blorktools_pre_version }}"
          echo "Blorktools new version: ${{ needs.download-metadata.outputs.blorktools_new_version }}"
          echo "Blorktools version changed: ${{ needs.download-metadata.outputs.blorktools_version_changed }}"

      - name: Configure package for publishing
        working-directory: packages/blorktools
        run: |
          # Update package name to use GitHub scoped name
          jq '.name = "@littlecarlito/blorktools"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Set version from semantic-release
          jq --arg version "${{ needs.download-metadata.outputs.blorktools_new_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Prepared package.json with version ${{ needs.download-metadata.outputs.blorktools_new_version }}"
          cat package.json | grep version
      
      - name: Build package
        working-directory: packages/blorktools
        run: |
          echo "Building blorktools package..."
          pnpm install
          pnpm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      
      - name: Publish package to GitHub Packages
        working-directory: packages/blorktools
        run: |
          echo "Publishing blorktools version ${{ needs.download-metadata.outputs.blorktools_new_version }} to GitHub Packages"
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }} 